;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : 1 Phase fix power supply
;Version : 1.0
;Date    : 11/19/2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega48
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*******************************************************/
;
;#include <mega48.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $00000009 VOL: 0
	#endif
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;#include <scan_led.h>
;#include <ADE7753.h>
;#include <delay.h>
;
;// Declare your global variables here
;
;
;#define TIMER2_OFF  TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2)
;#define TIMER2_ON   TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (1<<TOIE2)
;
;#define BUZZER  PORTD.5
;#define BUZZER_OFF  BUZZER = 0
;#define BUZZER_ON   BUZZER = 1
;
;#define CURRENT_SET_MIN 7
;#define CURRENT_SET_MAX 20
;
;#define NUM_FILTER  4
;#define NUM_SAMPLE  20
;
;unsigned int    AI10_Voltage_buff[NUM_SAMPLE];
;unsigned int    AI10_Currrent_buff[NUM_SAMPLE];
;unsigned int    AI10_Temp_buff[NUM_SAMPLE];
;unsigned long   Ulong_tmp;
;unsigned char   Uc_Buff_count = 0;
;unsigned char   Uc_Loop_count;
;unsigned char   Uc_Loop2_count;
;unsigned   int  Uint_Timer_Count = 0;
;bit Bit_sample_full = 0;
;bit Bit_warning = 0;
;bit Bit_Zero_flag = 0;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0039 {

	.CSEG
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 003A // Place your code here
; 0000 003B     Bit_Zero_flag = 1;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 003C }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0040 {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0041 // Place your code here
; 0000 0042     Bit_Zero_flag = 1;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0043 }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0047 {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0048     // Reinitialize Timer1 value
; 0000 0049     TCNT1H=0xA000 >> 8;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 004A     TCNT1L=0xA000 & 0xff;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 004B     // Place your code here
; 0000 004C     SCAN_LED();
;PCODE: $00000020 VOL: 0
; 0000 004D     if(Uint_Timer_Count < 200)  Uint_Timer_Count++;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 004E }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0053 {
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0054 // Reinitialize Timer2 value
; 0000 0055     TCNT2=0xD0;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0056     if(BUZZER == 0)   BUZZER_ON;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0057     else    BUZZER_OFF;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0058 // Place your code here
; 0000 0059 
; 0000 005A }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0060 {
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0061 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000003E VOL: 0
;	adc_input -> Y+0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0062 // Delay needed for the stabilization of the ADC input voltage
; 0000 0063 delay_us(10);
;PCODE: $00000042 VOL: 0
; 0000 0064 // Start the AD conversion
; 0000 0065 ADCSRA|=(1<<ADSC);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0066 // Wait for the AD conversion to complete
; 0000 0067 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0068 ADCSRA|=(1<<ADIF);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0069 return ADCW;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 006A }
;PCODE: $00000052 VOL: 0
;
;void main(void)
; 0000 006D {
;PCODE: $00000053 VOL: 0
; 0000 006E     // Declare your local variables here
; 0000 006F 
; 0000 0070     // Crystal Oscillator division factor: 1
; 0000 0071     #pragma optsize-
; 0000 0072     CLKPR=(1<<CLKPCE);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0073     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0074     #ifdef _OPTIMIZE_SIZE_
; 0000 0075     #pragma optsize+
; 0000 0076     #endif
; 0000 0077 
; 0000 0078     // Input/Output Ports initialization
; 0000 0079     // Port B initialization
; 0000 007A     // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=Out Bit0=In
; 0000 007B     DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 007C     // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=0 Bit0=T
; 0000 007D     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 007E 
; 0000 007F     // Port C initialization
; 0000 0080     // Function: Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=Out Bit1=In Bit0=In
; 0000 0081     DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (0<<DDC3) | (1<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0082     // State: Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=0 Bit1=T Bit0=T
; 0000 0083     PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0084 
; 0000 0085     // Port D initialization
; 0000 0086     // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0087     DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0088     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0089     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 008A 
; 0000 008B     // Timer/Counter 0 initialization
; 0000 008C     // Clock source: System Clock
; 0000 008D     // Clock value: Timer 0 Stopped
; 0000 008E     // Mode: Normal top=0xFF
; 0000 008F     // OC0A output: Disconnected
; 0000 0090     // OC0B output: Disconnected
; 0000 0091     TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0092     TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0093     TCNT0=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0094     OCR0A=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0095     OCR0B=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0096 
; 0000 0097     // Timer/Counter 1 initialization
; 0000 0098     // Clock source: System Clock
; 0000 0099     // Clock value: 8000,000 kHz
; 0000 009A     // Mode: Normal top=0xFFFF
; 0000 009B     // OC1A output: Disconnected
; 0000 009C     // OC1B output: Disconnected
; 0000 009D     // Noise Canceler: Off
; 0000 009E     // Input Capture on Falling Edge
; 0000 009F     // Timer Period: 4 ms
; 0000 00A0     // Timer1 Overflow Interrupt: On
; 0000 00A1     // Input Capture Interrupt: Off
; 0000 00A2     // Compare A Match Interrupt: Off
; 0000 00A3     // Compare B Match Interrupt: Off
; 0000 00A4     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00A5     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00A6     TCNT1H=0x83;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00A7     TCNT1L=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00A8     ICR1H=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00A9     ICR1L=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00AA     OCR1AH=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00AB     OCR1AL=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00AC     OCR1BH=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00AD     OCR1BL=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00AE 
; 0000 00AF     // Timer/Counter 2 initialization
; 0000 00B0     // Clock source: System Clock
; 0000 00B1     // Clock value: Timer2 Stopped
; 0000 00B2     // Mode: Normal top=0xFF
; 0000 00B3     // OC2A output: Disconnected
; 0000 00B4     // OC2B output: Disconnected
; 0000 00B5     // ASSR=(0<<EXCLK) | (0<<AS2);
; 0000 00B6     // TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
; 0000 00B7     // TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
; 0000 00B8     // TCNT2=0x00;
; 0000 00B9     // OCR2A=0x00;
; 0000 00BA     // OCR2B=0x00;
; 0000 00BB 
; 0000 00BC     // Timer/Counter 2 initialization
; 0000 00BD     // Clock source: System Clock
; 0000 00BE     // Clock value: 250,000 kHz
; 0000 00BF     // Mode: Normal top=0xFF
; 0000 00C0     // OC2A output: Disconnected
; 0000 00C1     // OC2B output: Disconnected
; 0000 00C2     // Timer Period: 0,5 ms
; 0000 00C3     ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00C4     TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00C5     TCCR2B=(0<<WGM22) | (0<<CS22) | (1<<CS21) | (1<<CS20);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00C6     TCNT2=0x83;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00C7     OCR2A=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00C8     OCR2B=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00C9 
; 0000 00CA     // Timer/Counter 0 Interrupt(s) initialization
; 0000 00CB     TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00CC 
; 0000 00CD     // Timer/Counter 1 Interrupt(s) initialization
; 0000 00CE     TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00CF 
; 0000 00D0 
; 0000 00D1     // Timer/Counter 2 Interrupt(s) initialization
; 0000 00D2     // TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
; 0000 00D3     TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (1<<TOIE2);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00D4 
; 0000 00D5     // External Interrupt(s) initialization
; 0000 00D6     // INT0: On
; 0000 00D7     // INT0 Mode: Falling Edge
; 0000 00D8     // INT1: On
; 0000 00D9     // INT1 Mode: Falling Edge
; 0000 00DA     // Interrupt on any change on pins PCINT0-7: Off
; 0000 00DB     // Interrupt on any change on pins PCINT8-14: Off
; 0000 00DC     // Interrupt on any change on pins PCINT16-23: Off
; 0000 00DD     EICRA=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00DE     EIMSK=(1<<INT1) | (1<<INT0);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00DF     EIFR=(1<<INTF1) | (1<<INTF0);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00E0     PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00E1 
; 0000 00E2     // USART initialization
; 0000 00E3     // USART disabled
; 0000 00E4     UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00E5 
; 0000 00E6     // Analog Comparator initialization
; 0000 00E7     // Analog Comparator: Off
; 0000 00E8     // The Analog Comparator's positive input is
; 0000 00E9     // connected to the AIN0 pin
; 0000 00EA     // The Analog Comparator's negative input is
; 0000 00EB     // connected to the AIN1 pin
; 0000 00EC     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00ED     // Digital input buffer on AIN0: On
; 0000 00EE     // Digital input buffer on AIN1: On
; 0000 00EF     DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00F0 
; 0000 00F1     // ADC initialization
; 0000 00F2     // ADC Clock frequency: 1000,000 kHz
; 0000 00F3     // ADC Voltage Reference: AREF pin
; 0000 00F4     // ADC Auto Trigger Source: ADC Stopped
; 0000 00F5     // Digital input buffers on ADC0: Off, ADC1: On, ADC2: Off, ADC3: Off
; 0000 00F6     // ADC4: Off, ADC5: Off
; 0000 00F7     // DIDR0=(1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
; 0000 00F8     // ADMUX=ADC_VREF_TYPE;
; 0000 00F9     // ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
; 0000 00FA     // ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
; 0000 00FB 
; 0000 00FC     // ADC initialization
; 0000 00FD     // ADC Clock frequency: 1000,000 kHz
; 0000 00FE     // ADC Voltage Reference: AREF pin
; 0000 00FF     // ADC Auto Trigger Source: ADC Stopped
; 0000 0100     // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 0101     // ADC4: On, ADC5: On
; 0000 0102     DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0103     ADMUX=ADC_VREF_TYPE;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0104     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0105     ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0106 
; 0000 0107     // SPI initialization
; 0000 0108     // SPI disabled
; 0000 0109     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 010A 
; 0000 010B     // TWI initialization
; 0000 010C     // TWI disabled
; 0000 010D     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 010E 
; 0000 010F     // Global enable interrupts
; 0000 0110     #asm("sei")
;PCODE: $000000AE VOL: 0
	sei
;PCODE: $000000AF VOL: 0
; 0000 0111     Uint_data_led1 = 0;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0112     Uint_data_led2 = 0;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0113     TIMER2_OFF;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0114     ADE7753_INIT();
;PCODE: $000000B6 VOL: 0
; 0000 0115     TIMER2_ON;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0116     delay_ms(200);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0117     TIMER2_OFF;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0118     delay_ms(200);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0119     TIMER2_ON;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 011A     delay_ms(200);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 011B     TIMER2_OFF;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 011C     for(Uc_Loop_count = 0; Uc_Loop_count<10;Uc_Loop_count++)
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 011D     {
; 0000 011E         AI10_Voltage_buff[Uc_Loop_count] = 0;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 011F         AI10_Currrent_buff[Uc_Loop_count] = 0;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0120     }
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0121     Uc_Buff_count = 0;
;PCODE: $000000E1 VOL: 0
; 0000 0122     while (1)
;PCODE: $000000E2 VOL: 0
; 0000 0123     {
; 0000 0124       // Place your code here
; 0000 0125         if(Bit_Zero_flag)
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0126         {
; 0000 0127             /* Ghi nhan gia tri dong dien va dien ap vao buffer */
; 0000 0128             AI10_Voltage_buff[Uc_Buff_count] = (unsigned int)(ADE7753_READ(1,VRMS)/1030);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0129             AI10_Currrent_buff[Uc_Buff_count] = (unsigned int)(ADE7753_READ(1,IRMS)/228);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 012A 
; 0000 012B 
; 0000 012C             ADE7753_WRITE(1,RSTSTATUS,0x00,0x00,0x00);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 012D             /* Tinh ddien ap */
; 0000 012E             for(Uc_Loop_count = 0; Uc_Loop_count<NUM_SAMPLE;Uc_Loop_count++)
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 012F             {
; 0000 0130                 AI10_Temp_buff[Uc_Loop_count] = AI10_Voltage_buff[Uc_Loop_count];
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0131             }
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0132             for(Uc_Loop_count = 0; Uc_Loop_count<NUM_SAMPLE;Uc_Loop_count++)
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0133             {
; 0000 0134                 for(Uc_Loop2_count = Uc_Loop_count; Uc_Loop2_count<NUM_SAMPLE;Uc_Loop2_count++)
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0135                 {
; 0000 0136                     if(AI10_Temp_buff[Uc_Loop_count] > AI10_Temp_buff[Uc_Loop2_count] )
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0137                     {
; 0000 0138                         Ulong_tmp = AI10_Temp_buff[Uc_Loop_count];
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0139                         AI10_Temp_buff[Uc_Loop_count] = AI10_Temp_buff[Uc_Loop2_count];
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 013A                         AI10_Temp_buff[Uc_Loop2_count] = Ulong_tmp;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 013B                     }
; 0000 013C                 }
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 013D             }
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 013E 
; 0000 013F             Ulong_tmp = 0;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0140             for(Uc_Loop_count = NUM_FILTER; Uc_Loop_count<NUM_SAMPLE-NUM_FILTER;Uc_Loop_count++)
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0141             {
; 0000 0142                 Ulong_tmp += AI10_Temp_buff[Uc_Loop_count];
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0143             }
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0144             Ulong_tmp /= (NUM_SAMPLE-2*NUM_FILTER);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0145             if(Uint_Timer_Count == 200) Uint_data_led1 = (unsigned int) Ulong_tmp;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0146 
; 0000 0147 
; 0000 0148             /* Tinh dong dien */
; 0000 0149             for(Uc_Loop_count = 0; Uc_Loop_count<NUM_SAMPLE;Uc_Loop_count++)
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 014A             {
; 0000 014B                 AI10_Temp_buff[Uc_Loop_count] = AI10_Currrent_buff[Uc_Loop_count];
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 014C             }
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 014D             for(Uc_Loop_count = 0; Uc_Loop_count<NUM_SAMPLE;Uc_Loop_count++)
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 014E             {
; 0000 014F                 for(Uc_Loop2_count = Uc_Loop_count; Uc_Loop2_count<NUM_SAMPLE;Uc_Loop2_count++)
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 0150                 {
; 0000 0151                     if(AI10_Temp_buff[Uc_Loop_count] > AI10_Temp_buff[Uc_Loop2_count] )
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0152                     {
; 0000 0153                         Ulong_tmp = AI10_Temp_buff[Uc_Loop_count];
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0154                         AI10_Temp_buff[Uc_Loop_count] = AI10_Temp_buff[Uc_Loop2_count];
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 0155                         AI10_Temp_buff[Uc_Loop2_count] = Ulong_tmp;
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0156                     }
; 0000 0157                 }
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0158             }
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0159 
; 0000 015A             Ulong_tmp = 0;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 015B             for(Uc_Loop_count = NUM_FILTER; Uc_Loop_count<NUM_SAMPLE-NUM_FILTER;Uc_Loop_count++)
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 015C             {
; 0000 015D                 Ulong_tmp += AI10_Temp_buff[Uc_Loop_count];
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 015E             }
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 015F             Ulong_tmp /= (NUM_SAMPLE-2*NUM_FILTER);
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0160 
; 0000 0161             if(Uint_Timer_Count == 200)
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0162             {
; 0000 0163                  Uint_data_led2 = (unsigned int) Ulong_tmp;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0164                  Uint_Timer_Count = 0;
;PCODE: $0000020F VOL: 0
; 0000 0165             }
; 0000 0166 
; 0000 0167 
; 0000 0168             Uc_Buff_count++;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0169             if(Uc_Buff_count >= NUM_SAMPLE)
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 016A             {
; 0000 016B                 Uc_Buff_count = 0;
;PCODE: $00000215 VOL: 0
; 0000 016C             }
; 0000 016D             /*
; 0000 016E             *   Doc Current_Set
; 0000 016F             *   So sanh va dua ra canh bao
; 0000 0170             */
; 0000 0171             Ulong_tmp = read_adc(1);
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0172             Ulong_tmp = Ulong_tmp*(CURRENT_SET_MAX-CURRENT_SET_MIN)*100/1023 + CURRENT_SET_MIN*100;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 0173             //Uint_data_led1 = Ulong_tmp;
; 0000 0174             if(Ulong_tmp < Uint_data_led2)
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0175             {
; 0000 0176                 Bit_warning = 1;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0177             }
; 0000 0178             else    Bit_warning = 0;
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0179             Bit_Zero_flag = 0;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 017A         }
; 0000 017B 
; 0000 017C         if(Bit_warning)
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 017D         {
; 0000 017E             TIMER2_ON;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 017F             delay_ms(100);
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 0180             TIMER2_OFF;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0181             delay_ms(100);
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 0182         }
; 0000 0183 
; 0000 0184     }
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 0185 }
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
