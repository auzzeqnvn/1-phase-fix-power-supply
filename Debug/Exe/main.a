;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : 1 Phase fix power supply
;Version : 1.0
;Date    : 11/19/2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega48
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*******************************************************/
;
;#include <mega48.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $00000009 VOL: 0
	#endif
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;#include <scan_led.h>
;#include <ADE7753.h>
;#include <delay.h>
;
;// Declare your global variables here
;
;
;#define TIMER2_OFF  TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2)
;#define TIMER2_ON   TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (1<<TOIE2)
;
;#define BUZZER  PORTD.5
;#define BUZZER_OFF  BUZZER = 0
;#define BUZZER_ON   BUZZER = 1
;
;#define CURRENT_SET_MIN 7
;#define CURRENT_SET_MAX 20
;
;unsigned int    AI10_Voltage_buff[10];
;unsigned int    AI10_Currrent_buff[10];
;unsigned int    AI10_Temp_buff[10];
;unsigned long   Ulong_tmp;
;unsigned char   Uc_Buff_count = 0;
;unsigned char   Uc_Loop_count;
;unsigned char   Uc_Loop2_count;
;bit Bit_sample_full = 0;
;bit Bit_warning = 0;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0034 {

	.CSEG
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0035 // Place your code here
; 0000 0036 
; 0000 0037 }
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 003B {
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 003C // Place your code here
; 0000 003D 
; 0000 003E }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0042 {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0043     // Reinitialize Timer1 value
; 0000 0044     TCNT1H=0xA000 >> 8;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0045     TCNT1L=0xA000 & 0xff;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0046     // Place your code here
; 0000 0047     SCAN_LED();
;PCODE: $0000001C VOL: 0
; 0000 0048 }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 004D {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 004E // Reinitialize Timer2 value
; 0000 004F     TCNT2=0xD0;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0050     if(BUZZER == 0)   BUZZER_ON;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0051     else    BUZZER_OFF;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0052 // Place your code here
; 0000 0053 
; 0000 0054 }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 005A {
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 005B ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000033 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 005C // Delay needed for the stabilization of the ADC input voltage
; 0000 005D delay_us(10);
;PCODE: $00000037 VOL: 0
; 0000 005E // Start the AD conversion
; 0000 005F ADCSRA|=(1<<ADSC);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0060 // Wait for the AD conversion to complete
; 0000 0061 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0062 ADCSRA|=(1<<ADIF);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0063 return ADCW;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0064 }
;PCODE: $00000047 VOL: 0
;
;void main(void)
; 0000 0067 {
;PCODE: $00000048 VOL: 0
; 0000 0068 // Declare your local variables here
; 0000 0069 
; 0000 006A // Crystal Oscillator division factor: 1
; 0000 006B #pragma optsize-
; 0000 006C CLKPR=(1<<CLKPCE);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 006D CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 006E #ifdef _OPTIMIZE_SIZE_
; 0000 006F #pragma optsize+
; 0000 0070 #endif
; 0000 0071 
; 0000 0072 // Input/Output Ports initialization
; 0000 0073 // Port B initialization
; 0000 0074 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=Out Bit0=In
; 0000 0075 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0076 // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=0 Bit0=T
; 0000 0077 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0078 
; 0000 0079 // Port C initialization
; 0000 007A // Function: Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=Out Bit1=In Bit0=In
; 0000 007B DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (0<<DDC3) | (1<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 007C // State: Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=0 Bit1=T Bit0=T
; 0000 007D PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 007E 
; 0000 007F // Port D initialization
; 0000 0080 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0081 DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0082 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0083 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0084 
; 0000 0085 // Timer/Counter 0 initialization
; 0000 0086 // Clock source: System Clock
; 0000 0087 // Clock value: Timer 0 Stopped
; 0000 0088 // Mode: Normal top=0xFF
; 0000 0089 // OC0A output: Disconnected
; 0000 008A // OC0B output: Disconnected
; 0000 008B TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 008C TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 008D TCNT0=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 008E OCR0A=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 008F OCR0B=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0090 
; 0000 0091 // Timer/Counter 1 initialization
; 0000 0092 // Clock source: System Clock
; 0000 0093 // Clock value: 8000,000 kHz
; 0000 0094 // Mode: Normal top=0xFFFF
; 0000 0095 // OC1A output: Disconnected
; 0000 0096 // OC1B output: Disconnected
; 0000 0097 // Noise Canceler: Off
; 0000 0098 // Input Capture on Falling Edge
; 0000 0099 // Timer Period: 4 ms
; 0000 009A // Timer1 Overflow Interrupt: On
; 0000 009B // Input Capture Interrupt: Off
; 0000 009C // Compare A Match Interrupt: Off
; 0000 009D // Compare B Match Interrupt: Off
; 0000 009E TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 009F TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00A0 TCNT1H=0x83;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00A1 TCNT1L=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00A2 ICR1H=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00A3 ICR1L=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00A4 OCR1AH=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00A5 OCR1AL=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00A6 OCR1BH=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00A7 OCR1BL=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00A8 
; 0000 00A9 // Timer/Counter 2 initialization
; 0000 00AA // Clock source: System Clock
; 0000 00AB // Clock value: Timer2 Stopped
; 0000 00AC // Mode: Normal top=0xFF
; 0000 00AD // OC2A output: Disconnected
; 0000 00AE // OC2B output: Disconnected
; 0000 00AF // ASSR=(0<<EXCLK) | (0<<AS2);
; 0000 00B0 // TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
; 0000 00B1 // TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
; 0000 00B2 // TCNT2=0x00;
; 0000 00B3 // OCR2A=0x00;
; 0000 00B4 // OCR2B=0x00;
; 0000 00B5 
; 0000 00B6 // Timer/Counter 2 initialization
; 0000 00B7 // Clock source: System Clock
; 0000 00B8 // Clock value: 250,000 kHz
; 0000 00B9 // Mode: Normal top=0xFF
; 0000 00BA // OC2A output: Disconnected
; 0000 00BB // OC2B output: Disconnected
; 0000 00BC // Timer Period: 0,5 ms
; 0000 00BD ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00BE TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00BF TCCR2B=(0<<WGM22) | (0<<CS22) | (1<<CS21) | (1<<CS20);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00C0 TCNT2=0x83;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00C1 OCR2A=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00C2 OCR2B=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00C3 
; 0000 00C4 // Timer/Counter 0 Interrupt(s) initialization
; 0000 00C5 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00C6 
; 0000 00C7 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00C8 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00C9 
; 0000 00CA 
; 0000 00CB // Timer/Counter 2 Interrupt(s) initialization
; 0000 00CC // TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
; 0000 00CD TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (1<<TOIE2);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00CE 
; 0000 00CF // External Interrupt(s) initialization
; 0000 00D0 // INT0: On
; 0000 00D1 // INT0 Mode: Falling Edge
; 0000 00D2 // INT1: On
; 0000 00D3 // INT1 Mode: Falling Edge
; 0000 00D4 // Interrupt on any change on pins PCINT0-7: Off
; 0000 00D5 // Interrupt on any change on pins PCINT8-14: Off
; 0000 00D6 // Interrupt on any change on pins PCINT16-23: Off
; 0000 00D7 // EICRA=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
; 0000 00D8 // EIMSK=(1<<INT1) | (1<<INT0);
; 0000 00D9 // EIFR=(1<<INTF1) | (1<<INTF0);
; 0000 00DA // PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
; 0000 00DB 
; 0000 00DC // USART initialization
; 0000 00DD // USART disabled
; 0000 00DE UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00DF 
; 0000 00E0 // Analog Comparator initialization
; 0000 00E1 // Analog Comparator: Off
; 0000 00E2 // The Analog Comparator's positive input is
; 0000 00E3 // connected to the AIN0 pin
; 0000 00E4 // The Analog Comparator's negative input is
; 0000 00E5 // connected to the AIN1 pin
; 0000 00E6 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00E7 // Digital input buffer on AIN0: On
; 0000 00E8 // Digital input buffer on AIN1: On
; 0000 00E9 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00EA 
; 0000 00EB // ADC initialization
; 0000 00EC // ADC Clock frequency: 1000,000 kHz
; 0000 00ED // ADC Voltage Reference: AREF pin
; 0000 00EE // ADC Auto Trigger Source: ADC Stopped
; 0000 00EF // Digital input buffers on ADC0: Off, ADC1: On, ADC2: Off, ADC3: Off
; 0000 00F0 // ADC4: Off, ADC5: Off
; 0000 00F1 // DIDR0=(1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
; 0000 00F2 // ADMUX=ADC_VREF_TYPE;
; 0000 00F3 // ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
; 0000 00F4 // ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
; 0000 00F5 
; 0000 00F6 // ADC initialization
; 0000 00F7 // ADC Clock frequency: 1000,000 kHz
; 0000 00F8 // ADC Voltage Reference: AREF pin
; 0000 00F9 // ADC Auto Trigger Source: ADC Stopped
; 0000 00FA // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 00FB // ADC4: On, ADC5: On
; 0000 00FC DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00FD ADMUX=ADC_VREF_TYPE;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00FE ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00FF ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0100 
; 0000 0101 // SPI initialization
; 0000 0102 // SPI disabled
; 0000 0103 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0104 
; 0000 0105 // TWI initialization
; 0000 0106 // TWI disabled
; 0000 0107 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0108 
; 0000 0109 // Global enable interrupts
; 0000 010A #asm("sei")
;PCODE: $0000009B VOL: 0
	sei
;PCODE: $0000009C VOL: 0
; 0000 010B Uint_data_led1 = 0;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 010C Uint_data_led2 = 0;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 010D 
; 0000 010E TIMER2_ON;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 010F delay_ms(200);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0110 TIMER2_OFF;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0111 delay_ms(200);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0112 TIMER2_ON;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0113 delay_ms(200);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0114 TIMER2_OFF;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0115 for(Uc_Loop_count = 0; Uc_Loop_count<10;Uc_Loop_count++)
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0116 {
; 0000 0117     AI10_Voltage_buff[Uc_Loop_count] = 0;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0118     AI10_Currrent_buff[Uc_Loop_count] = 0;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0119 }
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 011A while (1)
;PCODE: $000000CB VOL: 0
; 0000 011B       {
; 0000 011C       // Place your code here
; 0000 011D         /* Ghi nhan gia tri dong dien va dien ap vao buffer */
; 0000 011E         AI10_Voltage_buff[Uc_Buff_count] = ADE7753_READ(1,VRMS);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 011F         AI10_Currrent_buff[Uc_Buff_count] = ADE7753_READ(1,IRMS);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0120         Uc_Buff_count++;
;PCODE: $000000E8 VOL: 0
; 0000 0121         if(Uc_Buff_count > 9)
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0122         {
; 0000 0123             Uc_Buff_count = 0;
;PCODE: $000000EC VOL: 0
; 0000 0124         }
; 0000 0125 
; 0000 0126         for(Uc_Loop_count = 0; Uc_Loop_count<10;Uc_Loop_count++)
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0127         {
; 0000 0128             AI10_Temp_buff[Uc_Loop_count] = AI10_Voltage_buff[Uc_Loop_count];
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0129         }
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 012A         for(Uc_Loop_count = 0; Uc_Loop_count<10;Uc_Loop_count++)
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 012B         {
; 0000 012C             for(Uc_Loop2_count = Uc_Loop_count; Uc_Loop2_count<10;Uc_Loop2_count++)
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 012D             {
; 0000 012E                 if(AI10_Temp_buff[Uc_Loop_count] > AI10_Temp_buff[Uc_Loop2_count] )
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 012F                 {
; 0000 0130                     Ulong_tmp = AI10_Temp_buff[Uc_Loop_count];
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0131                     AI10_Temp_buff[Uc_Loop_count] = AI10_Temp_buff[Uc_Loop2_count];
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0132                     AI10_Temp_buff[Uc_Loop2_count] = Ulong_tmp;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0133                 }
; 0000 0134             }
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0135         }
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0136 
; 0000 0137         Ulong_tmp = 0;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0138         for(Uc_Loop_count = 2; Uc_Loop_count<8;Uc_Loop_count++)
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0139         {
; 0000 013A             Ulong_tmp += AI10_Temp_buff[Uc_Loop_count];
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 013B         }
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 013C         Ulong_tmp /= 6;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 013D         Uint_data_led1 = (unsigned int) Ulong_tmp;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 013E 
; 0000 013F         // Ulong_tmp = 0;
; 0000 0140         // for(Uc_Loop_count = 0; Uc_Loop_count<10;Uc_Loop_count++)
; 0000 0141         // {
; 0000 0142         //     Ulong_tmp += AI10_Voltage_buff[Uc_Loop_count];
; 0000 0143         // }
; 0000 0144         // Ulong_tmp /= 10;
; 0000 0145         // Uint_data_led1 = (unsigned int) Ulong_tmp;
; 0000 0146 
; 0000 0147         Ulong_tmp = 0;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0148         for(Uc_Loop_count = 0; Uc_Loop_count<10;Uc_Loop_count++)
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0149         {
; 0000 014A             Ulong_tmp += AI10_Currrent_buff[Uc_Loop_count];
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 014B         }
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 014C         Ulong_tmp /= 10;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 014D         Uint_data_led2 = (unsigned int) Ulong_tmp;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 014E 
; 0000 014F         /*
; 0000 0150         *   Doc Current_Set
; 0000 0151         *   So sanh va dua ra canh bao
; 0000 0152         */
; 0000 0153         Ulong_tmp = read_adc(1);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0154         Ulong_tmp = Ulong_tmp*(CURRENT_SET_MAX-CURRENT_SET_MIN)*100/1023 + CURRENT_SET_MIN*100;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0155         //Uint_data_led1 = Ulong_tmp;
; 0000 0156         if(Ulong_tmp < Uint_data_led2)
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0157         {
; 0000 0158             Bit_warning = 1;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0159         }
; 0000 015A         else    Bit_warning = 0;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 015B 
; 0000 015C         if(Bit_warning)
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 015D         {
; 0000 015E             TIMER2_ON;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 015F             delay_ms(100);
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0160             TIMER2_OFF;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0161             delay_ms(100);
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0162         }
; 0000 0163         else    delay_ms(400);
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0164       }
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0165 }
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
