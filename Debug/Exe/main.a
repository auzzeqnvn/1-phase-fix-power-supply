;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : 1 Phase fix power supply
;Version : 1.0
;Date    : 11/19/2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega48
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*******************************************************/
;
;#include <mega48.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $00000009 VOL: 0
	#endif
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;#include <scan_led.h>
;#include <ADE7753.h>
;#include <delay.h>
;
;// Declare your global variables here
;
;#define BUZZER  PORTD.5
;#define BUZZER_OFF  BUZZER = 0
;#define BUZZER_ON   BUZZER = 1
;
;
;unsigned int    AI10_Voltage_buff[10];
;unsigned int    AI10_Currrent_buff[10];
;unsigned long   Ulong_tmp;
;unsigned char   Uc_Buff_count = 0;
;unsigned char   Uc_Loop_count;
;bit Bit_sample_full = 0;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 002B {

	.CSEG
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 002C // Place your code here
; 0000 002D 
; 0000 002E }
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0032 {
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0033 // Place your code here
; 0000 0034 
; 0000 0035 }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0039 {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003A     // Reinitialize Timer1 value
; 0000 003B     TCNT1H=0xA000 >> 8;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 003C     TCNT1L=0xA000 & 0xff;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003D     // Place your code here
; 0000 003E     SCAN_LED();
;PCODE: $0000001C VOL: 0
; 0000 003F }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0046 {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0047 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000022 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0048 // Delay needed for the stabilization of the ADC input voltage
; 0000 0049 delay_us(10);
;PCODE: $00000026 VOL: 0
; 0000 004A // Start the AD conversion
; 0000 004B ADCSRA|=(1<<ADSC);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 004C // Wait for the AD conversion to complete
; 0000 004D while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 004E ADCSRA|=(1<<ADIF);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 004F return ADCW;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0050 }
;PCODE: $00000036 VOL: 0
;
;void main(void)
; 0000 0053 {
;PCODE: $00000037 VOL: 0
; 0000 0054 // Declare your local variables here
; 0000 0055 
; 0000 0056 // Crystal Oscillator division factor: 1
; 0000 0057 #pragma optsize-
; 0000 0058 CLKPR=(1<<CLKPCE);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0059 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 005A #ifdef _OPTIMIZE_SIZE_
; 0000 005B #pragma optsize+
; 0000 005C #endif
; 0000 005D 
; 0000 005E // Input/Output Ports initialization
; 0000 005F // Port B initialization
; 0000 0060 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=Out Bit0=In
; 0000 0061 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0062 // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=0 Bit0=T
; 0000 0063 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0064 
; 0000 0065 // Port C initialization
; 0000 0066 // Function: Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=Out Bit1=In Bit0=In
; 0000 0067 DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (0<<DDC3) | (1<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0068 // State: Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=0 Bit1=T Bit0=T
; 0000 0069 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 006A 
; 0000 006B // Port D initialization
; 0000 006C // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006D DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 006E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0070 
; 0000 0071 // Timer/Counter 0 initialization
; 0000 0072 // Clock source: System Clock
; 0000 0073 // Clock value: Timer 0 Stopped
; 0000 0074 // Mode: Normal top=0xFF
; 0000 0075 // OC0A output: Disconnected
; 0000 0076 // OC0B output: Disconnected
; 0000 0077 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0078 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0079 TCNT0=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 007A OCR0A=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 007B OCR0B=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 007C 
; 0000 007D // Timer/Counter 1 initialization
; 0000 007E // Clock source: System Clock
; 0000 007F // Clock value: 8000,000 kHz
; 0000 0080 // Mode: Normal top=0xFFFF
; 0000 0081 // OC1A output: Disconnected
; 0000 0082 // OC1B output: Disconnected
; 0000 0083 // Noise Canceler: Off
; 0000 0084 // Input Capture on Falling Edge
; 0000 0085 // Timer Period: 4 ms
; 0000 0086 // Timer1 Overflow Interrupt: On
; 0000 0087 // Input Capture Interrupt: Off
; 0000 0088 // Compare A Match Interrupt: Off
; 0000 0089 // Compare B Match Interrupt: Off
; 0000 008A TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 008B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 008C TCNT1H=0x83;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 008D TCNT1L=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 008E ICR1H=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 008F ICR1L=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0090 OCR1AH=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0091 OCR1AL=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0092 OCR1BH=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0093 OCR1BL=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0094 
; 0000 0095 // Timer/Counter 2 initialization
; 0000 0096 // Clock source: System Clock
; 0000 0097 // Clock value: Timer2 Stopped
; 0000 0098 // Mode: Normal top=0xFF
; 0000 0099 // OC2A output: Disconnected
; 0000 009A // OC2B output: Disconnected
; 0000 009B ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 009C TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 009D TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 009E TCNT2=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 009F OCR2A=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00A0 OCR2B=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00A1 
; 0000 00A2 // Timer/Counter 0 Interrupt(s) initialization
; 0000 00A3 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00A4 
; 0000 00A5 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00A6 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00A7 
; 0000 00A8 // Timer/Counter 2 Interrupt(s) initialization
; 0000 00A9 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00AA 
; 0000 00AB // External Interrupt(s) initialization
; 0000 00AC // INT0: On
; 0000 00AD // INT0 Mode: Falling Edge
; 0000 00AE // INT1: On
; 0000 00AF // INT1 Mode: Falling Edge
; 0000 00B0 // Interrupt on any change on pins PCINT0-7: Off
; 0000 00B1 // Interrupt on any change on pins PCINT8-14: Off
; 0000 00B2 // Interrupt on any change on pins PCINT16-23: Off
; 0000 00B3 // EICRA=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
; 0000 00B4 // EIMSK=(1<<INT1) | (1<<INT0);
; 0000 00B5 // EIFR=(1<<INTF1) | (1<<INTF0);
; 0000 00B6 // PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
; 0000 00B7 
; 0000 00B8 // USART initialization
; 0000 00B9 // USART disabled
; 0000 00BA UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00BB 
; 0000 00BC // Analog Comparator initialization
; 0000 00BD // Analog Comparator: Off
; 0000 00BE // The Analog Comparator's positive input is
; 0000 00BF // connected to the AIN0 pin
; 0000 00C0 // The Analog Comparator's negative input is
; 0000 00C1 // connected to the AIN1 pin
; 0000 00C2 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00C3 // Digital input buffer on AIN0: On
; 0000 00C4 // Digital input buffer on AIN1: On
; 0000 00C5 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00C6 
; 0000 00C7 // ADC initialization
; 0000 00C8 // ADC Clock frequency: 1000,000 kHz
; 0000 00C9 // ADC Voltage Reference: AREF pin
; 0000 00CA // ADC Auto Trigger Source: ADC Stopped
; 0000 00CB // Digital input buffers on ADC0: Off, ADC1: On, ADC2: Off, ADC3: Off
; 0000 00CC // ADC4: Off, ADC5: Off
; 0000 00CD // DIDR0=(1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
; 0000 00CE // ADMUX=ADC_VREF_TYPE;
; 0000 00CF // ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
; 0000 00D0 // ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
; 0000 00D1 
; 0000 00D2 // SPI initialization
; 0000 00D3 // SPI disabled
; 0000 00D4 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00D5 
; 0000 00D6 // TWI initialization
; 0000 00D7 // TWI disabled
; 0000 00D8 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00D9 
; 0000 00DA // Global enable interrupts
; 0000 00DB #asm("sei")
;PCODE: $00000082 VOL: 0
	sei
;PCODE: $00000083 VOL: 0
; 0000 00DC Uint_data_led1 = 0;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00DD Uint_data_led2 = 0;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00DE BUZZER_ON;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00DF delay_ms(100);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00E0 BUZZER_OFF;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00E1 while (1)
;PCODE: $0000008F VOL: 0
; 0000 00E2       {
; 0000 00E3       // Place your code here
; 0000 00E4         AI10_Voltage_buff[Uc_Buff_count] = ADE7753_READ(1,VRMS);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00E5         AI10_Currrent_buff[Uc_Buff_count] = ADE7753_READ(1,IRMS);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00E6         Uc_Buff_count++;
;PCODE: $000000AC VOL: 0
; 0000 00E7         if(Uc_Buff_count > 9)
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00E8         {
; 0000 00E9             Uc_Buff_count = 0;
;PCODE: $000000B0 VOL: 0
; 0000 00EA             if(Bit_sample_full == 0)
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00EB             {
; 0000 00EC                 Bit_sample_full = 1;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00ED                 BUZZER_ON;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00EE                 delay_ms(100);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00EF                 BUZZER_OFF;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00F0             }
; 0000 00F1         }
;PCODE: $000000BD VOL: 0
; 0000 00F2         if(Bit_sample_full)
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00F3         {
; 0000 00F4             Ulong_tmp = 0;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00F5             for(Uc_Loop_count = 0; Uc_Loop_count<10;Uc_Loop_count++)
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00F6             {
; 0000 00F7                 Ulong_tmp += AI10_Voltage_buff[Uc_Loop_count];
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00F8             }
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00F9             Ulong_tmp /= 10;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00FA             Uint_data_led1 = (unsigned int) Ulong_tmp;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00FB             Ulong_tmp = 0;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00FC             for(Uc_Loop_count = 0; Uc_Loop_count<10;Uc_Loop_count++)
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00FD             {
; 0000 00FE                 Ulong_tmp += AI10_Currrent_buff[Uc_Loop_count];
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00FF             }
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0100             Ulong_tmp /= 10;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0101             Uint_data_led2 = (unsigned int) Ulong_tmp;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0102         }
; 0000 0103         delay_ms(500);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0104       }
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0105 }
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
