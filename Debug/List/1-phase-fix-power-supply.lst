
AVRASM ver. 2.1.30  D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\1-phase-fix-power-supply\Debug\List\1-phase-fix-power-supply.asm Tue Nov 20 15:36:16 2018

D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\1-phase-fix-power-supply\Debug\List\1-phase-fix-power-supply.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\1-phase-fix-power-supply\Debug\List\1-phase-fix-power-supply.asm(1089): warning: Register r3 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega48
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega48
                 	#pragma AVRPART MEMORY PROG_FLASH 4096
                 	#pragma AVRPART MEMORY EEPROM 256
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x02FF
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uc_Buff_count=R4
                 	.DEF _Uc_Loop_count=R3
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c022      	RJMP __RESET
000001 c04d      	RJMP _ext_int0_isr
000002 c04d      	RJMP _ext_int1_isr
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d c043      	RJMP _timer1_ovf_isr
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
000015 cfea      	RJMP 0x00
000016 cfe9      	RJMP 0x00
000017 cfe8      	RJMP 0x00
000018 cfe7      	RJMP 0x00
000019 cfe6      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\1-phase-fix-power-supply\Debug\List\1-phase-fix-power-supply.asm(1130): warning: .cseg .db misalignment - padding zero byte
00001a 0000      	.DB  0x0
                 
                 _0x40003:
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\1-phase-fix-power-supply\Debug\List\1-phase-fix-power-supply.asm(1133): warning: .cseg .db misalignment - padding zero byte
00001b 0001      	.DB  0x1
                 
                 __GLOBAL_INI_TBL:
00001c 0001      	.DW  0x01
00001d 0004      	.DW  0x04
00001e 0034      	.DW  __REG_VARS*2
                 
00001f 0001      	.DW  0x01
000020 0180      	.DW  _Uc_led_count
000021 0036      	.DW  _0x40003*2
                 
                 _0xFFFFFFFF:
000022 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000023 94f8      	CLI
000024 27ee      	CLR  R30
000025 bbef      	OUT  EECR,R30
000026 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000027 e08d      	LDI  R24,(14-2)+1
000028 e0a2      	LDI  R26,2
000029 27bb      	CLR  R27
                 __CLEAR_REG:
00002a 93ed      	ST   X+,R30
00002b 958a      	DEC  R24
00002c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00002d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00002e e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00002f e0a0      	LDI  R26,LOW(__SRAM_START)
000030 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000031 93ed      	ST   X+,R30
000032 9701      	SBIW R24,1
000033 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000034 e3e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000035 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000036 9185      	LPM  R24,Z+
000037 9195      	LPM  R25,Z+
000038 9700      	SBIW R24,0
000039 f061      	BREQ __GLOBAL_INI_END
00003a 91a5      	LPM  R26,Z+
00003b 91b5      	LPM  R27,Z+
00003c 9005      	LPM  R0,Z+
00003d 9015      	LPM  R1,Z+
00003e 01bf      	MOVW R22,R30
00003f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000040 9005      	LPM  R0,Z+
000041 920d      	ST   X+,R0
000042 9701      	SBIW R24,1
000043 f7e1      	BRNE __GLOBAL_INI_LOOP
000044 01fb      	MOVW R30,R22
000045 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000046 e0e0      	LDI  R30,__GPIOR0_INIT
000047 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000048 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000049 bfed      	OUT  SPL,R30
00004a e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004c e8c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004d e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004e c020      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x180
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 1 Phase fix power supply
                 ;Version : 1.0
                 ;Date    : 11/19/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega48
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 128
                 ;*******************************************************/
                 ;
                 ;#include <mega48.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <scan_led.h>
                 ;#include <ADE7753.h>
                 ;#include <delay.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;#define BUZZER  PORTD.5
                 ;#define BUZZER_OFF  BUZZER = 0
                 ;#define BUZZER_ON   BUZZER = 1
                 ;
                 ;
                 ;unsigned int    AI10_Voltage_buff[10];
                 ;unsigned int    AI10_Currrent_buff[10];
                 ;unsigned long   Ulong_tmp;
                 ;unsigned char   Uc_Buff_count = 0;
                 ;unsigned char   Uc_Loop_count;
                 ;bit Bit_sample_full = 0;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 002B {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
                 ; 0000 002C // Place your code here
                 ; 0000 002D 
                 ; 0000 002E }
00004f 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0032 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
                 ; 0000 0033 // Place your code here
                 ; 0000 0034 
                 ; 0000 0035 }
000050 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0039 {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000051 920a      	ST   -Y,R0
000052 921a      	ST   -Y,R1
000053 92fa      	ST   -Y,R15
000054 936a      	ST   -Y,R22
000055 937a      	ST   -Y,R23
000056 938a      	ST   -Y,R24
000057 939a      	ST   -Y,R25
000058 93aa      	ST   -Y,R26
000059 93ba      	ST   -Y,R27
00005a 93ea      	ST   -Y,R30
00005b 93fa      	ST   -Y,R31
00005c b7ef      	IN   R30,SREG
00005d 93ea      	ST   -Y,R30
                 ; 0000 003A     // Reinitialize Timer1 value
                 ; 0000 003B     TCNT1H=0xA000 >> 8;
00005e eae0      	LDI  R30,LOW(160)
00005f d26c      	RCALL SUBOPT_0x0
                 ; 0000 003C     TCNT1L=0xA000 & 0xff;
                 ; 0000 003D     // Place your code here
                 ; 0000 003E     SCAN_LED();
000060 d1f5      	RCALL _SCAN_LED
                 ; 0000 003F }
000061 91e9      	LD   R30,Y+
000062 bfef      	OUT  SREG,R30
000063 91f9      	LD   R31,Y+
000064 91e9      	LD   R30,Y+
000065 91b9      	LD   R27,Y+
000066 91a9      	LD   R26,Y+
000067 9199      	LD   R25,Y+
000068 9189      	LD   R24,Y+
000069 9179      	LD   R23,Y+
00006a 9169      	LD   R22,Y+
00006b 90f9      	LD   R15,Y+
00006c 9019      	LD   R1,Y+
00006d 9009      	LD   R0,Y+
00006e 9518      	RETI
                 ; .FEND
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0046 {
                 ; 0000 0047 ADMUX=adc_input | ADC_VREF_TYPE;
                 ;	adc_input -> Y+0
                 ; 0000 0048 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0049 delay_us(10);
                 ; 0000 004A // Start the AD conversion
                 ; 0000 004B ADCSRA|=(1<<ADSC);
                 ; 0000 004C // Wait for the AD conversion to complete
                 ; 0000 004D while ((ADCSRA & (1<<ADIF))==0);
                 ; 0000 004E ADCSRA|=(1<<ADIF);
                 ; 0000 004F return ADCW;
                 ; 0000 0050 }
                 ;
                 ;void main(void)
                 ; 0000 0053 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0054 // Declare your local variables here
                 ; 0000 0055 
                 ; 0000 0056 // Crystal Oscillator division factor: 1
                 ; 0000 0057 #pragma optsize-
                 ; 0000 0058 CLKPR=(1<<CLKPCE);
00006f e8e0      	LDI  R30,LOW(128)
000070 93e0 0061 	STS  97,R30
                 ; 0000 0059 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000072 e0e0      	LDI  R30,LOW(0)
000073 93e0 0061 	STS  97,R30
                 ; 0000 005A #ifdef _OPTIMIZE_SIZE_
                 ; 0000 005B #pragma optsize+
                 ; 0000 005C #endif
                 ; 0000 005D 
                 ; 0000 005E // Input/Output Ports initialization
                 ; 0000 005F // Port B initialization
                 ; 0000 0060 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=Out Bit0=In
                 ; 0000 0061 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
000075 e2ea      	LDI  R30,LOW(42)
000076 b9e4      	OUT  0x4,R30
                 ; 0000 0062 // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=0 Bit0=T
                 ; 0000 0063 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000077 e0e0      	LDI  R30,LOW(0)
000078 b9e5      	OUT  0x5,R30
                 ; 0000 0064 
                 ; 0000 0065 // Port C initialization
                 ; 0000 0066 // Function: Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=Out Bit1=In Bit0=In
                 ; 0000 0067 DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (0<<DDC3) | (1<<DDC2) | (0<<DDC1) | (0<<DDC0);
000079 e3e4      	LDI  R30,LOW(52)
00007a b9e7      	OUT  0x7,R30
                 ; 0000 0068 // State: Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=0 Bit1=T Bit0=T
                 ; 0000 0069 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00007b e0e0      	LDI  R30,LOW(0)
00007c b9e8      	OUT  0x8,R30
                 ; 0000 006A 
                 ; 0000 006B // Port D initialization
                 ; 0000 006C // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 006D DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00007d e2e0      	LDI  R30,LOW(32)
00007e b9ea      	OUT  0xA,R30
                 ; 0000 006E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 006F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00007f e0e0      	LDI  R30,LOW(0)
000080 b9eb      	OUT  0xB,R30
                 ; 0000 0070 
                 ; 0000 0071 // Timer/Counter 0 initialization
                 ; 0000 0072 // Clock source: System Clock
                 ; 0000 0073 // Clock value: Timer 0 Stopped
                 ; 0000 0074 // Mode: Normal top=0xFF
                 ; 0000 0075 // OC0A output: Disconnected
                 ; 0000 0076 // OC0B output: Disconnected
                 ; 0000 0077 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
000081 bde4      	OUT  0x24,R30
                 ; 0000 0078 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000082 bde5      	OUT  0x25,R30
                 ; 0000 0079 TCNT0=0x00;
000083 bde6      	OUT  0x26,R30
                 ; 0000 007A OCR0A=0x00;
000084 bde7      	OUT  0x27,R30
                 ; 0000 007B OCR0B=0x00;
000085 bde8      	OUT  0x28,R30
                 ; 0000 007C 
                 ; 0000 007D // Timer/Counter 1 initialization
                 ; 0000 007E // Clock source: System Clock
                 ; 0000 007F // Clock value: 8000,000 kHz
                 ; 0000 0080 // Mode: Normal top=0xFFFF
                 ; 0000 0081 // OC1A output: Disconnected
                 ; 0000 0082 // OC1B output: Disconnected
                 ; 0000 0083 // Noise Canceler: Off
                 ; 0000 0084 // Input Capture on Falling Edge
                 ; 0000 0085 // Timer Period: 4 ms
                 ; 0000 0086 // Timer1 Overflow Interrupt: On
                 ; 0000 0087 // Input Capture Interrupt: Off
                 ; 0000 0088 // Compare A Match Interrupt: Off
                 ; 0000 0089 // Compare B Match Interrupt: Off
                 ; 0000 008A TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000086 93e0 0080 	STS  128,R30
                 ; 0000 008B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
000088 e0e1      	LDI  R30,LOW(1)
000089 93e0 0081 	STS  129,R30
                 ; 0000 008C TCNT1H=0x83;
00008b e8e3      	LDI  R30,LOW(131)
00008c d23f      	RCALL SUBOPT_0x0
                 ; 0000 008D TCNT1L=0x00;
                 ; 0000 008E ICR1H=0x00;
00008d e0e0      	LDI  R30,LOW(0)
00008e 93e0 0087 	STS  135,R30
                 ; 0000 008F ICR1L=0x00;
000090 93e0 0086 	STS  134,R30
                 ; 0000 0090 OCR1AH=0x00;
000092 93e0 0089 	STS  137,R30
                 ; 0000 0091 OCR1AL=0x00;
000094 93e0 0088 	STS  136,R30
                 ; 0000 0092 OCR1BH=0x00;
000096 93e0 008b 	STS  139,R30
                 ; 0000 0093 OCR1BL=0x00;
000098 93e0 008a 	STS  138,R30
                 ; 0000 0094 
                 ; 0000 0095 // Timer/Counter 2 initialization
                 ; 0000 0096 // Clock source: System Clock
                 ; 0000 0097 // Clock value: Timer2 Stopped
                 ; 0000 0098 // Mode: Normal top=0xFF
                 ; 0000 0099 // OC2A output: Disconnected
                 ; 0000 009A // OC2B output: Disconnected
                 ; 0000 009B ASSR=(0<<EXCLK) | (0<<AS2);
00009a 93e0 00b6 	STS  182,R30
                 ; 0000 009C TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
00009c 93e0 00b0 	STS  176,R30
                 ; 0000 009D TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00009e 93e0 00b1 	STS  177,R30
                 ; 0000 009E TCNT2=0x00;
0000a0 93e0 00b2 	STS  178,R30
                 ; 0000 009F OCR2A=0x00;
0000a2 93e0 00b3 	STS  179,R30
                 ; 0000 00A0 OCR2B=0x00;
0000a4 93e0 00b4 	STS  180,R30
                 ; 0000 00A1 
                 ; 0000 00A2 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 00A3 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
0000a6 93e0 006e 	STS  110,R30
                 ; 0000 00A4 
                 ; 0000 00A5 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 00A6 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
0000a8 e0e1      	LDI  R30,LOW(1)
0000a9 93e0 006f 	STS  111,R30
                 ; 0000 00A7 
                 ; 0000 00A8 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 00A9 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
0000ab e0e0      	LDI  R30,LOW(0)
0000ac 93e0 0070 	STS  112,R30
                 ; 0000 00AA 
                 ; 0000 00AB // External Interrupt(s) initialization
                 ; 0000 00AC // INT0: On
                 ; 0000 00AD // INT0 Mode: Falling Edge
                 ; 0000 00AE // INT1: On
                 ; 0000 00AF // INT1 Mode: Falling Edge
                 ; 0000 00B0 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 00B1 // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 00B2 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 00B3 // EICRA=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
                 ; 0000 00B4 // EIMSK=(1<<INT1) | (1<<INT0);
                 ; 0000 00B5 // EIFR=(1<<INTF1) | (1<<INTF0);
                 ; 0000 00B6 // PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
                 ; 0000 00B7 
                 ; 0000 00B8 // USART initialization
                 ; 0000 00B9 // USART disabled
                 ; 0000 00BA UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0000ae 93e0 00c1 	STS  193,R30
                 ; 0000 00BB 
                 ; 0000 00BC // Analog Comparator initialization
                 ; 0000 00BD // Analog Comparator: Off
                 ; 0000 00BE // The Analog Comparator's positive input is
                 ; 0000 00BF // connected to the AIN0 pin
                 ; 0000 00C0 // The Analog Comparator's negative input is
                 ; 0000 00C1 // connected to the AIN1 pin
                 ; 0000 00C2 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000b0 e8e0      	LDI  R30,LOW(128)
0000b1 bfe0      	OUT  0x30,R30
                 ; 0000 00C3 // Digital input buffer on AIN0: On
                 ; 0000 00C4 // Digital input buffer on AIN1: On
                 ; 0000 00C5 DIDR1=(0<<AIN0D) | (0<<AIN1D);
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 93e0 007f 	STS  127,R30
                 ; 0000 00C6 
                 ; 0000 00C7 // ADC initialization
                 ; 0000 00C8 // ADC Clock frequency: 1000,000 kHz
                 ; 0000 00C9 // ADC Voltage Reference: AREF pin
                 ; 0000 00CA // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00CB // Digital input buffers on ADC0: Off, ADC1: On, ADC2: Off, ADC3: Off
                 ; 0000 00CC // ADC4: Off, ADC5: Off
                 ; 0000 00CD // DIDR0=(1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
                 ; 0000 00CE // ADMUX=ADC_VREF_TYPE;
                 ; 0000 00CF // ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
                 ; 0000 00D0 // ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
                 ; 0000 00D1 
                 ; 0000 00D2 // SPI initialization
                 ; 0000 00D3 // SPI disabled
                 ; 0000 00D4 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000b5 bdec      	OUT  0x2C,R30
                 ; 0000 00D5 
                 ; 0000 00D6 // TWI initialization
                 ; 0000 00D7 // TWI disabled
                 ; 0000 00D8 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000b6 93e0 00bc 	STS  188,R30
                 ; 0000 00D9 
                 ; 0000 00DA // Global enable interrupts
                 ; 0000 00DB #asm("sei")
0000b8 9478      	sei
                 ; 0000 00DC Uint_data_led1 = 0;
0000b9 e0e0      	LDI  R30,LOW(0)
0000ba 93e0 0182 	STS  _Uint_data_led1,R30
0000bc 93e0 0183 	STS  _Uint_data_led1+1,R30
                 ; 0000 00DD Uint_data_led2 = 0;
0000be 93e0 0184 	STS  _Uint_data_led2,R30
0000c0 93e0 0185 	STS  _Uint_data_led2+1,R30
                 ; 0000 00DE BUZZER_ON;
0000c2 d20f      	RCALL SUBOPT_0x1
                 ; 0000 00DF delay_ms(100);
                 ; 0000 00E0 BUZZER_OFF;
                 ; 0000 00E1 while (1)
                 _0xA:
                 ; 0000 00E2       {
                 ; 0000 00E3       // Place your code here
                 ; 0000 00E4         AI10_Voltage_buff[Uc_Buff_count] = ADE7753_READ(1,VRMS);
0000c3 2de4      	MOV  R30,R4
0000c4 d213      	RCALL SUBOPT_0x2
0000c5 0fea      	ADD  R30,R26
0000c6 1ffb      	ADC  R31,R27
0000c7 93ff      	PUSH R31
0000c8 93ef      	PUSH R30
0000c9 e0e1      	LDI  R30,LOW(1)
0000ca 93ea      	ST   -Y,R30
0000cb e1e7      	LDI  R30,LOW(23)
0000cc 93ea      	ST   -Y,R30
0000cd e0a3      	LDI  R26,LOW(3)
0000ce d064      	RCALL _ADE7753_READ
0000cf 91af      	POP  R26
0000d0 91bf      	POP  R27
0000d1 93ed      	ST   X+,R30
0000d2 93fc      	ST   X,R31
                 ; 0000 00E5         AI10_Currrent_buff[Uc_Buff_count] = ADE7753_READ(1,IRMS);
0000d3 2de4      	MOV  R30,R4
0000d4 d209      	RCALL SUBOPT_0x3
0000d5 0fea      	ADD  R30,R26
0000d6 1ffb      	ADC  R31,R27
0000d7 93ff      	PUSH R31
0000d8 93ef      	PUSH R30
0000d9 e0e1      	LDI  R30,LOW(1)
0000da 93ea      	ST   -Y,R30
0000db e1e6      	LDI  R30,LOW(22)
0000dc 93ea      	ST   -Y,R30
0000dd e0a3      	LDI  R26,LOW(3)
0000de d054      	RCALL _ADE7753_READ
0000df 91af      	POP  R26
0000e0 91bf      	POP  R27
0000e1 93ed      	ST   X+,R30
0000e2 93fc      	ST   X,R31
                 ; 0000 00E6         Uc_Buff_count++;
0000e3 9443      	INC  R4
                 ; 0000 00E7         if(Uc_Buff_count > 9)
0000e4 e0e9      	LDI  R30,LOW(9)
0000e5 15e4      	CP   R30,R4
0000e6 f428      	BRSH _0xD
                 ; 0000 00E8         {
                 ; 0000 00E9             Uc_Buff_count = 0;
0000e7 2444      	CLR  R4
                 ; 0000 00EA             if(Bit_sample_full == 0)
0000e8 99f0      	SBIC 0x1E,0
0000e9 c002      	RJMP _0xE
                 ; 0000 00EB             {
                 ; 0000 00EC                 Bit_sample_full = 1;
0000ea 9af0      	SBI  0x1E,0
                 ; 0000 00ED                 BUZZER_ON;
0000eb d1e6      	RCALL SUBOPT_0x1
                 ; 0000 00EE                 delay_ms(100);
                 ; 0000 00EF                 BUZZER_OFF;
                 ; 0000 00F0             }
                 ; 0000 00F1         }
                 _0xE:
                 ; 0000 00F2         if(Bit_sample_full)
                 _0xD:
0000ec 9bf0      	SBIS 0x1E,0
0000ed c01c      	RJMP _0x15
                 ; 0000 00F3         {
                 ; 0000 00F4             Ulong_tmp = 0;
0000ee d1f5      	RCALL SUBOPT_0x4
                 ; 0000 00F5             for(Uc_Loop_count = 0; Uc_Loop_count<10;Uc_Loop_count++)
                 _0x17:
0000ef e0ea      	LDI  R30,LOW(10)
0000f0 163e      	CP   R3,R30
0000f1 f428      	BRSH _0x18
                 ; 0000 00F6             {
                 ; 0000 00F7                 Ulong_tmp += AI10_Voltage_buff[Uc_Loop_count];
0000f2 2de3      	MOV  R30,R3
0000f3 d1e4      	RCALL SUBOPT_0x2
0000f4 d1fa      	RCALL SUBOPT_0x5
                 ; 0000 00F8             }
0000f5 9433      	INC  R3
0000f6 cff8      	RJMP _0x17
                 _0x18:
                 ; 0000 00F9             Ulong_tmp /= 10;
0000f7 d20e      	RCALL SUBOPT_0x6
                 ; 0000 00FA             Uint_data_led1 = (unsigned int) Ulong_tmp;
0000f8 93e0 0182 	STS  _Uint_data_led1,R30
0000fa 93f0 0183 	STS  _Uint_data_led1+1,R31
                 ; 0000 00FB             Ulong_tmp = 0;
0000fc d1e7      	RCALL SUBOPT_0x4
                 ; 0000 00FC             for(Uc_Loop_count = 0; Uc_Loop_count<10;Uc_Loop_count++)
                 _0x1A:
0000fd e0ea      	LDI  R30,LOW(10)
0000fe 163e      	CP   R3,R30
0000ff f428      	BRSH _0x1B
                 ; 0000 00FD             {
                 ; 0000 00FE                 Ulong_tmp += AI10_Currrent_buff[Uc_Loop_count];
000100 2de3      	MOV  R30,R3
000101 d1dc      	RCALL SUBOPT_0x3
000102 d1ec      	RCALL SUBOPT_0x5
                 ; 0000 00FF             }
000103 9433      	INC  R3
000104 cff8      	RJMP _0x1A
                 _0x1B:
                 ; 0000 0100             Ulong_tmp /= 10;
000105 d200      	RCALL SUBOPT_0x6
                 ; 0000 0101             Uint_data_led2 = (unsigned int) Ulong_tmp;
000106 93e0 0184 	STS  _Uint_data_led2,R30
000108 93f0 0185 	STS  _Uint_data_led2+1,R31
                 ; 0000 0102         }
                 ; 0000 0103         delay_ms(500);
                 _0x15:
00010a efa4      	LDI  R26,LOW(500)
00010b e0b1      	LDI  R27,HIGH(500)
00010c d266      	RCALL _delay_ms
                 ; 0000 0104       }
00010d cfb5      	RJMP _0xA
                 ; 0000 0105 }
                 _0x1C:
00010e cfff      	RJMP _0x1C
                 ; .FEND
                 ;#include "ADE7753.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "delay.h"
                 ;#include "scan_led.h"
                 ;
                 ;
                 ;void    SPI_7753_SEND(unsigned char data)
                 ; 0001 0007 {
                 
                 	.CSEG
                 _SPI_7753_SEND:
                 ; .FSTART _SPI_7753_SEND
                 ; 0001 0008     unsigned char   cnt;
                 ; 0001 0009     unsigned char   tmp = data;
                 ; 0001 000A 
                 ; 0001 000B     for(cnt = 0;cnt < 8; cnt++)
00010f 93aa      	ST   -Y,R26
000110 d2c3      	RCALL __SAVELOCR2
                 ;	data -> Y+2
                 ;	cnt -> R17
                 ;	tmp -> R16
000111 810a      	LDD  R16,Y+2
000112 e010      	LDI  R17,LOW(0)
                 _0x20004:
000113 3018      	CPI  R17,8
000114 f460      	BRSH _0x20005
                 ; 0001 000C     {
                 ; 0001 000D         if((tmp & 0x80) == 0x80)   SPI_MOSI_HIGHT;
000115 2fe0      	MOV  R30,R16
000116 78e0      	ANDI R30,LOW(0x80)
000117 38e0      	CPI  R30,LOW(0x80)
000118 f411      	BRNE _0x20006
000119 9a42      	SBI  0x8,2
                 ; 0001 000E         else SPI_MOSI_LOW;
00011a c001      	RJMP _0x20009
                 _0x20006:
00011b 9842      	CBI  0x8,2
                 ; 0001 000F 
                 ; 0001 0010         SPI_SCK_HIGHT;
                 _0x20009:
00011c d203      	RCALL SUBOPT_0x7
                 ; 0001 0011         delay_us(50);
                 ; 0001 0012         SPI_SCK_LOW;
00011d d207      	RCALL SUBOPT_0x8
                 ; 0001 0013         delay_us(50);
                 ; 0001 0014         tmp <<= 1;
00011e 0f00      	LSL  R16
                 ; 0001 0015     }
00011f 5f1f      	SUBI R17,-1
000120 cff2      	RJMP _0x20004
                 _0x20005:
                 ; 0001 0016 }
000121 d2b7      	RCALL __LOADLOCR2
000122 c1a7      	RJMP _0x2000001
                 ; .FEND
                 ;
                 ;unsigned char    SPI_7753_RECEIVE(void)
                 ; 0001 0019 {
                 _SPI_7753_RECEIVE:
                 ; .FSTART _SPI_7753_RECEIVE
                 ; 0001 001A     unsigned char cnt;
                 ; 0001 001B     unsigned char data;
                 ; 0001 001C     data = 0;
000123 d2b0      	RCALL __SAVELOCR2
                 ;	cnt -> R17
                 ;	data -> R16
000124 e000      	LDI  R16,LOW(0)
                 ; 0001 001D     for(cnt = 0;cnt < 8; cnt++)
000125 e010      	LDI  R17,LOW(0)
                 _0x20011:
000126 3018      	CPI  R17,8
000127 f438      	BRSH _0x20012
                 ; 0001 001E     {
                 ; 0001 001F         SPI_SCK_HIGHT;
000128 d1f7      	RCALL SUBOPT_0x7
                 ; 0001 0020         delay_us(50);
                 ; 0001 0021         if(SPI_MISO_HIGHT)
000129 9933      	SBIC 0x6,3
                 ; 0001 0022         {
                 ; 0001 0023             data += 1;
00012a 5f0f      	SUBI R16,-LOW(1)
                 ; 0001 0024         }
                 ; 0001 0025         data <<= 1;
00012b 0f00      	LSL  R16
                 ; 0001 0026         SPI_SCK_LOW;
00012c d1f8      	RCALL SUBOPT_0x8
                 ; 0001 0027         delay_us(50);
                 ; 0001 0028     }
00012d 5f1f      	SUBI R17,-1
00012e cff7      	RJMP _0x20011
                 _0x20012:
                 ; 0001 0029     return data;
00012f 2fe0      	MOV  R30,R16
000130 9109      	LD   R16,Y+
000131 9119      	LD   R17,Y+
000132 9508      	RET
                 ; 0001 002A }
                 ; .FEND
                 ;
                 ;void    ADE7753_WRITE(unsigned char IC_CS,unsigned char addr,unsigned char num_data,unsigned char data_1,unsigned char d ...
                 ; 0001 002D {
                 ; 0001 002E     unsigned char data[4];
                 ; 0001 002F     unsigned char   i;
                 ; 0001 0030     data[0] = data_1;
                 ;	IC_CS -> Y+10
                 ;	addr -> Y+9
                 ;	num_data -> Y+8
                 ;	data_1 -> Y+7
                 ;	data_2 -> Y+6
                 ;	data_3 -> Y+5
                 ;	data -> Y+1
                 ;	i -> R17
                 ; 0001 0031     data[1] = data_2;
                 ; 0001 0032     data[2] = data_3;
                 ; 0001 0033 
                 ; 0001 0034     switch (IC_CS)
                 ; 0001 0035     {
                 ; 0001 0036         case 1:
                 ; 0001 0037         {
                 ; 0001 0038             PHASE_1_ON;
                 ; 0001 0039             PHASE_2_OFF;
                 ; 0001 003A             PHASE_3_OFF;
                 ; 0001 003B             break;
                 ; 0001 003C         }
                 ; 0001 003D         case 2:
                 ; 0001 003E         {
                 ; 0001 003F             PHASE_1_OFF;
                 ; 0001 0040             PHASE_2_ON;
                 ; 0001 0041             PHASE_3_OFF;
                 ; 0001 0042             break;
                 ; 0001 0043         }
                 ; 0001 0044         case 3:
                 ; 0001 0045         {
                 ; 0001 0046             PHASE_1_OFF;
                 ; 0001 0047             PHASE_2_OFF;
                 ; 0001 0048             PHASE_3_ON;
                 ; 0001 0049             break;
                 ; 0001 004A         }
                 ; 0001 004B     }
                 ; 0001 004C     addr &= 0x3F;
                 ; 0001 004D     addr |= 0x80;
                 ; 0001 004E     delay_us(100);
                 ; 0001 004F     SPI_7753_SEND(addr);
                 ; 0001 0050     delay_us(100);
                 ; 0001 0051     for(i=0;i<num_data;i++)    SPI_7753_SEND(data[i]);
                 ; 0001 0052 delay_us(100);
                 ; 0001 0053     PHASE_1_OFF;
                 ; 0001 0054     PHASE_2_OFF;
                 ; 0001 0055     PHASE_3_OFF;
                 ; 0001 0056 }
                 ;unsigned int    ADE7753_READ(unsigned char IC_CS,unsigned char addr,unsigned char num_data)
                 ; 0001 0058 {
                 _ADE7753_READ:
                 ; .FSTART _ADE7753_READ
                 ; 0001 0059     unsigned char   i;
                 ; 0001 005A     unsigned char   data[4];
                 ; 0001 005B     unsigned long int res;
                 ; 0001 005C     for(i=0;i<4;i++)    data[i] = 0;
000133 93aa      	ST   -Y,R26
000134 9728      	SBIW R28,8
000135 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+11
                 ;	addr -> Y+10
                 ;	num_data -> Y+9
                 ;	i -> R17
                 ;	data -> Y+5
                 ;	res -> Y+1
000136 e010      	LDI  R17,LOW(0)
                 _0x2003A:
000137 3014      	CPI  R17,4
000138 f430      	BRSH _0x2003B
000139 d1f0      	RCALL SUBOPT_0x9
00013a d1f4      	RCALL SUBOPT_0xA
00013b e0e0      	LDI  R30,LOW(0)
00013c 93ec      	ST   X,R30
00013d 5f1f      	SUBI R17,-1
00013e cff8      	RJMP _0x2003A
                 _0x2003B:
                 ; 0001 005D switch (IC_CS)
00013f 85eb      	LDD  R30,Y+11
000140 d1f1      	RCALL SUBOPT_0xB
                 ; 0001 005E     {
                 ; 0001 005F         case 1:
000141 f421      	BRNE _0x2003F
                 ; 0001 0060         {
                 ; 0001 0061             PHASE_1_ON;
000142 9845      	CBI  0x8,5
                 ; 0001 0062             PHASE_2_OFF;
000143 9a28      	SBI  0x5,0
                 ; 0001 0063             PHASE_3_OFF;
000144 9a28      	SBI  0x5,0
                 ; 0001 0064             break;
000145 c00b      	RJMP _0x2003E
                 ; 0001 0065         }
                 ; 0001 0066         case 2:
                 _0x2003F:
000146 d1f0      	RCALL SUBOPT_0xC
000147 f421      	BRNE _0x20046
                 ; 0001 0067         {
                 ; 0001 0068             PHASE_1_OFF;
000148 9a45      	SBI  0x8,5
                 ; 0001 0069             PHASE_2_ON;
000149 9828      	CBI  0x5,0
                 ; 0001 006A             PHASE_3_OFF;
00014a 9a28      	SBI  0x5,0
                 ; 0001 006B             break;
00014b c005      	RJMP _0x2003E
                 ; 0001 006C         }
                 ; 0001 006D         case 3:
                 _0x20046:
00014c d1ee      	RCALL SUBOPT_0xD
00014d f419      	BRNE _0x2003E
                 ; 0001 006E         {
                 ; 0001 006F             PHASE_1_OFF;
00014e 9a45      	SBI  0x8,5
                 ; 0001 0070             PHASE_2_OFF;
00014f 9a28      	SBI  0x5,0
                 ; 0001 0071             PHASE_3_ON;
000150 9828      	CBI  0x5,0
                 ; 0001 0072             break;
                 ; 0001 0073         }
                 ; 0001 0074     }
                 _0x2003E:
                 ; 0001 0075     delay_us(100);
000151 d1ed      	RCALL SUBOPT_0xE
                 ; 0001 0076     addr &= 0x3F;
000152 85ea      	LDD  R30,Y+10
000153 73ef      	ANDI R30,LOW(0x3F)
000154 87ea      	STD  Y+10,R30
                 ; 0001 0077     SPI_7753_SEND(addr);
000155 85aa      	LDD  R26,Y+10
000156 dfb8      	RCALL _SPI_7753_SEND
                 ; 0001 0078     delay_us(100);
000157 d1e7      	RCALL SUBOPT_0xE
                 ; 0001 0079     for(i=0;i<num_data;i++) data[i] = SPI_7753_RECEIVE();
000158 e010      	LDI  R17,LOW(0)
                 _0x20055:
000159 85e9      	LDD  R30,Y+9
00015a 171e      	CP   R17,R30
00015b f458      	BRSH _0x20056
00015c d1cd      	RCALL SUBOPT_0x9
00015d 0fea      	ADD  R30,R26
00015e 1ffb      	ADC  R31,R27
00015f 93ff      	PUSH R31
000160 93ef      	PUSH R30
000161 dfc1      	RCALL _SPI_7753_RECEIVE
000162 91af      	POP  R26
000163 91bf      	POP  R27
000164 93ec      	ST   X,R30
000165 5f1f      	SUBI R17,-1
000166 cff2      	RJMP _0x20055
                 _0x20056:
                 ; 0001 007A delay_us(100);
000167 d1d7      	RCALL SUBOPT_0xE
                 ; 0001 007B     PHASE_1_OFF;
000168 9a45      	SBI  0x8,5
                 ; 0001 007C     PHASE_2_OFF;
000169 9a28      	SBI  0x5,0
                 ; 0001 007D     PHASE_3_OFF;
00016a 9a28      	SBI  0x5,0
                 ; 0001 007E     res = 0;
00016b e0e0      	LDI  R30,LOW(0)
                +
00016c 83e9     +STD Y + 1 , R30
00016d 83ea     +STD Y + 1 + 1 , R30
00016e 83eb     +STD Y + 1 + 2 , R30
00016f 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
                 ; 0001 007F     for(i=0;i<num_data;i++)
000170 e010      	LDI  R17,LOW(0)
                 _0x2005E:
000171 85e9      	LDD  R30,Y+9
000172 171e      	CP   R17,R30
000173 f470      	BRSH _0x2005F
                 ; 0001 0080     {
                 ; 0001 0081         res <<= 8;
000174 d1cf      	RCALL SUBOPT_0xF
000175 e0e8      	LDI  R30,LOW(8)
000176 d20b      	RCALL __LSLD12
000177 d1d1      	RCALL SUBOPT_0x10
                 ; 0001 0082         res += data[i];
000178 d1b1      	RCALL SUBOPT_0x9
000179 d1b5      	RCALL SUBOPT_0xA
00017a 91ec      	LD   R30,X
00017b e0f0      	LDI  R31,0
00017c d1c7      	RCALL SUBOPT_0xF
00017d d210      	RCALL __CWD1
00017e d1fe      	RCALL __ADDD12
00017f d1c9      	RCALL SUBOPT_0x10
                 ; 0001 0083     }
000180 5f1f      	SUBI R17,-1
000181 cfef      	RJMP _0x2005E
                 _0x2005F:
                 ; 0001 0084     if(addr == 0x16)    return  (res/3600);
000182 85aa      	LDD  R26,Y+10
000183 31a6      	CPI  R26,LOW(0x16)
000184 f439      	BRNE _0x20060
000185 d1be      	RCALL SUBOPT_0xF
                +
000186 e1e0     +LDI R30 , LOW ( 0xE10 )
000187 e0fe     +LDI R31 , HIGH ( 0xE10 )
000188 e060     +LDI R22 , BYTE3 ( 0xE10 )
000189 e070     +LDI R23 , BYTE4 ( 0xE10 )
                 	__GETD1N 0xE10
00018a d21b      	RCALL __DIVD21U
00018b c009      	RJMP _0x2000002
                 ; 0001 0085     if(addr == 0x17)    return  (res/2800);
                 _0x20060:
00018c 85aa      	LDD  R26,Y+10
00018d 31a7      	CPI  R26,LOW(0x17)
00018e f431      	BRNE _0x20061
00018f d1b4      	RCALL SUBOPT_0xF
                +
000190 efe0     +LDI R30 , LOW ( 0xAF0 )
000191 e0fa     +LDI R31 , HIGH ( 0xAF0 )
000192 e060     +LDI R22 , BYTE3 ( 0xAF0 )
000193 e070     +LDI R23 , BYTE4 ( 0xAF0 )
                 	__GETD1N 0xAF0
000194 d211      	RCALL __DIVD21U
                 ; 0001 0086     //return (data[2] + data[1] + data[0]);
                 ; 0001 0087 }
                 _0x20061:
                 _0x2000002:
000195 8118      	LDD  R17,Y+0
000196 962c      	ADIW R28,12
000197 9508      	RET
                 ; .FEND
                 ;
                 ;void    ADE7753_INIT(void)
                 ; 0001 008A {
                 ; 0001 008B     ADE7753_WRITE(1,MODE,0x00,0x00,0x00);
                 ; 0001 008C     //ADE7753_WRITE(1,SAGLVL,0X2a,0X00,0X00);
                 ; 0001 008D     //ADE7753_WRITE(1,SAGCYC,0XFF,0X00,0X00);
                 ; 0001 008E }
                 ;#include "scan_led.h"
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;unsigned char   Uc_led_count = 1;
                 
                 	.DSEG
                 ;unsigned char   Uc_led_data = 0;
                 ;unsigned int    Uint_data_led1 = 0;
                 ;unsigned int    Uint_data_led2 = 0;
                 ;unsigned int    Uint_data_led3 = 0;
                 ;
                 ;/* Day du lieu quet led qua duong spi_software
                 ;Co thẻ day tu 1 den 3 byte du lieu.
                 ;Du lieu sau khi day ra day du moi tien hanh xuat du lieu
                 ;num_bytes : so byte duoc day ra
                 ;data_first : du lieu dau tien
                 ;data_second: du lieu thu 2
                 ;data_third ; du lieu thu 3
                 ;*/
                 ;void    SEND_DATA_LED(unsigned char num_bytes,unsigned char  byte_first,unsigned char  byte_second,unsigned char  byte_t ...
                 ; 0002 0013 {
                 
                 	.CSEG
                 _SEND_DATA_LED:
                 ; .FSTART _SEND_DATA_LED
                 ; 0002 0014     unsigned char   i;
                 ; 0002 0015     unsigned char   data[4];
                 ; 0002 0016     for(i=0;i<4;i++)    data[i] = 0;
000198 93aa      	ST   -Y,R26
000199 9724      	SBIW R28,4
00019a 931a      	ST   -Y,R17
                 ;	num_bytes -> Y+8
                 ;	byte_first -> Y+7
                 ;	byte_second -> Y+6
                 ;	byte_third -> Y+5
                 ;	i -> R17
                 ;	data -> Y+1
00019b e010      	LDI  R17,LOW(0)
                 _0x40005:
00019c 3014      	CPI  R17,4
00019d f428      	BRSH _0x40006
00019e d1af      	RCALL SUBOPT_0x11
00019f e0e0      	LDI  R30,LOW(0)
0001a0 93ec      	ST   X,R30
0001a1 5f1f      	SUBI R17,-1
0001a2 cff9      	RJMP _0x40005
                 _0x40006:
                 ; 0002 0017 data[0] = byte_first;
0001a3 81ef      	LDD  R30,Y+7
0001a4 83e9      	STD  Y+1,R30
                 ; 0002 0018     data[1] = byte_second;
0001a5 81ee      	LDD  R30,Y+6
0001a6 83ea      	STD  Y+2,R30
                 ; 0002 0019     data[2] = byte_third;
0001a7 81ed      	LDD  R30,Y+5
0001a8 83eb      	STD  Y+3,R30
                 ; 0002 001A 
                 ; 0002 001B     for(i=0;i<(num_bytes - 1);i++)    SPI_SENDBYTE(data[i],0);
0001a9 e010      	LDI  R17,LOW(0)
                 _0x40008:
0001aa 85e8      	LDD  R30,Y+8
0001ab e0f0      	LDI  R31,0
0001ac 9731      	SBIW R30,1
0001ad 2fa1      	MOV  R26,R17
0001ae e0b0      	LDI  R27,0
0001af 17ae      	CP   R26,R30
0001b0 07bf      	CPC  R27,R31
0001b1 f43c      	BRGE _0x40009
0001b2 d19b      	RCALL SUBOPT_0x11
0001b3 91ec      	LD   R30,X
0001b4 93ea      	ST   -Y,R30
0001b5 e0a0      	LDI  R26,LOW(0)
0001b6 d0fa      	RCALL _SPI_SENDBYTE
0001b7 5f1f      	SUBI R17,-1
0001b8 cff1      	RJMP _0x40008
                 _0x40009:
                 ; 0002 001C SPI_SENDBYTE(data[i],1);
0001b9 d194      	RCALL SUBOPT_0x11
0001ba 91ec      	LD   R30,X
0001bb 93ea      	ST   -Y,R30
0001bc e0a1      	LDI  R26,LOW(1)
0001bd d0f3      	RCALL _SPI_SENDBYTE
                 ; 0002 001D }
0001be 8118      	LDD  R17,Y+0
0001bf 9629      	ADIW R28,9
0001c0 9508      	RET
                 ; .FEND
                 ;
                 ;void    SELECT_LED(unsigned char num_led,unsigned char    data)
                 ; 0002 0020 {
                 _SELECT_LED:
                 ; .FSTART _SELECT_LED
                 ; 0002 0021     unsigned char   byte1,byte2,byte3;
                 ; 0002 0022     byte1 = 0;
0001c1 93aa      	ST   -Y,R26
0001c2 d20f      	RCALL __SAVELOCR4
                 ;	num_led -> Y+5
                 ;	data -> Y+4
                 ;	byte1 -> R17
                 ;	byte2 -> R16
                 ;	byte3 -> R19
0001c3 e010      	LDI  R17,LOW(0)
                 ; 0002 0023     byte2 = 0;
0001c4 e000      	LDI  R16,LOW(0)
                 ; 0002 0024     byte3 = 0;
0001c5 e030      	LDI  R19,LOW(0)
                 ; 0002 0025     switch(num_led)
0001c6 81ed      	LDD  R30,Y+5
0001c7 d16a      	RCALL SUBOPT_0xB
                 ; 0002 0026     {
                 ; 0002 0027         case    1:
0001c8 f419      	BRNE _0x4000D
                 ; 0002 0028         {
                 ; 0002 0029             byte3 = 0x01;
0001c9 e031      	LDI  R19,LOW(1)
                 ; 0002 002A             byte2 = 0x01;
0001ca e001      	LDI  R16,LOW(1)
                 ; 0002 002B             break;
0001cb c04a      	RJMP _0x4000C
                 ; 0002 002C         }
                 ; 0002 002D         case    2:
                 _0x4000D:
0001cc d16a      	RCALL SUBOPT_0xC
0001cd f419      	BRNE _0x4000E
                 ; 0002 002E         {
                 ; 0002 002F             byte3 = 0x02;
0001ce e032      	LDI  R19,LOW(2)
                 ; 0002 0030             byte2 = 0x02;
0001cf e002      	LDI  R16,LOW(2)
                 ; 0002 0031             //byte1 = 0x04;
                 ; 0002 0032             break;
0001d0 c045      	RJMP _0x4000C
                 ; 0002 0033         }
                 ; 0002 0034         case    3:
                 _0x4000E:
0001d1 d169      	RCALL SUBOPT_0xD
0001d2 f421      	BRNE _0x4000F
                 ; 0002 0035         {
                 ; 0002 0036             byte3 = 0x04;
0001d3 e034      	LDI  R19,LOW(4)
                 ; 0002 0037             byte2 = 0x04;
0001d4 e004      	LDI  R16,LOW(4)
                 ; 0002 0038             byte1 = 0x40;
0001d5 e410      	LDI  R17,LOW(64)
                 ; 0002 0039             break;
0001d6 c03f      	RJMP _0x4000C
                 ; 0002 003A         }
                 ; 0002 003B         case    4:
                 _0x4000F:
0001d7 30e4      	CPI  R30,LOW(0x4)
0001d8 e0a0      	LDI  R26,HIGH(0x4)
0001d9 07fa      	CPC  R31,R26
0001da f419      	BRNE _0x40010
                 ; 0002 003C         {
                 ; 0002 003D             byte3 = 0x08;
0001db e038      	LDI  R19,LOW(8)
                 ; 0002 003E             byte2 = 0x08;
0001dc e008      	LDI  R16,LOW(8)
                 ; 0002 003F             break;
0001dd c038      	RJMP _0x4000C
                 ; 0002 0040         }
                 ; 0002 0041         case    5:
                 _0x40010:
0001de 30e5      	CPI  R30,LOW(0x5)
0001df e0a0      	LDI  R26,HIGH(0x5)
0001e0 07fa      	CPC  R31,R26
0001e1 f411      	BRNE _0x40011
                 ; 0002 0042         {
                 ; 0002 0043             byte3 = 0x40;
0001e2 e430      	LDI  R19,LOW(64)
                 ; 0002 0044             byte2 = 0x80;
0001e3 c031      	RJMP _0x4003E
                 ; 0002 0045             break;
                 ; 0002 0046         }
                 ; 0002 0047         case    6:
                 _0x40011:
0001e4 30e6      	CPI  R30,LOW(0x6)
0001e5 e0a0      	LDI  R26,HIGH(0x6)
0001e6 07fa      	CPC  R31,R26
0001e7 f421      	BRNE _0x40012
                 ; 0002 0048         {
                 ; 0002 0049             byte3 = 0x20;
0001e8 e230      	LDI  R19,LOW(32)
                 ; 0002 004A             byte2 = 0x40;
0001e9 e400      	LDI  R16,LOW(64)
                 ; 0002 004B             byte1 = 0x40;
0001ea e410      	LDI  R17,LOW(64)
                 ; 0002 004C             break;
0001eb c02a      	RJMP _0x4000C
                 ; 0002 004D         }
                 ; 0002 004E         case    7:
                 _0x40012:
0001ec 30e7      	CPI  R30,LOW(0x7)
0001ed e0a0      	LDI  R26,HIGH(0x7)
0001ee 07fa      	CPC  R31,R26
0001ef f419      	BRNE _0x40013
                 ; 0002 004F         {
                 ; 0002 0050             byte3 = 0x10;
0001f0 e130      	LDI  R19,LOW(16)
                 ; 0002 0051             byte2 = 0x20;
0001f1 e200      	LDI  R16,LOW(32)
                 ; 0002 0052             break;
0001f2 c023      	RJMP _0x4000C
                 ; 0002 0053         }
                 ; 0002 0054         case    8:
                 _0x40013:
0001f3 30e8      	CPI  R30,LOW(0x8)
0001f4 e0a0      	LDI  R26,HIGH(0x8)
0001f5 07fa      	CPC  R31,R26
0001f6 f419      	BRNE _0x40014
                 ; 0002 0055         {
                 ; 0002 0056             byte3 = 0x80;
0001f7 e830      	LDI  R19,LOW(128)
                 ; 0002 0057             byte2 = 0x10;
0001f8 e100      	LDI  R16,LOW(16)
                 ; 0002 0058             break;
0001f9 c01c      	RJMP _0x4000C
                 ; 0002 0059         }
                 ; 0002 005A         case    9:
                 _0x40014:
0001fa 30e9      	CPI  R30,LOW(0x9)
0001fb e0a0      	LDI  R26,HIGH(0x9)
0001fc 07fa      	CPC  R31,R26
0001fd f419      	BRNE _0x40015
                 ; 0002 005B         {
                 ; 0002 005C             byte3 = 0x00;
0001fe e030      	LDI  R19,LOW(0)
                 ; 0002 005D             byte2 = 0x40;
0001ff e400      	LDI  R16,LOW(64)
                 ; 0002 005E             break;
000200 c015      	RJMP _0x4000C
                 ; 0002 005F         }
                 ; 0002 0060         case    10:
                 _0x40015:
000201 30ea      	CPI  R30,LOW(0xA)
000202 e0a0      	LDI  R26,HIGH(0xA)
000203 07fa      	CPC  R31,R26
000204 f421      	BRNE _0x40016
                 ; 0002 0061         {
                 ; 0002 0062             byte3 = 0x00;
000205 e030      	LDI  R19,LOW(0)
                 ; 0002 0063             byte2 = 0x20;
000206 e200      	LDI  R16,LOW(32)
                 ; 0002 0064             byte1 = 0x04;
000207 e014      	LDI  R17,LOW(4)
                 ; 0002 0065             break;
000208 c00d      	RJMP _0x4000C
                 ; 0002 0066         }
                 ; 0002 0067         case    11:
                 _0x40016:
000209 30eb      	CPI  R30,LOW(0xB)
00020a e0a0      	LDI  R26,HIGH(0xB)
00020b 07fa      	CPC  R31,R26
00020c f419      	BRNE _0x40017
                 ; 0002 0068         {
                 ; 0002 0069             byte3 = 0x00;
00020d e030      	LDI  R19,LOW(0)
                 ; 0002 006A             byte2 = 0x10;
00020e e100      	LDI  R16,LOW(16)
                 ; 0002 006B             break;
00020f c006      	RJMP _0x4000C
                 ; 0002 006C         }
                 ; 0002 006D         case    12:
                 _0x40017:
000210 30ec      	CPI  R30,LOW(0xC)
000211 e0a0      	LDI  R26,HIGH(0xC)
000212 07fa      	CPC  R31,R26
000213 f411      	BRNE _0x4000C
                 ; 0002 006E         {
                 ; 0002 006F             byte3 = 0x00;
000214 e030      	LDI  R19,LOW(0)
                 ; 0002 0070             byte2 = 0x80;
                 _0x4003E:
000215 e800      	LDI  R16,LOW(128)
                 ; 0002 0071             break;
                 ; 0002 0072         }
                 ; 0002 0073     }
                 _0x4000C:
                 ; 0002 0074     switch(data)
000216 81ec      	LDD  R30,Y+4
000217 e0f0      	LDI  R31,0
                 ; 0002 0075     {
                 ; 0002 0076         case    0:
000218 9730      	SBIW R30,0
000219 f411      	BRNE _0x4001C
                 ; 0002 0077         {
                 ; 0002 0078             byte1 |= 0xB7;
00021a 6b17      	ORI  R17,LOW(183)
                 ; 0002 0079             break;
00021b c031      	RJMP _0x4001B
                 ; 0002 007A         }
                 ; 0002 007B         case    1:
                 _0x4001C:
00021c 30e1      	CPI  R30,LOW(0x1)
00021d e0a0      	LDI  R26,HIGH(0x1)
00021e 07fa      	CPC  R31,R26
00021f f411      	BRNE _0x4001D
                 ; 0002 007C         {
                 ; 0002 007D             byte1 |= 0x81;
000220 6811      	ORI  R17,LOW(129)
                 ; 0002 007E             break;
000221 c02b      	RJMP _0x4001B
                 ; 0002 007F         }
                 ; 0002 0080         case    2:
                 _0x4001D:
000222 d114      	RCALL SUBOPT_0xC
000223 f411      	BRNE _0x4001E
                 ; 0002 0081         {
                 ; 0002 0082             byte1 |= 0x3D;
000224 631d      	ORI  R17,LOW(61)
                 ; 0002 0083             break;
000225 c027      	RJMP _0x4001B
                 ; 0002 0084         }
                 ; 0002 0085         case    3:
                 _0x4001E:
000226 d114      	RCALL SUBOPT_0xD
000227 f411      	BRNE _0x4001F
                 ; 0002 0086         {
                 ; 0002 0087             byte1 |= 0xAD;
000228 6a1d      	ORI  R17,LOW(173)
                 ; 0002 0088             break;
000229 c023      	RJMP _0x4001B
                 ; 0002 0089         }
                 ; 0002 008A         case    4:
                 _0x4001F:
00022a 30e4      	CPI  R30,LOW(0x4)
00022b e0a0      	LDI  R26,HIGH(0x4)
00022c 07fa      	CPC  R31,R26
00022d f411      	BRNE _0x40020
                 ; 0002 008B         {
                 ; 0002 008C             byte1 |= 0x8B;
00022e 681b      	ORI  R17,LOW(139)
                 ; 0002 008D             break;
00022f c01d      	RJMP _0x4001B
                 ; 0002 008E         }
                 ; 0002 008F         case    5:
                 _0x40020:
000230 30e5      	CPI  R30,LOW(0x5)
000231 e0a0      	LDI  R26,HIGH(0x5)
000232 07fa      	CPC  R31,R26
000233 f411      	BRNE _0x40021
                 ; 0002 0090         {
                 ; 0002 0091             byte1 |= 0xAE;
000234 6a1e      	ORI  R17,LOW(174)
                 ; 0002 0092             break;
000235 c017      	RJMP _0x4001B
                 ; 0002 0093         }
                 ; 0002 0094         case    6:
                 _0x40021:
000236 30e6      	CPI  R30,LOW(0x6)
000237 e0a0      	LDI  R26,HIGH(0x6)
000238 07fa      	CPC  R31,R26
000239 f411      	BRNE _0x40022
                 ; 0002 0095         {
                 ; 0002 0096             byte1 |= 0xBE;
00023a 6b1e      	ORI  R17,LOW(190)
                 ; 0002 0097             break;
00023b c011      	RJMP _0x4001B
                 ; 0002 0098         }
                 ; 0002 0099         case    7:
                 _0x40022:
00023c 30e7      	CPI  R30,LOW(0x7)
00023d e0a0      	LDI  R26,HIGH(0x7)
00023e 07fa      	CPC  R31,R26
00023f f411      	BRNE _0x40023
                 ; 0002 009A         {
                 ; 0002 009B             byte1 |= 0x85;
000240 6815      	ORI  R17,LOW(133)
                 ; 0002 009C             break;
000241 c00b      	RJMP _0x4001B
                 ; 0002 009D         }
                 ; 0002 009E         case    8:
                 _0x40023:
000242 30e8      	CPI  R30,LOW(0x8)
000243 e0a0      	LDI  R26,HIGH(0x8)
000244 07fa      	CPC  R31,R26
000245 f411      	BRNE _0x40024
                 ; 0002 009F         {
                 ; 0002 00A0             byte1 |= 0xBF;
000246 6b1f      	ORI  R17,LOW(191)
                 ; 0002 00A1             break;
000247 c005      	RJMP _0x4001B
                 ; 0002 00A2         }
                 ; 0002 00A3         case    9:
                 _0x40024:
000248 30e9      	CPI  R30,LOW(0x9)
000249 e0a0      	LDI  R26,HIGH(0x9)
00024a 07fa      	CPC  R31,R26
00024b f409      	BRNE _0x4001B
                 ; 0002 00A4         {
                 ; 0002 00A5             byte1 |= 0xAF;
00024c 6a1f      	ORI  R17,LOW(175)
                 ; 0002 00A6             break;
                 ; 0002 00A7         }
                 ; 0002 00A8     }
                 _0x4001B:
                 ; 0002 00A9     SEND_DATA_LED(2,byte1,byte2,byte3);
00024d e0e2      	LDI  R30,LOW(2)
00024e 93ea      	ST   -Y,R30
00024f 931a      	ST   -Y,R17
000250 930a      	ST   -Y,R16
000251 2fa3      	MOV  R26,R19
000252 df45      	RCALL _SEND_DATA_LED
                 ; 0002 00AA }
000253 d183      	RCALL __LOADLOCR4
000254 9626      	ADIW R28,6
000255 9508      	RET
                 ; .FEND
                 ;
                 ;void SCAN_LED(void)
                 ; 0002 00AD {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0002 00AE     if(Uc_led_count == 1)   Uc_led_data = Uint_data_led1/1000;
000256 d0fc      	RCALL SUBOPT_0x12
000257 30a1      	CPI  R26,LOW(0x1)
000258 f419      	BRNE _0x40026
000259 d0fc      	RCALL SUBOPT_0x13
00025a d100      	RCALL SUBOPT_0x14
00025b c041      	RJMP _0x4003F
                 ; 0002 00AF     else if(Uc_led_count == 2)   Uc_led_data = (Uint_data_led1/100)%10;
                 _0x40026:
00025c d0f6      	RCALL SUBOPT_0x12
00025d 30a2      	CPI  R26,LOW(0x2)
00025e f419      	BRNE _0x40028
00025f d0f6      	RCALL SUBOPT_0x13
000260 d0fe      	RCALL SUBOPT_0x15
000261 c038      	RJMP _0x40040
                 ; 0002 00B0     else if(Uc_led_count == 3)   Uc_led_data = (Uint_data_led1/10)%10;
                 _0x40028:
000262 d0f0      	RCALL SUBOPT_0x12
000263 30a3      	CPI  R26,LOW(0x3)
000264 f419      	BRNE _0x4002A
000265 d0f0      	RCALL SUBOPT_0x13
000266 d0fd      	RCALL SUBOPT_0x16
000267 c032      	RJMP _0x40040
                 ; 0002 00B1     else if(Uc_led_count == 4)   Uc_led_data = (Uint_data_led1%10);
                 _0x4002A:
000268 d0ea      	RCALL SUBOPT_0x12
000269 30a4      	CPI  R26,LOW(0x4)
00026a f411      	BRNE _0x4002C
00026b d0ea      	RCALL SUBOPT_0x13
00026c c02d      	RJMP _0x40040
                 ; 0002 00B2     else if(Uc_led_count == 5)   Uc_led_data = Uint_data_led2/1000;
                 _0x4002C:
00026d d0e5      	RCALL SUBOPT_0x12
00026e 30a5      	CPI  R26,LOW(0x5)
00026f f419      	BRNE _0x4002E
000270 d0f8      	RCALL SUBOPT_0x17
000271 d0e9      	RCALL SUBOPT_0x14
000272 c02a      	RJMP _0x4003F
                 ; 0002 00B3     else if(Uc_led_count == 6)   Uc_led_data = (Uint_data_led2/100)%10;
                 _0x4002E:
000273 d0df      	RCALL SUBOPT_0x12
000274 30a6      	CPI  R26,LOW(0x6)
000275 f419      	BRNE _0x40030
000276 d0f2      	RCALL SUBOPT_0x17
000277 d0e7      	RCALL SUBOPT_0x15
000278 c021      	RJMP _0x40040
                 ; 0002 00B4     else if(Uc_led_count == 7)   Uc_led_data = (Uint_data_led2/10)%10;
                 _0x40030:
000279 d0d9      	RCALL SUBOPT_0x12
00027a 30a7      	CPI  R26,LOW(0x7)
00027b f419      	BRNE _0x40032
00027c d0ec      	RCALL SUBOPT_0x17
00027d d0e6      	RCALL SUBOPT_0x16
00027e c01b      	RJMP _0x40040
                 ; 0002 00B5     else if(Uc_led_count == 8)   Uc_led_data = (Uint_data_led2%10);
                 _0x40032:
00027f d0d3      	RCALL SUBOPT_0x12
000280 30a8      	CPI  R26,LOW(0x8)
000281 f411      	BRNE _0x40034
000282 d0e6      	RCALL SUBOPT_0x17
000283 c016      	RJMP _0x40040
                 ; 0002 00B6     else if(Uc_led_count == 9)   Uc_led_data = Uint_data_led3/1000;
                 _0x40034:
000284 d0ce      	RCALL SUBOPT_0x12
000285 30a9      	CPI  R26,LOW(0x9)
000286 f419      	BRNE _0x40036
000287 d0e6      	RCALL SUBOPT_0x18
000288 d0d2      	RCALL SUBOPT_0x14
000289 c013      	RJMP _0x4003F
                 ; 0002 00B7     else if(Uc_led_count == 10)   Uc_led_data = (Uint_data_led3/100)%10;
                 _0x40036:
00028a d0c8      	RCALL SUBOPT_0x12
00028b 30aa      	CPI  R26,LOW(0xA)
00028c f419      	BRNE _0x40038
00028d d0e0      	RCALL SUBOPT_0x18
00028e d0d0      	RCALL SUBOPT_0x15
00028f c00a      	RJMP _0x40040
                 ; 0002 00B8     else if(Uc_led_count == 11)   Uc_led_data = (Uint_data_led3/10)%10;
                 _0x40038:
000290 d0c2      	RCALL SUBOPT_0x12
000291 30ab      	CPI  R26,LOW(0xB)
000292 f419      	BRNE _0x4003A
000293 d0da      	RCALL SUBOPT_0x18
000294 d0cf      	RCALL SUBOPT_0x16
000295 c004      	RJMP _0x40040
                 ; 0002 00B9     else if(Uc_led_count == 12)   Uc_led_data = (Uint_data_led3%10);
                 _0x4003A:
000296 d0bc      	RCALL SUBOPT_0x12
000297 30ac      	CPI  R26,LOW(0xC)
000298 f431      	BRNE _0x4003C
000299 d0d4      	RCALL SUBOPT_0x18
                 _0x40040:
00029a e0ea      	LDI  R30,LOW(10)
00029b e0f0      	LDI  R31,HIGH(10)
00029c d12e      	RCALL __MODW21U
                 _0x4003F:
00029d 93e0 0181 	STS  _Uc_led_data,R30
                 ; 0002 00BA     SELECT_LED(Uc_led_count,Uc_led_data);
                 _0x4003C:
00029f 91e0 0180 	LDS  R30,_Uc_led_count
0002a1 93ea      	ST   -Y,R30
0002a2 91a0 0181 	LDS  R26,_Uc_led_data
0002a4 df1c      	RCALL _SELECT_LED
                 ; 0002 00BB     Uc_led_count++;
0002a5 91e0 0180 	LDS  R30,_Uc_led_count
0002a7 5fef      	SUBI R30,-LOW(1)
0002a8 93e0 0180 	STS  _Uc_led_count,R30
                 ; 0002 00BC     if(Uc_led_count > NUM_LED_SCAN*4)    Uc_led_count = 1;
0002aa d0a8      	RCALL SUBOPT_0x12
0002ab 30a9      	CPI  R26,LOW(0x9)
0002ac f018      	BRLO _0x4003D
0002ad e0e1      	LDI  R30,LOW(1)
0002ae 93e0 0180 	STS  _Uc_led_count,R30
                 ; 0002 00BD }
                 _0x4003D:
0002b0 9508      	RET
                 ; .FEND
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void    SPI_SENDBYTE(unsigned char  data,unsigned char action)
                 ; 0003 0005 {
                 
                 	.CSEG
                 _SPI_SENDBYTE:
                 ; .FSTART _SPI_SENDBYTE
                 ; 0003 0006     unsigned char   i;
                 ; 0003 0007     for(i=0;i<8;i++)
0002b1 93aa      	ST   -Y,R26
0002b2 931a      	ST   -Y,R17
                 ;	data -> Y+2
                 ;	action -> Y+1
                 ;	i -> R17
0002b3 e010      	LDI  R17,LOW(0)
                 _0x60004:
0002b4 3018      	CPI  R17,8
0002b5 f470      	BRSH _0x60005
                 ; 0003 0008     {
                 ; 0003 0009         if((data & 0x80) == 0x80)    DO_SPI_MOSI = 1;
0002b6 81ea      	LDD  R30,Y+2
0002b7 78e0      	ANDI R30,LOW(0x80)
0002b8 38e0      	CPI  R30,LOW(0x80)
0002b9 f411      	BRNE _0x60006
0002ba 9a2b      	SBI  0x5,3
                 ; 0003 000A         else    DO_SPI_MOSI = 0;
0002bb c001      	RJMP _0x60009
                 _0x60006:
0002bc 982b      	CBI  0x5,3
                 ; 0003 000B         data <<= 1;
                 _0x60009:
0002bd 81ea      	LDD  R30,Y+2
0002be 0fee      	LSL  R30
0002bf 83ea      	STD  Y+2,R30
                 ; 0003 000C         DO_SPI_SCK = 1;
0002c0 9a2d      	SBI  0x5,5
                 ; 0003 000D         DO_SPI_SCK = 0;
0002c1 982d      	CBI  0x5,5
                 ; 0003 000E     }
0002c2 5f1f      	SUBI R17,-1
0002c3 cff0      	RJMP _0x60004
                 _0x60005:
                 ; 0003 000F     if(action)
0002c4 81e9      	LDD  R30,Y+1
0002c5 30e0      	CPI  R30,0
0002c6 f011      	BREQ _0x60010
                 ; 0003 0010     {
                 ; 0003 0011         DO_SPI_LATCH = 1;
0002c7 9a29      	SBI  0x5,1
                 ; 0003 0012         DO_SPI_LATCH = 0;
0002c8 9829      	CBI  0x5,1
                 ; 0003 0013     }
                 ; 0003 0014 }
                 _0x60010:
0002c9 8118      	LDD  R17,Y+0
                 _0x2000001:
0002ca 9623      	ADIW R28,3
0002cb 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Uc_led_count:
000180           	.BYTE 0x1
                 _Uc_led_data:
000181           	.BYTE 0x1
                 _Uint_data_led1:
000182           	.BYTE 0x2
                 _Uint_data_led2:
000184           	.BYTE 0x2
                 _Uint_data_led3:
000186           	.BYTE 0x2
                 _AI10_Voltage_buff:
000188           	.BYTE 0x14
                 _AI10_Currrent_buff:
00019c           	.BYTE 0x14
                 _Ulong_tmp:
0001b0           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
0002cc 93e0 0085 	STS  133,R30
0002ce e0e0      	LDI  R30,LOW(0)
0002cf 93e0 0084 	STS  132,R30
0002d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0002d2 9a5d      	SBI  0xB,5
0002d3 e6a4      	LDI  R26,LOW(100)
0002d4 e0b0      	LDI  R27,0
0002d5 d09d      	RCALL _delay_ms
0002d6 985d      	CBI  0xB,5
0002d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0002d8 e8a8      	LDI  R26,LOW(_AI10_Voltage_buff)
0002d9 e0b1      	LDI  R27,HIGH(_AI10_Voltage_buff)
0002da e0f0      	LDI  R31,0
0002db 0fee      	LSL  R30
0002dc 1fff      	ROL  R31
0002dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
0002de e9ac      	LDI  R26,LOW(_AI10_Currrent_buff)
0002df e0b1      	LDI  R27,HIGH(_AI10_Currrent_buff)
0002e0 e0f0      	LDI  R31,0
0002e1 0fee      	LSL  R30
0002e2 1fff      	ROL  R31
0002e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
0002e4 e0e0      	LDI  R30,LOW(0)
0002e5 93e0 01b0 	STS  _Ulong_tmp,R30
0002e7 93e0 01b1 	STS  _Ulong_tmp+1,R30
0002e9 93e0 01b2 	STS  _Ulong_tmp+2,R30
0002eb 93e0 01b3 	STS  _Ulong_tmp+3,R30
0002ed 2433      	CLR  R3
0002ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x5:
0002ef 0fae      	ADD  R26,R30
0002f0 1fbf      	ADC  R27,R31
0002f1 d0dc      	RCALL __GETW1P
0002f2 91a0 01b0 	LDS  R26,_Ulong_tmp
0002f4 91b0 01b1 	LDS  R27,_Ulong_tmp+1
0002f6 9180 01b2 	LDS  R24,_Ulong_tmp+2
0002f8 9190 01b3 	LDS  R25,_Ulong_tmp+3
0002fa 2766      	CLR  R22
0002fb 2777      	CLR  R23
0002fc d080      	RCALL __ADDD12
0002fd 93e0 01b0 	STS  _Ulong_tmp,R30
0002ff 93f0 01b1 	STS  _Ulong_tmp+1,R31
000301 9360 01b2 	STS  _Ulong_tmp+2,R22
000303 9370 01b3 	STS  _Ulong_tmp+3,R23
000305 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x6:
000306 91a0 01b0 	LDS  R26,_Ulong_tmp
000308 91b0 01b1 	LDS  R27,_Ulong_tmp+1
00030a 9180 01b2 	LDS  R24,_Ulong_tmp+2
00030c 9190 01b3 	LDS  R25,_Ulong_tmp+3
                +
00030e e0ea     +LDI R30 , LOW ( 0xA )
00030f e0f0     +LDI R31 , HIGH ( 0xA )
000310 e060     +LDI R22 , BYTE3 ( 0xA )
000311 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000312 d093      	RCALL __DIVD21U
000313 93e0 01b0 	STS  _Ulong_tmp,R30
000315 93f0 01b1 	STS  _Ulong_tmp+1,R31
000317 9360 01b2 	STS  _Ulong_tmp+2,R22
000319 9370 01b3 	STS  _Ulong_tmp+3,R23
00031b 91e0 01b0 	LDS  R30,_Ulong_tmp
00031d 91f0 01b1 	LDS  R31,_Ulong_tmp+1
00031f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000320 9a44      	SBI  0x8,4
                +
000321 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000322 958a     +DEC R24
000323 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000324 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000325 9844      	CBI  0x8,4
                +
000326 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000327 958a     +DEC R24
000328 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000329 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
00032a 2fe1      	MOV  R30,R17
00032b e0f0      	LDI  R31,0
00032c 01de      	MOVW R26,R28
00032d 9615      	ADIW R26,5
00032e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
00032f 0fae      	ADD  R26,R30
000330 1fbf      	ADC  R27,R31
000331 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000332 e0f0      	LDI  R31,0
000333 30e1      	CPI  R30,LOW(0x1)
000334 e0a0      	LDI  R26,HIGH(0x1)
000335 07fa      	CPC  R31,R26
000336 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
000337 30e2      	CPI  R30,LOW(0x2)
000338 e0a0      	LDI  R26,HIGH(0x2)
000339 07fa      	CPC  R31,R26
00033a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
00033b 30e3      	CPI  R30,LOW(0x3)
00033c e0a0      	LDI  R26,HIGH(0x3)
00033d 07fa      	CPC  R31,R26
00033e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xE:
                +
00033f ec88     +LDI R24 , LOW ( 200 )
000340 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000341 9701     +SBIW R24 , 1
000342 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000343 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xF:
                +
000344 81a9     +LDD R26 , Y + 1
000345 81ba     +LDD R27 , Y + 1 + 1
000346 818b     +LDD R24 , Y + 1 + 2
000347 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
000348 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
                +
000349 83e9     +STD Y + 1 , R30
00034a 83fa     +STD Y + 1 + 1 , R31
00034b 836b     +STD Y + 1 + 2 , R22
00034c 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
00034d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x11:
00034e 2fe1      	MOV  R30,R17
00034f e0f0      	LDI  R31,0
000350 01de      	MOVW R26,R28
000351 9611      	ADIW R26,1
000352 cfdc      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x12:
000353 91a0 0180 	LDS  R26,_Uc_led_count
000355 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x13:
000356 91a0 0182 	LDS  R26,_Uint_data_led1
000358 91b0 0183 	LDS  R27,_Uint_data_led1+1
00035a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x14:
00035b eee8      	LDI  R30,LOW(1000)
00035c e0f3      	LDI  R31,HIGH(1000)
00035d d035      	RCALL __DIVW21U
00035e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x15:
00035f e6e4      	LDI  R30,LOW(100)
000360 e0f0      	LDI  R31,HIGH(100)
000361 d031      	RCALL __DIVW21U
000362 01df      	MOVW R26,R30
000363 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x16:
000364 e0ea      	LDI  R30,LOW(10)
000365 e0f0      	LDI  R31,HIGH(10)
000366 d02c      	RCALL __DIVW21U
000367 01df      	MOVW R26,R30
000368 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x17:
000369 91a0 0184 	LDS  R26,_Uint_data_led2
00036b 91b0 0185 	LDS  R27,_Uint_data_led2+1
00036d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x18:
00036e 91a0 0186 	LDS  R26,_Uint_data_led3
000370 91b0 0187 	LDS  R27,_Uint_data_led3+1
000372 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000373 9610      	adiw r26,0
000374 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000375 ed80     +LDI R24 , LOW ( 0x7D0 )
000376 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000377 9701     +SBIW R24 , 1
000378 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000379 95a8      	wdr
00037a 9711      	sbiw r26,1
00037b f7c9      	brne __delay_ms0
                 __delay_ms1:
00037c 9508      	ret
                 
                 __ADDD12:
00037d 0fea      	ADD  R30,R26
00037e 1ffb      	ADC  R31,R27
00037f 1f68      	ADC  R22,R24
000380 1f79      	ADC  R23,R25
000381 9508      	RET
                 
                 __LSLD12:
000382 23ee      	TST  R30
000383 2e0e      	MOV  R0,R30
000384 01fd      	MOVW R30,R26
000385 01bc      	MOVW R22,R24
000386 f031      	BREQ __LSLD12R
                 __LSLD12L:
000387 0fee      	LSL  R30
000388 1fff      	ROL  R31
000389 1f66      	ROL  R22
00038a 1f77      	ROL  R23
00038b 940a      	DEC  R0
00038c f7d1      	BRNE __LSLD12L
                 __LSLD12R:
00038d 9508      	RET
                 
                 __CWD1:
00038e 2f6f      	MOV  R22,R31
00038f 0f66      	ADD  R22,R22
000390 0b66      	SBC  R22,R22
000391 2f76      	MOV  R23,R22
000392 9508      	RET
                 
                 __DIVW21U:
000393 2400      	CLR  R0
000394 2411      	CLR  R1
000395 e190      	LDI  R25,16
                 __DIVW21U1:
000396 0faa      	LSL  R26
000397 1fbb      	ROL  R27
000398 1c00      	ROL  R0
000399 1c11      	ROL  R1
00039a 1a0e      	SUB  R0,R30
00039b 0a1f      	SBC  R1,R31
00039c f418      	BRCC __DIVW21U2
00039d 0e0e      	ADD  R0,R30
00039e 1e1f      	ADC  R1,R31
00039f c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003a0 60a1      	SBR  R26,1
                 __DIVW21U3:
0003a1 959a      	DEC  R25
0003a2 f799      	BRNE __DIVW21U1
0003a3 01fd      	MOVW R30,R26
0003a4 01d0      	MOVW R26,R0
0003a5 9508      	RET
                 
                 __DIVD21U:
0003a6 933f      	PUSH R19
0003a7 934f      	PUSH R20
0003a8 935f      	PUSH R21
0003a9 2400      	CLR  R0
0003aa 2411      	CLR  R1
0003ab 2744      	CLR  R20
0003ac 2755      	CLR  R21
0003ad e230      	LDI  R19,32
                 __DIVD21U1:
0003ae 0faa      	LSL  R26
0003af 1fbb      	ROL  R27
0003b0 1f88      	ROL  R24
0003b1 1f99      	ROL  R25
0003b2 1c00      	ROL  R0
0003b3 1c11      	ROL  R1
0003b4 1f44      	ROL  R20
0003b5 1f55      	ROL  R21
0003b6 1a0e      	SUB  R0,R30
0003b7 0a1f      	SBC  R1,R31
0003b8 0b46      	SBC  R20,R22
0003b9 0b57      	SBC  R21,R23
0003ba f428      	BRCC __DIVD21U2
0003bb 0e0e      	ADD  R0,R30
0003bc 1e1f      	ADC  R1,R31
0003bd 1f46      	ADC  R20,R22
0003be 1f57      	ADC  R21,R23
0003bf c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0003c0 60a1      	SBR  R26,1
                 __DIVD21U3:
0003c1 953a      	DEC  R19
0003c2 f759      	BRNE __DIVD21U1
0003c3 01fd      	MOVW R30,R26
0003c4 01bc      	MOVW R22,R24
0003c5 01d0      	MOVW R26,R0
0003c6 01ca      	MOVW R24,R20
0003c7 915f      	POP  R21
0003c8 914f      	POP  R20
0003c9 913f      	POP  R19
0003ca 9508      	RET
                 
                 __MODW21U:
0003cb dfc7      	RCALL __DIVW21U
0003cc 01fd      	MOVW R30,R26
0003cd 9508      	RET
                 
                 __GETW1P:
0003ce 91ed      	LD   R30,X+
0003cf 91fc      	LD   R31,X
0003d0 9711      	SBIW R26,1
0003d1 9508      	RET
                 
                 __SAVELOCR4:
0003d2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003d3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003d4 931a      	ST   -Y,R17
0003d5 930a      	ST   -Y,R16
0003d6 9508      	RET
                 
                 __LOADLOCR4:
0003d7 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003d8 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003d9 8119      	LDD  R17,Y+1
0003da 8108      	LD   R16,Y
0003db 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega48 register use summary:
r0 :  18 r1 :  11 r2 :   0 r3 :   7 r4 :   5 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  23 r17:  50 r18:   2 r19:  20 r20:   7 r21:   6 r22:  23 r23:  14 
r24:  25 r25:  13 r26: 113 r27:  28 r28:   9 r29:   1 r30: 222 r31:  64 
x  :  15 y  :  89 z  :   7 
Registers used: 24 out of 35 (68.6%)

ATmega48 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  12 add   :   9 
adiw  :   7 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   4 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  52 brpl  :   0 brsh  :  10 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   9 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  12 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   6 
cpc   :  20 cpi   :  42 cpse  :   0 dec   :   6 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   3 ld    :  20 ldd   :  27 ldi   : 151 lds   :  20 lpm   :   7 
lsl   :   8 lsr   :   0 mov   :  13 movw  :  16 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :  10 out   :  19 
pop   :   9 push  :   9 rcall : 106 ret   :  40 reti  :   3 rjmp  :  82 
rol   :  15 ror   :   0 sbc   :   5 sbci  :   0 sbi   :  16 sbic  :   2 
sbis  :   1 sbiw  :  11 sbr   :   2 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  44 std   :  13 
sts   :  47 sub   :   2 subi  :  10 swap  :   0 tst   :   1 wdr   :   1 

Instructions used: 50 out of 114 (43.9%)

ATmega48 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007b8   1958     18   1976    4096  48.2%
[.dseg] 0x000100 0x0001b4      0     52     52     512  10.2%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 4 warnings
