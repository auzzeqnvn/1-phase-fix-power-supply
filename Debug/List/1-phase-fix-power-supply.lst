
AVRASM ver. 2.1.30  D:\My Data\TanPhat\1-phase-fix-power-supply\Debug\List\1-phase-fix-power-supply.asm Fri Nov 23 23:14:21 2018

D:\My Data\TanPhat\1-phase-fix-power-supply\Debug\List\1-phase-fix-power-supply.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\My Data\TanPhat\1-phase-fix-power-supply\Debug\List\1-phase-fix-power-supply.asm(1089): warning: Register r3 already defined by the .DEF directive
D:\My Data\TanPhat\1-phase-fix-power-supply\Debug\List\1-phase-fix-power-supply.asm(1090): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega48
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega48
                 	#pragma AVRPART MEMORY PROG_FLASH 4096
                 	#pragma AVRPART MEMORY EEPROM 256
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x02FF
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uc_Buff_count=R4
                 	.DEF _Uc_Loop_count=R3
                 	.DEF _Uc_Loop2_count=R6
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c022      	RJMP __RESET
000001 c04d      	RJMP _ext_int0_isr
000002 c04d      	RJMP _ext_int1_isr
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c065      	RJMP _timer2_ovf_isr
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d c043      	RJMP _timer1_ovf_isr
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
000015 cfea      	RJMP 0x00
000016 cfe9      	RJMP 0x00
000017 cfe8      	RJMP 0x00
000018 cfe7      	RJMP 0x00
000019 cfe6      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
D:\My Data\TanPhat\1-phase-fix-power-supply\Debug\List\1-phase-fix-power-supply.asm(1131): warning: .cseg .db misalignment - padding zero byte
00001a 0000      	.DB  0x0
                 
                 _0x40003:
D:\My Data\TanPhat\1-phase-fix-power-supply\Debug\List\1-phase-fix-power-supply.asm(1134): warning: .cseg .db misalignment - padding zero byte
00001b 0001      	.DB  0x1
                 
                 __GLOBAL_INI_TBL:
00001c 0001      	.DW  0x01
00001d 0004      	.DW  0x04
00001e 0034      	.DW  __REG_VARS*2
                 
00001f 0001      	.DW  0x01
000020 0180      	.DW  _Uc_led_count
000021 0036      	.DW  _0x40003*2
                 
                 _0xFFFFFFFF:
000022 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000023 94f8      	CLI
000024 27ee      	CLR  R30
000025 bbef      	OUT  EECR,R30
000026 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000027 e08d      	LDI  R24,(14-2)+1
000028 e0a2      	LDI  R26,2
000029 27bb      	CLR  R27
                 __CLEAR_REG:
00002a 93ed      	ST   X+,R30
00002b 958a      	DEC  R24
00002c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00002d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00002e e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00002f e0a0      	LDI  R26,LOW(__SRAM_START)
000030 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000031 93ed      	ST   X+,R30
000032 9701      	SBIW R24,1
000033 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000034 e3e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000035 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000036 9185      	LPM  R24,Z+
000037 9195      	LPM  R25,Z+
000038 9700      	SBIW R24,0
000039 f061      	BREQ __GLOBAL_INI_END
00003a 91a5      	LPM  R26,Z+
00003b 91b5      	LPM  R27,Z+
00003c 9005      	LPM  R0,Z+
00003d 9015      	LPM  R1,Z+
00003e 01bf      	MOVW R22,R30
00003f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000040 9005      	LPM  R0,Z+
000041 920d      	ST   X+,R0
000042 9701      	SBIW R24,1
000043 f7e1      	BRNE __GLOBAL_INI_LOOP
000044 01fb      	MOVW R30,R22
000045 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000046 e0e0      	LDI  R30,__GPIOR0_INIT
000047 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000048 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000049 bfed      	OUT  SPL,R30
00004a e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004c e8c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004d e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004e c046      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x180
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 1 Phase fix power supply
                 ;Version : 1.0
                 ;Date    : 11/19/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega48
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 128
                 ;*******************************************************/
                 ;
                 ;#include <mega48.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <scan_led.h>
                 ;#include <ADE7753.h>
                 ;#include <delay.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;
                 ;#define TIMER2_OFF  TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2)
                 ;#define TIMER2_ON   TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (1<<TOIE2)
                 ;
                 ;#define BUZZER  PORTD.5
                 ;#define BUZZER_OFF  BUZZER = 0
                 ;#define BUZZER_ON   BUZZER = 1
                 ;
                 ;#define CURRENT_SET_MIN 7
                 ;#define CURRENT_SET_MAX 20
                 ;
                 ;unsigned int    AI10_Voltage_buff[10];
                 ;unsigned int    AI10_Currrent_buff[10];
                 ;unsigned int    AI10_Temp_buff[10];
                 ;unsigned long   Ulong_tmp;
                 ;unsigned char   Uc_Buff_count = 0;
                 ;unsigned char   Uc_Loop_count;
                 ;unsigned char   Uc_Loop2_count;
                 ;bit Bit_sample_full = 0;
                 ;bit Bit_warning = 0;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0034 {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
                 ; 0000 0035 // Place your code here
                 ; 0000 0036 
                 ; 0000 0037 }
00004f 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 003B {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
                 ; 0000 003C // Place your code here
                 ; 0000 003D 
                 ; 0000 003E }
000050 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0042 {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000051 920a      	ST   -Y,R0
000052 921a      	ST   -Y,R1
000053 92fa      	ST   -Y,R15
000054 936a      	ST   -Y,R22
000055 937a      	ST   -Y,R23
000056 938a      	ST   -Y,R24
000057 939a      	ST   -Y,R25
000058 93aa      	ST   -Y,R26
000059 93ba      	ST   -Y,R27
00005a 93ea      	ST   -Y,R30
00005b 93fa      	ST   -Y,R31
00005c b7ef      	IN   R30,SREG
00005d 93ea      	ST   -Y,R30
                 ; 0000 0043     // Reinitialize Timer1 value
                 ; 0000 0044     TCNT1H=0xA000 >> 8;
00005e eae0      	LDI  R30,LOW(160)
00005f d327      	RCALL SUBOPT_0x0
                 ; 0000 0045     TCNT1L=0xA000 & 0xff;
                 ; 0000 0046     // Place your code here
                 ; 0000 0047     SCAN_LED();
000060 d2b0      	RCALL _SCAN_LED
                 ; 0000 0048 }
000061 91e9      	LD   R30,Y+
000062 bfef      	OUT  SREG,R30
000063 91f9      	LD   R31,Y+
000064 91e9      	LD   R30,Y+
000065 91b9      	LD   R27,Y+
000066 91a9      	LD   R26,Y+
000067 9199      	LD   R25,Y+
000068 9189      	LD   R24,Y+
000069 9179      	LD   R23,Y+
00006a 9169      	LD   R22,Y+
00006b 90f9      	LD   R15,Y+
00006c 9019      	LD   R1,Y+
00006d 9009      	LD   R0,Y+
00006e 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;// Timer2 overflow interrupt service routine
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 004D {
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
00006f 93ea      	ST   -Y,R30
                 ; 0000 004E // Reinitialize Timer2 value
                 ; 0000 004F     TCNT2=0xD0;
000070 ede0      	LDI  R30,LOW(208)
000071 93e0 00b2 	STS  178,R30
                 ; 0000 0050     if(BUZZER == 0)   BUZZER_ON;
000073 995d      	SBIC 0xB,5
000074 c002      	RJMP _0x3
000075 9a5d      	SBI  0xB,5
                 ; 0000 0051     else    BUZZER_OFF;
000076 c001      	RJMP _0x6
                 _0x3:
000077 985d      	CBI  0xB,5
                 ; 0000 0052 // Place your code here
                 ; 0000 0053 
                 ; 0000 0054 }
                 _0x6:
000078 91e9      	LD   R30,Y+
000079 9518      	RETI
                 ; .FEND
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 005A {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 005B ADMUX=adc_input | ADC_VREF_TYPE;
00007a 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00007b 81e8      	LD   R30,Y
00007c 93e0 007c 	STS  124,R30
                 ; 0000 005C // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 005D delay_us(10);
                +
00007e e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00007f 958a     +DEC R24
000080 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 005E // Start the AD conversion
                 ; 0000 005F ADCSRA|=(1<<ADSC);
000081 91e0 007a 	LDS  R30,122
000083 64e0      	ORI  R30,0x40
000084 93e0 007a 	STS  122,R30
                 ; 0000 0060 // Wait for the AD conversion to complete
                 ; 0000 0061 while ((ADCSRA & (1<<ADIF))==0);
                 _0x9:
000086 91e0 007a 	LDS  R30,122
000088 71e0      	ANDI R30,LOW(0x10)
000089 f3e1      	BREQ _0x9
                 ; 0000 0062 ADCSRA|=(1<<ADIF);
00008a 91e0 007a 	LDS  R30,122
00008c 61e0      	ORI  R30,0x10
00008d 93e0 007a 	STS  122,R30
                 ; 0000 0063 return ADCW;
00008f 91e0 0078 	LDS  R30,120
000091 91f0 0079 	LDS  R31,120+1
000093 9621      	ADIW R28,1
000094 9508      	RET
                 ; 0000 0064 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0067 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0068 // Declare your local variables here
                 ; 0000 0069 
                 ; 0000 006A // Crystal Oscillator division factor: 1
                 ; 0000 006B #pragma optsize-
                 ; 0000 006C CLKPR=(1<<CLKPCE);
000095 e8e0      	LDI  R30,LOW(128)
000096 93e0 0061 	STS  97,R30
                 ; 0000 006D CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000098 e0e0      	LDI  R30,LOW(0)
000099 93e0 0061 	STS  97,R30
                 ; 0000 006E #ifdef _OPTIMIZE_SIZE_
                 ; 0000 006F #pragma optsize+
                 ; 0000 0070 #endif
                 ; 0000 0071 
                 ; 0000 0072 // Input/Output Ports initialization
                 ; 0000 0073 // Port B initialization
                 ; 0000 0074 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=Out Bit0=In
                 ; 0000 0075 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
00009b e2ea      	LDI  R30,LOW(42)
00009c b9e4      	OUT  0x4,R30
                 ; 0000 0076 // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=0 Bit0=T
                 ; 0000 0077 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00009d e0e0      	LDI  R30,LOW(0)
00009e b9e5      	OUT  0x5,R30
                 ; 0000 0078 
                 ; 0000 0079 // Port C initialization
                 ; 0000 007A // Function: Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=Out Bit1=In Bit0=In
                 ; 0000 007B DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (0<<DDC3) | (1<<DDC2) | (0<<DDC1) | (0<<DDC0);
00009f e3e4      	LDI  R30,LOW(52)
0000a0 b9e7      	OUT  0x7,R30
                 ; 0000 007C // State: Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=0 Bit1=T Bit0=T
                 ; 0000 007D PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000a1 e0e0      	LDI  R30,LOW(0)
0000a2 b9e8      	OUT  0x8,R30
                 ; 0000 007E 
                 ; 0000 007F // Port D initialization
                 ; 0000 0080 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0081 DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000a3 e2e0      	LDI  R30,LOW(32)
0000a4 b9ea      	OUT  0xA,R30
                 ; 0000 0082 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0083 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 b9eb      	OUT  0xB,R30
                 ; 0000 0084 
                 ; 0000 0085 // Timer/Counter 0 initialization
                 ; 0000 0086 // Clock source: System Clock
                 ; 0000 0087 // Clock value: Timer 0 Stopped
                 ; 0000 0088 // Mode: Normal top=0xFF
                 ; 0000 0089 // OC0A output: Disconnected
                 ; 0000 008A // OC0B output: Disconnected
                 ; 0000 008B TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
0000a7 bde4      	OUT  0x24,R30
                 ; 0000 008C TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000a8 bde5      	OUT  0x25,R30
                 ; 0000 008D TCNT0=0x00;
0000a9 bde6      	OUT  0x26,R30
                 ; 0000 008E OCR0A=0x00;
0000aa bde7      	OUT  0x27,R30
                 ; 0000 008F OCR0B=0x00;
0000ab bde8      	OUT  0x28,R30
                 ; 0000 0090 
                 ; 0000 0091 // Timer/Counter 1 initialization
                 ; 0000 0092 // Clock source: System Clock
                 ; 0000 0093 // Clock value: 8000,000 kHz
                 ; 0000 0094 // Mode: Normal top=0xFFFF
                 ; 0000 0095 // OC1A output: Disconnected
                 ; 0000 0096 // OC1B output: Disconnected
                 ; 0000 0097 // Noise Canceler: Off
                 ; 0000 0098 // Input Capture on Falling Edge
                 ; 0000 0099 // Timer Period: 4 ms
                 ; 0000 009A // Timer1 Overflow Interrupt: On
                 ; 0000 009B // Input Capture Interrupt: Off
                 ; 0000 009C // Compare A Match Interrupt: Off
                 ; 0000 009D // Compare B Match Interrupt: Off
                 ; 0000 009E TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000ac 93e0 0080 	STS  128,R30
                 ; 0000 009F TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
0000ae e0e1      	LDI  R30,LOW(1)
0000af 93e0 0081 	STS  129,R30
                 ; 0000 00A0 TCNT1H=0x83;
0000b1 e8e3      	LDI  R30,LOW(131)
0000b2 d2d4      	RCALL SUBOPT_0x0
                 ; 0000 00A1 TCNT1L=0x00;
                 ; 0000 00A2 ICR1H=0x00;
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 93e0 0087 	STS  135,R30
                 ; 0000 00A3 ICR1L=0x00;
0000b6 93e0 0086 	STS  134,R30
                 ; 0000 00A4 OCR1AH=0x00;
0000b8 93e0 0089 	STS  137,R30
                 ; 0000 00A5 OCR1AL=0x00;
0000ba 93e0 0088 	STS  136,R30
                 ; 0000 00A6 OCR1BH=0x00;
0000bc 93e0 008b 	STS  139,R30
                 ; 0000 00A7 OCR1BL=0x00;
0000be 93e0 008a 	STS  138,R30
                 ; 0000 00A8 
                 ; 0000 00A9 // Timer/Counter 2 initialization
                 ; 0000 00AA // Clock source: System Clock
                 ; 0000 00AB // Clock value: Timer2 Stopped
                 ; 0000 00AC // Mode: Normal top=0xFF
                 ; 0000 00AD // OC2A output: Disconnected
                 ; 0000 00AE // OC2B output: Disconnected
                 ; 0000 00AF // ASSR=(0<<EXCLK) | (0<<AS2);
                 ; 0000 00B0 // TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
                 ; 0000 00B1 // TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
                 ; 0000 00B2 // TCNT2=0x00;
                 ; 0000 00B3 // OCR2A=0x00;
                 ; 0000 00B4 // OCR2B=0x00;
                 ; 0000 00B5 
                 ; 0000 00B6 // Timer/Counter 2 initialization
                 ; 0000 00B7 // Clock source: System Clock
                 ; 0000 00B8 // Clock value: 250,000 kHz
                 ; 0000 00B9 // Mode: Normal top=0xFF
                 ; 0000 00BA // OC2A output: Disconnected
                 ; 0000 00BB // OC2B output: Disconnected
                 ; 0000 00BC // Timer Period: 0,5 ms
                 ; 0000 00BD ASSR=(0<<EXCLK) | (0<<AS2);
0000c0 93e0 00b6 	STS  182,R30
                 ; 0000 00BE TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
0000c2 93e0 00b0 	STS  176,R30
                 ; 0000 00BF TCCR2B=(0<<WGM22) | (0<<CS22) | (1<<CS21) | (1<<CS20);
0000c4 e0e3      	LDI  R30,LOW(3)
0000c5 93e0 00b1 	STS  177,R30
                 ; 0000 00C0 TCNT2=0x83;
0000c7 e8e3      	LDI  R30,LOW(131)
0000c8 93e0 00b2 	STS  178,R30
                 ; 0000 00C1 OCR2A=0x00;
0000ca e0e0      	LDI  R30,LOW(0)
0000cb 93e0 00b3 	STS  179,R30
                 ; 0000 00C2 OCR2B=0x00;
0000cd 93e0 00b4 	STS  180,R30
                 ; 0000 00C3 
                 ; 0000 00C4 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 00C5 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
0000cf 93e0 006e 	STS  110,R30
                 ; 0000 00C6 
                 ; 0000 00C7 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 00C8 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
0000d1 e0e1      	LDI  R30,LOW(1)
0000d2 93e0 006f 	STS  111,R30
                 ; 0000 00C9 
                 ; 0000 00CA 
                 ; 0000 00CB // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 00CC // TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
                 ; 0000 00CD TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (1<<TOIE2);
0000d4 d2b8      	RCALL SUBOPT_0x1
                 ; 0000 00CE 
                 ; 0000 00CF // External Interrupt(s) initialization
                 ; 0000 00D0 // INT0: On
                 ; 0000 00D1 // INT0 Mode: Falling Edge
                 ; 0000 00D2 // INT1: On
                 ; 0000 00D3 // INT1 Mode: Falling Edge
                 ; 0000 00D4 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 00D5 // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 00D6 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 00D7 // EICRA=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
                 ; 0000 00D8 // EIMSK=(1<<INT1) | (1<<INT0);
                 ; 0000 00D9 // EIFR=(1<<INTF1) | (1<<INTF0);
                 ; 0000 00DA // PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
                 ; 0000 00DB 
                 ; 0000 00DC // USART initialization
                 ; 0000 00DD // USART disabled
                 ; 0000 00DE UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0000d5 e0e0      	LDI  R30,LOW(0)
0000d6 93e0 00c1 	STS  193,R30
                 ; 0000 00DF 
                 ; 0000 00E0 // Analog Comparator initialization
                 ; 0000 00E1 // Analog Comparator: Off
                 ; 0000 00E2 // The Analog Comparator's positive input is
                 ; 0000 00E3 // connected to the AIN0 pin
                 ; 0000 00E4 // The Analog Comparator's negative input is
                 ; 0000 00E5 // connected to the AIN1 pin
                 ; 0000 00E6 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000d8 e8e0      	LDI  R30,LOW(128)
0000d9 bfe0      	OUT  0x30,R30
                 ; 0000 00E7 // Digital input buffer on AIN0: On
                 ; 0000 00E8 // Digital input buffer on AIN1: On
                 ; 0000 00E9 DIDR1=(0<<AIN0D) | (0<<AIN1D);
0000da e0e0      	LDI  R30,LOW(0)
0000db 93e0 007f 	STS  127,R30
                 ; 0000 00EA 
                 ; 0000 00EB // ADC initialization
                 ; 0000 00EC // ADC Clock frequency: 1000,000 kHz
                 ; 0000 00ED // ADC Voltage Reference: AREF pin
                 ; 0000 00EE // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00EF // Digital input buffers on ADC0: Off, ADC1: On, ADC2: Off, ADC3: Off
                 ; 0000 00F0 // ADC4: Off, ADC5: Off
                 ; 0000 00F1 // DIDR0=(1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
                 ; 0000 00F2 // ADMUX=ADC_VREF_TYPE;
                 ; 0000 00F3 // ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
                 ; 0000 00F4 // ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
                 ; 0000 00F5 
                 ; 0000 00F6 // ADC initialization
                 ; 0000 00F7 // ADC Clock frequency: 1000,000 kHz
                 ; 0000 00F8 // ADC Voltage Reference: AREF pin
                 ; 0000 00F9 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00FA // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 00FB // ADC4: On, ADC5: On
                 ; 0000 00FC DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
0000dd 93e0 007e 	STS  126,R30
                 ; 0000 00FD ADMUX=ADC_VREF_TYPE;
0000df 93e0 007c 	STS  124,R30
                 ; 0000 00FE ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000e1 e8e3      	LDI  R30,LOW(131)
0000e2 93e0 007a 	STS  122,R30
                 ; 0000 00FF ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000e4 e0e0      	LDI  R30,LOW(0)
0000e5 93e0 007b 	STS  123,R30
                 ; 0000 0100 
                 ; 0000 0101 // SPI initialization
                 ; 0000 0102 // SPI disabled
                 ; 0000 0103 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000e7 bdec      	OUT  0x2C,R30
                 ; 0000 0104 
                 ; 0000 0105 // TWI initialization
                 ; 0000 0106 // TWI disabled
                 ; 0000 0107 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000e8 93e0 00bc 	STS  188,R30
                 ; 0000 0108 
                 ; 0000 0109 // Global enable interrupts
                 ; 0000 010A #asm("sei")
0000ea 9478      	sei
                 ; 0000 010B Uint_data_led1 = 0;
0000eb e0e0      	LDI  R30,LOW(0)
0000ec 93e0 0182 	STS  _Uint_data_led1,R30
0000ee 93e0 0183 	STS  _Uint_data_led1+1,R30
                 ; 0000 010C Uint_data_led2 = 0;
0000f0 93e0 0184 	STS  _Uint_data_led2,R30
0000f2 93e0 0185 	STS  _Uint_data_led2+1,R30
                 ; 0000 010D 
                 ; 0000 010E TIMER2_ON;
0000f4 d298      	RCALL SUBOPT_0x1
                 ; 0000 010F delay_ms(200);
0000f5 d29b      	RCALL SUBOPT_0x2
                 ; 0000 0110 TIMER2_OFF;
0000f6 d29d      	RCALL SUBOPT_0x3
                 ; 0000 0111 delay_ms(200);
0000f7 d299      	RCALL SUBOPT_0x2
                 ; 0000 0112 TIMER2_ON;
0000f8 d294      	RCALL SUBOPT_0x1
                 ; 0000 0113 delay_ms(200);
0000f9 d297      	RCALL SUBOPT_0x2
                 ; 0000 0114 TIMER2_OFF;
0000fa d299      	RCALL SUBOPT_0x3
                 ; 0000 0115 for(Uc_Loop_count = 0; Uc_Loop_count<10;Uc_Loop_count++)
0000fb 2433      	CLR  R3
                 _0xD:
0000fc d29b      	RCALL SUBOPT_0x4
0000fd f430      	BRSH _0xE
                 ; 0000 0116 {
                 ; 0000 0117     AI10_Voltage_buff[Uc_Loop_count] = 0;
0000fe d29c      	RCALL SUBOPT_0x5
0000ff d2a4      	RCALL SUBOPT_0x6
                 ; 0000 0118     AI10_Currrent_buff[Uc_Loop_count] = 0;
000100 d2a8      	RCALL SUBOPT_0x7
000101 d2a2      	RCALL SUBOPT_0x6
                 ; 0000 0119 }
000102 9433      	INC  R3
000103 cff8      	RJMP _0xD
                 _0xE:
                 ; 0000 011A while (1)
                 _0xF:
                 ; 0000 011B       {
                 ; 0000 011C       // Place your code here
                 ; 0000 011D         /* Ghi nhan gia tri dong dien va dien ap vao buffer */
                 ; 0000 011E         AI10_Voltage_buff[Uc_Buff_count] = ADE7753_READ(1,VRMS);
000104 2de4      	MOV  R30,R4
000105 e8a8      	LDI  R26,LOW(_AI10_Voltage_buff)
000106 e0b1      	LDI  R27,HIGH(_AI10_Voltage_buff)
000107 d2aa      	RCALL SUBOPT_0x8
000108 93ff      	PUSH R31
000109 93ef      	PUSH R30
00010a e0e1      	LDI  R30,LOW(1)
00010b 93ea      	ST   -Y,R30
00010c e1e7      	LDI  R30,LOW(23)
00010d 93ea      	ST   -Y,R30
00010e e0a3      	LDI  R26,LOW(3)
00010f d0d4      	RCALL _ADE7753_READ
000110 91af      	POP  R26
000111 91bf      	POP  R27
000112 d2a5      	RCALL SUBOPT_0x9
                 ; 0000 011F         AI10_Currrent_buff[Uc_Buff_count] = ADE7753_READ(1,IRMS);
000113 2de4      	MOV  R30,R4
000114 e9ac      	LDI  R26,LOW(_AI10_Currrent_buff)
000115 e0b1      	LDI  R27,HIGH(_AI10_Currrent_buff)
000116 d29b      	RCALL SUBOPT_0x8
000117 93ff      	PUSH R31
000118 93ef      	PUSH R30
000119 e0e1      	LDI  R30,LOW(1)
00011a 93ea      	ST   -Y,R30
00011b e1e6      	LDI  R30,LOW(22)
00011c 93ea      	ST   -Y,R30
00011d e0a3      	LDI  R26,LOW(3)
00011e d0c5      	RCALL _ADE7753_READ
00011f 91af      	POP  R26
000120 91bf      	POP  R27
000121 d296      	RCALL SUBOPT_0x9
                 ; 0000 0120         Uc_Buff_count++;
000122 9443      	INC  R4
                 ; 0000 0121         if(Uc_Buff_count > 9)
000123 e0e9      	LDI  R30,LOW(9)
000124 15e4      	CP   R30,R4
000125 f408      	BRSH _0x12
                 ; 0000 0122         {
                 ; 0000 0123             Uc_Buff_count = 0;
000126 2444      	CLR  R4
                 ; 0000 0124         }
                 ; 0000 0125 
                 ; 0000 0126         for(Uc_Loop_count = 0; Uc_Loop_count<10;Uc_Loop_count++)
                 _0x12:
000127 2433      	CLR  R3
                 _0x14:
000128 d26f      	RCALL SUBOPT_0x4
000129 f448      	BRSH _0x15
                 ; 0000 0127         {
                 ; 0000 0128             AI10_Temp_buff[Uc_Loop_count] = AI10_Voltage_buff[Uc_Loop_count];
00012a d290      	RCALL SUBOPT_0xA
00012b d286      	RCALL SUBOPT_0x8
00012c 010f      	MOVW R0,R30
00012d d26d      	RCALL SUBOPT_0x5
00012e d39a      	RCALL __GETW1P
00012f 01d0      	MOVW R26,R0
000130 d287      	RCALL SUBOPT_0x9
                 ; 0000 0129         }
000131 9433      	INC  R3
000132 cff5      	RJMP _0x14
                 _0x15:
                 ; 0000 012A         for(Uc_Loop_count = 0; Uc_Loop_count<10;Uc_Loop_count++)
000133 2433      	CLR  R3
                 _0x17:
000134 d263      	RCALL SUBOPT_0x4
000135 f538      	BRSH _0x18
                 ; 0000 012B         {
                 ; 0000 012C             for(Uc_Loop2_count = Uc_Loop_count; Uc_Loop2_count<10;Uc_Loop2_count++)
000136 2c63      	MOV  R6,R3
                 _0x1A:
000137 e0ea      	LDI  R30,LOW(10)
000138 166e      	CP   R6,R30
000139 f508      	BRSH _0x1B
                 ; 0000 012D             {
                 ; 0000 012E                 if(AI10_Temp_buff[Uc_Loop_count] > AI10_Temp_buff[Uc_Loop2_count] )
00013a d280      	RCALL SUBOPT_0xA
00013b d283      	RCALL SUBOPT_0xB
00013c 900d      	LD   R0,X+
00013d 901c      	LD   R1,X
00013e d286      	RCALL SUBOPT_0xC
00013f d389      	RCALL __GETW1P
000140 15e0      	CP   R30,R0
000141 05f1      	CPC  R31,R1
000142 f4b0      	BRSH _0x1C
                 ; 0000 012F                 {
                 ; 0000 0130                     Ulong_tmp = AI10_Temp_buff[Uc_Loop_count];
000143 d277      	RCALL SUBOPT_0xA
000144 d27a      	RCALL SUBOPT_0xB
000145 d383      	RCALL __GETW1P
000146 d282      	RCALL SUBOPT_0xD
000147 d284      	RCALL SUBOPT_0xE
                 ; 0000 0131                     AI10_Temp_buff[Uc_Loop_count] = AI10_Temp_buff[Uc_Loop2_count];
000148 d272      	RCALL SUBOPT_0xA
000149 d268      	RCALL SUBOPT_0x8
00014a 010f      	MOVW R0,R30
00014b d279      	RCALL SUBOPT_0xC
00014c d37c      	RCALL __GETW1P
00014d 01d0      	MOVW R26,R0
00014e d269      	RCALL SUBOPT_0x9
                 ; 0000 0132                     AI10_Temp_buff[Uc_Loop2_count] = Ulong_tmp;
00014f 2de6      	MOV  R30,R6
000150 eba0      	LDI  R26,LOW(_AI10_Temp_buff)
000151 e0b1      	LDI  R27,HIGH(_AI10_Temp_buff)
000152 d25f      	RCALL SUBOPT_0x8
000153 91a0 01c4 	LDS  R26,_Ulong_tmp
000155 91b0 01c5 	LDS  R27,_Ulong_tmp+1
000157 83a0      	STD  Z+0,R26
000158 83b1      	STD  Z+1,R27
                 ; 0000 0133                 }
                 ; 0000 0134             }
                 _0x1C:
000159 9463      	INC  R6
00015a cfdc      	RJMP _0x1A
                 _0x1B:
                 ; 0000 0135         }
00015b 9433      	INC  R3
00015c cfd7      	RJMP _0x17
                 _0x18:
                 ; 0000 0136 
                 ; 0000 0137         Ulong_tmp = 0;
00015d d277      	RCALL SUBOPT_0xF
                 ; 0000 0138         for(Uc_Loop_count = 2; Uc_Loop_count<8;Uc_Loop_count++)
00015e e0e2      	LDI  R30,LOW(2)
00015f 2e3e      	MOV  R3,R30
                 _0x1E:
000160 e0e8      	LDI  R30,LOW(8)
000161 163e      	CP   R3,R30
000162 f428      	BRSH _0x1F
                 ; 0000 0139         {
                 ; 0000 013A             Ulong_tmp += AI10_Temp_buff[Uc_Loop_count];
000163 d257      	RCALL SUBOPT_0xA
000164 d25a      	RCALL SUBOPT_0xB
000165 d279      	RCALL SUBOPT_0x10
                 ; 0000 013B         }
000166 9433      	INC  R3
000167 cff8      	RJMP _0x1E
                 _0x1F:
                 ; 0000 013C         Ulong_tmp /= 6;
000168 d282      	RCALL SUBOPT_0x11
                +
000169 e0e6     +LDI R30 , LOW ( 0x6 )
00016a e0f0     +LDI R31 , HIGH ( 0x6 )
00016b e060     +LDI R22 , BYTE3 ( 0x6 )
00016c e070     +LDI R23 , BYTE4 ( 0x6 )
                 	__GETD1N 0x6
00016d d286      	RCALL SUBOPT_0x12
                 ; 0000 013D         Uint_data_led1 = (unsigned int) Ulong_tmp;
00016e 93e0 0182 	STS  _Uint_data_led1,R30
000170 93f0 0183 	STS  _Uint_data_led1+1,R31
                 ; 0000 013E 
                 ; 0000 013F         // Ulong_tmp = 0;
                 ; 0000 0140         // for(Uc_Loop_count = 0; Uc_Loop_count<10;Uc_Loop_count++)
                 ; 0000 0141         // {
                 ; 0000 0142         //     Ulong_tmp += AI10_Voltage_buff[Uc_Loop_count];
                 ; 0000 0143         // }
                 ; 0000 0144         // Ulong_tmp /= 10;
                 ; 0000 0145         // Uint_data_led1 = (unsigned int) Ulong_tmp;
                 ; 0000 0146 
                 ; 0000 0147         Ulong_tmp = 0;
000172 d262      	RCALL SUBOPT_0xF
                 ; 0000 0148         for(Uc_Loop_count = 0; Uc_Loop_count<10;Uc_Loop_count++)
000173 2433      	CLR  R3
                 _0x21:
000174 d223      	RCALL SUBOPT_0x4
000175 f420      	BRSH _0x22
                 ; 0000 0149         {
                 ; 0000 014A             Ulong_tmp += AI10_Currrent_buff[Uc_Loop_count];
000176 d232      	RCALL SUBOPT_0x7
000177 d267      	RCALL SUBOPT_0x10
                 ; 0000 014B         }
000178 9433      	INC  R3
000179 cffa      	RJMP _0x21
                 _0x22:
                 ; 0000 014C         Ulong_tmp /= 10;
00017a d270      	RCALL SUBOPT_0x11
                +
00017b e0ea     +LDI R30 , LOW ( 0xA )
00017c e0f0     +LDI R31 , HIGH ( 0xA )
00017d e060     +LDI R22 , BYTE3 ( 0xA )
00017e e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
00017f d274      	RCALL SUBOPT_0x12
                 ; 0000 014D         Uint_data_led2 = (unsigned int) Ulong_tmp;
000180 93e0 0184 	STS  _Uint_data_led2,R30
000182 93f0 0185 	STS  _Uint_data_led2+1,R31
                 ; 0000 014E 
                 ; 0000 014F         /*
                 ; 0000 0150         *   Doc Current_Set
                 ; 0000 0151         *   So sanh va dua ra canh bao
                 ; 0000 0152         */
                 ; 0000 0153         Ulong_tmp = read_adc(1);
000184 e0a1      	LDI  R26,LOW(1)
000185 def4      	RCALL _read_adc
000186 d242      	RCALL SUBOPT_0xD
000187 d244      	RCALL SUBOPT_0xE
                 ; 0000 0154         Ulong_tmp = Ulong_tmp*(CURRENT_SET_MAX-CURRENT_SET_MIN)*100/1023 + CURRENT_SET_MIN*100;
000188 91e0 01c4 	LDS  R30,_Ulong_tmp
00018a 91f0 01c5 	LDS  R31,_Ulong_tmp+1
00018c 9160 01c6 	LDS  R22,_Ulong_tmp+2
00018e 9170 01c7 	LDS  R23,_Ulong_tmp+3
                +
000190 e0ad     +LDI R26 , LOW ( 0xD )
000191 e0b0     +LDI R27 , HIGH ( 0xD )
000192 e080     +LDI R24 , BYTE3 ( 0xD )
000193 e090     +LDI R25 , BYTE4 ( 0xD )
                 	__GETD2N 0xD
000194 d2d9      	RCALL __MULD12U
                +
000195 e6a4     +LDI R26 , LOW ( 0x64 )
000196 e0b0     +LDI R27 , HIGH ( 0x64 )
000197 e080     +LDI R24 , BYTE3 ( 0x64 )
000198 e090     +LDI R25 , BYTE4 ( 0x64 )
                 	__GETD2N 0x64
000199 d2d4      	RCALL __MULD12U
00019a 01df      	MOVW R26,R30
00019b 01cb      	MOVW R24,R22
                +
00019c efef     +LDI R30 , LOW ( 0x3FF )
00019d e0f3     +LDI R31 , HIGH ( 0x3FF )
00019e e060     +LDI R22 , BYTE3 ( 0x3FF )
00019f e070     +LDI R23 , BYTE4 ( 0x3FF )
                 	__GETD1N 0x3FF
0001a0 d300      	RCALL __DIVD21U
                +
0001a1 54e4     +SUBI R30 , LOW ( - 700 )
0001a2 4ffd     +SBCI R31 , HIGH ( - 700 )
0001a3 4f6f     +SBCI R22 , BYTE3 ( - 700 )
0001a4 4f7f     +SBCI R23 , BYTE4 ( - 700 )
                 	__ADDD1N 700
0001a5 d226      	RCALL SUBOPT_0xE
                 ; 0000 0155         //Uint_data_led1 = Ulong_tmp;
                 ; 0000 0156         if(Ulong_tmp < Uint_data_led2)
0001a6 91e0 0184 	LDS  R30,_Uint_data_led2
0001a8 91f0 0185 	LDS  R31,_Uint_data_led2+1
0001aa d240      	RCALL SUBOPT_0x11
0001ab d21d      	RCALL SUBOPT_0xD
0001ac d320      	RCALL __CPD21
0001ad f410      	BRSH _0x23
                 ; 0000 0157         {
                 ; 0000 0158             Bit_warning = 1;
0001ae 9af1      	SBI  0x1E,1
                 ; 0000 0159         }
                 ; 0000 015A         else    Bit_warning = 0;
0001af c001      	RJMP _0x26
                 _0x23:
0001b0 98f1      	CBI  0x1E,1
                 ; 0000 015B 
                 ; 0000 015C         if(Bit_warning)
                 _0x26:
0001b1 9bf1      	SBIS 0x1E,1
0001b2 c008      	RJMP _0x29
                 ; 0000 015D         {
                 ; 0000 015E             TIMER2_ON;
0001b3 d1d9      	RCALL SUBOPT_0x1
                 ; 0000 015F             delay_ms(100);
0001b4 e6a4      	LDI  R26,LOW(100)
0001b5 e0b0      	LDI  R27,0
0001b6 d297      	RCALL _delay_ms
                 ; 0000 0160             TIMER2_OFF;
0001b7 d1dc      	RCALL SUBOPT_0x3
                 ; 0000 0161             delay_ms(100);
0001b8 e6a4      	LDI  R26,LOW(100)
0001b9 e0b0      	LDI  R27,0
0001ba c002      	RJMP _0x2C
                 ; 0000 0162         }
                 ; 0000 0163         else    delay_ms(400);
                 _0x29:
0001bb e9a0      	LDI  R26,LOW(400)
0001bc e0b1      	LDI  R27,HIGH(400)
                 _0x2C:
0001bd d290      	RCALL _delay_ms
                 ; 0000 0164       }
0001be cf45      	RJMP _0xF
                 ; 0000 0165 }
                 _0x2B:
0001bf cfff      	RJMP _0x2B
                 ; .FEND
                 ;#include "ADE7753.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "delay.h"
                 ;#include "scan_led.h"
                 ;
                 ;
                 ;void    SPI_7753_SEND(unsigned char data)
                 ; 0001 0007 {
                 
                 	.CSEG
                 _SPI_7753_SEND:
                 ; .FSTART _SPI_7753_SEND
                 ; 0001 0008     unsigned char   cnt;
                 ; 0001 0009     unsigned char   tmp = data;
                 ; 0001 000A 
                 ; 0001 000B     for(cnt = 0;cnt < 8; cnt++)
0001c0 93aa      	ST   -Y,R26
0001c1 d312      	RCALL __SAVELOCR2
                 ;	data -> Y+2
                 ;	cnt -> R17
                 ;	tmp -> R16
0001c2 810a      	LDD  R16,Y+2
0001c3 e010      	LDI  R17,LOW(0)
                 _0x20004:
0001c4 3018      	CPI  R17,8
0001c5 f460      	BRSH _0x20005
                 ; 0001 000C     {
                 ; 0001 000D         if((tmp & 0x80) == 0x80)   SPI_MOSI_HIGHT;
0001c6 2fe0      	MOV  R30,R16
0001c7 78e0      	ANDI R30,LOW(0x80)
0001c8 38e0      	CPI  R30,LOW(0x80)
0001c9 f411      	BRNE _0x20006
0001ca 9a42      	SBI  0x8,2
                 ; 0001 000E         else SPI_MOSI_LOW;
0001cb c001      	RJMP _0x20009
                 _0x20006:
0001cc 9842      	CBI  0x8,2
                 ; 0001 000F 
                 ; 0001 0010         SPI_SCK_HIGHT;
                 _0x20009:
0001cd d22d      	RCALL SUBOPT_0x13
                 ; 0001 0011         delay_us(50);
                 ; 0001 0012         SPI_SCK_LOW;
0001ce d231      	RCALL SUBOPT_0x14
                 ; 0001 0013         delay_us(50);
                 ; 0001 0014         tmp <<= 1;
0001cf 0f00      	LSL  R16
                 ; 0001 0015     }
0001d0 5f1f      	SUBI R17,-1
0001d1 cff2      	RJMP _0x20004
                 _0x20005:
                 ; 0001 0016 }
0001d2 d306      	RCALL __LOADLOCR2
0001d3 c1b1      	RJMP _0x2000001
                 ; .FEND
                 ;
                 ;unsigned char    SPI_7753_RECEIVE(void)
                 ; 0001 0019 {
                 _SPI_7753_RECEIVE:
                 ; .FSTART _SPI_7753_RECEIVE
                 ; 0001 001A     unsigned char cnt;
                 ; 0001 001B     unsigned char data;
                 ; 0001 001C     data = 0;
0001d4 d2ff      	RCALL __SAVELOCR2
                 ;	cnt -> R17
                 ;	data -> R16
0001d5 e000      	LDI  R16,LOW(0)
                 ; 0001 001D     for(cnt = 0;cnt < 8; cnt++)
0001d6 e010      	LDI  R17,LOW(0)
                 _0x20011:
0001d7 3018      	CPI  R17,8
0001d8 f438      	BRSH _0x20012
                 ; 0001 001E     {
                 ; 0001 001F         SPI_SCK_HIGHT;
0001d9 d221      	RCALL SUBOPT_0x13
                 ; 0001 0020         delay_us(50);
                 ; 0001 0021         if(SPI_MISO_HIGHT)
0001da 9933      	SBIC 0x6,3
                 ; 0001 0022         {
                 ; 0001 0023             data += 1;
0001db 5f0f      	SUBI R16,-LOW(1)
                 ; 0001 0024         }
                 ; 0001 0025         data <<= 1;
0001dc 0f00      	LSL  R16
                 ; 0001 0026         SPI_SCK_LOW;
0001dd d222      	RCALL SUBOPT_0x14
                 ; 0001 0027         delay_us(50);
                 ; 0001 0028     }
0001de 5f1f      	SUBI R17,-1
0001df cff7      	RJMP _0x20011
                 _0x20012:
                 ; 0001 0029     return data;
0001e0 2fe0      	MOV  R30,R16
0001e1 9109      	LD   R16,Y+
0001e2 9119      	LD   R17,Y+
0001e3 9508      	RET
                 ; 0001 002A }
                 ; .FEND
                 ;
                 ;void    ADE7753_WRITE(unsigned char IC_CS,unsigned char addr,unsigned char num_data,unsigned char data_1,unsigned char d ...
                 ; 0001 002D {
                 ; 0001 002E     unsigned char data[4];
                 ; 0001 002F     unsigned char   i;
                 ; 0001 0030     data[0] = data_1;
                 ;	IC_CS -> Y+10
                 ;	addr -> Y+9
                 ;	num_data -> Y+8
                 ;	data_1 -> Y+7
                 ;	data_2 -> Y+6
                 ;	data_3 -> Y+5
                 ;	data -> Y+1
                 ;	i -> R17
                 ; 0001 0031     data[1] = data_2;
                 ; 0001 0032     data[2] = data_3;
                 ; 0001 0033 
                 ; 0001 0034     switch (IC_CS)
                 ; 0001 0035     {
                 ; 0001 0036         case 1:
                 ; 0001 0037         {
                 ; 0001 0038             PHASE_1_ON;
                 ; 0001 0039             PHASE_2_OFF;
                 ; 0001 003A             PHASE_3_OFF;
                 ; 0001 003B             break;
                 ; 0001 003C         }
                 ; 0001 003D         case 2:
                 ; 0001 003E         {
                 ; 0001 003F             PHASE_1_OFF;
                 ; 0001 0040             PHASE_2_ON;
                 ; 0001 0041             PHASE_3_OFF;
                 ; 0001 0042             break;
                 ; 0001 0043         }
                 ; 0001 0044         case 3:
                 ; 0001 0045         {
                 ; 0001 0046             PHASE_1_OFF;
                 ; 0001 0047             PHASE_2_OFF;
                 ; 0001 0048             PHASE_3_ON;
                 ; 0001 0049             break;
                 ; 0001 004A         }
                 ; 0001 004B     }
                 ; 0001 004C     addr &= 0x3F;
                 ; 0001 004D     addr |= 0x80;
                 ; 0001 004E     delay_us(100);
                 ; 0001 004F     SPI_7753_SEND(addr);
                 ; 0001 0050     delay_us(100);
                 ; 0001 0051     for(i=0;i<num_data;i++)    SPI_7753_SEND(data[i]);
                 ; 0001 0052 delay_us(100);
                 ; 0001 0053     PHASE_1_OFF;
                 ; 0001 0054     PHASE_2_OFF;
                 ; 0001 0055     PHASE_3_OFF;
                 ; 0001 0056 }
                 ;unsigned int    ADE7753_READ(unsigned char IC_CS,unsigned char addr,unsigned char num_data)
                 ; 0001 0058 {
                 _ADE7753_READ:
                 ; .FSTART _ADE7753_READ
                 ; 0001 0059     unsigned char   i;
                 ; 0001 005A     unsigned char   data[4];
                 ; 0001 005B     unsigned long int res;
                 ; 0001 005C     for(i=0;i<4;i++)    data[i] = 0;
0001e4 93aa      	ST   -Y,R26
0001e5 9728      	SBIW R28,8
0001e6 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+11
                 ;	addr -> Y+10
                 ;	num_data -> Y+9
                 ;	i -> R17
                 ;	data -> Y+5
                 ;	res -> Y+1
0001e7 e010      	LDI  R17,LOW(0)
                 _0x2003A:
0001e8 3014      	CPI  R17,4
0001e9 f430      	BRSH _0x2003B
0001ea d21a      	RCALL SUBOPT_0x15
0001eb d21e      	RCALL SUBOPT_0x16
0001ec e0e0      	LDI  R30,LOW(0)
0001ed 93ec      	ST   X,R30
0001ee 5f1f      	SUBI R17,-1
0001ef cff8      	RJMP _0x2003A
                 _0x2003B:
                 ; 0001 005D switch (IC_CS)
0001f0 85eb      	LDD  R30,Y+11
0001f1 d21b      	RCALL SUBOPT_0x17
                 ; 0001 005E     {
                 ; 0001 005F         case 1:
0001f2 f421      	BRNE _0x2003F
                 ; 0001 0060         {
                 ; 0001 0061             PHASE_1_ON;
0001f3 9845      	CBI  0x8,5
                 ; 0001 0062             PHASE_2_OFF;
0001f4 9a28      	SBI  0x5,0
                 ; 0001 0063             PHASE_3_OFF;
0001f5 9a28      	SBI  0x5,0
                 ; 0001 0064             break;
0001f6 c00b      	RJMP _0x2003E
                 ; 0001 0065         }
                 ; 0001 0066         case 2:
                 _0x2003F:
0001f7 d21a      	RCALL SUBOPT_0x18
0001f8 f421      	BRNE _0x20046
                 ; 0001 0067         {
                 ; 0001 0068             PHASE_1_OFF;
0001f9 9a45      	SBI  0x8,5
                 ; 0001 0069             PHASE_2_ON;
0001fa 9828      	CBI  0x5,0
                 ; 0001 006A             PHASE_3_OFF;
0001fb 9a28      	SBI  0x5,0
                 ; 0001 006B             break;
0001fc c005      	RJMP _0x2003E
                 ; 0001 006C         }
                 ; 0001 006D         case 3:
                 _0x20046:
0001fd d218      	RCALL SUBOPT_0x19
0001fe f419      	BRNE _0x2003E
                 ; 0001 006E         {
                 ; 0001 006F             PHASE_1_OFF;
0001ff 9a45      	SBI  0x8,5
                 ; 0001 0070             PHASE_2_OFF;
000200 9a28      	SBI  0x5,0
                 ; 0001 0071             PHASE_3_ON;
000201 9828      	CBI  0x5,0
                 ; 0001 0072             break;
                 ; 0001 0073         }
                 ; 0001 0074     }
                 _0x2003E:
                 ; 0001 0075     delay_us(100);
000202 d217      	RCALL SUBOPT_0x1A
                 ; 0001 0076     addr &= 0x3F;
000203 85ea      	LDD  R30,Y+10
000204 73ef      	ANDI R30,LOW(0x3F)
000205 87ea      	STD  Y+10,R30
                 ; 0001 0077     SPI_7753_SEND(addr);
000206 85aa      	LDD  R26,Y+10
000207 dfb8      	RCALL _SPI_7753_SEND
                 ; 0001 0078     delay_us(100);
000208 d211      	RCALL SUBOPT_0x1A
                 ; 0001 0079     for(i=0;i<num_data;i++) data[i] = SPI_7753_RECEIVE();
000209 e010      	LDI  R17,LOW(0)
                 _0x20055:
00020a 85e9      	LDD  R30,Y+9
00020b 171e      	CP   R17,R30
00020c f458      	BRSH _0x20056
00020d d1f7      	RCALL SUBOPT_0x15
00020e 0fea      	ADD  R30,R26
00020f 1ffb      	ADC  R31,R27
000210 93ff      	PUSH R31
000211 93ef      	PUSH R30
000212 dfc1      	RCALL _SPI_7753_RECEIVE
000213 91af      	POP  R26
000214 91bf      	POP  R27
000215 93ec      	ST   X,R30
000216 5f1f      	SUBI R17,-1
000217 cff2      	RJMP _0x20055
                 _0x20056:
                 ; 0001 007A delay_us(100);
000218 d201      	RCALL SUBOPT_0x1A
                 ; 0001 007B     PHASE_1_OFF;
000219 9a45      	SBI  0x8,5
                 ; 0001 007C     PHASE_2_OFF;
00021a 9a28      	SBI  0x5,0
                 ; 0001 007D     PHASE_3_OFF;
00021b 9a28      	SBI  0x5,0
                 ; 0001 007E     res = 0;
00021c e0e0      	LDI  R30,LOW(0)
                +
00021d 83e9     +STD Y + 1 , R30
00021e 83ea     +STD Y + 1 + 1 , R30
00021f 83eb     +STD Y + 1 + 2 , R30
000220 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
                 ; 0001 007F     for(i=0;i<num_data;i++)
000221 e010      	LDI  R17,LOW(0)
                 _0x2005E:
000222 85e9      	LDD  R30,Y+9
000223 171e      	CP   R17,R30
000224 f470      	BRSH _0x2005F
                 ; 0001 0080     {
                 ; 0001 0081         res <<= 8;
000225 d1f9      	RCALL SUBOPT_0x1B
000226 e0e8      	LDI  R30,LOW(8)
000227 d235      	RCALL __LSLD12
000228 d1fb      	RCALL SUBOPT_0x1C
                 ; 0001 0082         res += data[i];
000229 d1db      	RCALL SUBOPT_0x15
00022a d1df      	RCALL SUBOPT_0x16
00022b 91ec      	LD   R30,X
00022c e0f0      	LDI  R31,0
00022d d1f1      	RCALL SUBOPT_0x1B
00022e d23a      	RCALL __CWD1
00022f d228      	RCALL __ADDD12
000230 d1f3      	RCALL SUBOPT_0x1C
                 ; 0001 0083     }
000231 5f1f      	SUBI R17,-1
000232 cfef      	RJMP _0x2005E
                 _0x2005F:
                 ; 0001 0084     if(addr == 0x16)    return  (res/448);
000233 85aa      	LDD  R26,Y+10
000234 31a6      	CPI  R26,LOW(0x16)
000235 f439      	BRNE _0x20060
000236 d1e8      	RCALL SUBOPT_0x1B
                +
000237 ece0     +LDI R30 , LOW ( 0x1C0 )
000238 e0f1     +LDI R31 , HIGH ( 0x1C0 )
000239 e060     +LDI R22 , BYTE3 ( 0x1C0 )
00023a e070     +LDI R23 , BYTE4 ( 0x1C0 )
                 	__GETD1N 0x1C0
00023b d265      	RCALL __DIVD21U
00023c c013      	RJMP _0x2000002
                 ; 0001 0085     if(addr == 0x17)    return  (res/2060);
                 _0x20060:
00023d 85aa      	LDD  R26,Y+10
00023e 31a7      	CPI  R26,LOW(0x17)
00023f f439      	BRNE _0x20061
000240 d1de      	RCALL SUBOPT_0x1B
                +
000241 e0ec     +LDI R30 , LOW ( 0x80C )
000242 e0f8     +LDI R31 , HIGH ( 0x80C )
000243 e060     +LDI R22 , BYTE3 ( 0x80C )
000244 e070     +LDI R23 , BYTE4 ( 0x80C )
                 	__GETD1N 0x80C
000245 d25b      	RCALL __DIVD21U
000246 c009      	RJMP _0x2000002
                 ; 0001 0086     return (data[2] + data[1] + data[0]);
                 _0x20061:
000247 81af      	LDD  R26,Y+7
000248 27bb      	CLR  R27
000249 81ee      	LDD  R30,Y+6
00024a e0f0      	LDI  R31,0
00024b d1be      	RCALL SUBOPT_0x16
00024c 81ed      	LDD  R30,Y+5
00024d e0f0      	LDI  R31,0
00024e 0fea      	ADD  R30,R26
00024f 1ffb      	ADC  R31,R27
                 _0x2000002:
000250 8118      	LDD  R17,Y+0
000251 962c      	ADIW R28,12
000252 9508      	RET
                 ; 0001 0087 }
                 ; .FEND
                 ;
                 ;void    ADE7753_INIT(void)
                 ; 0001 008A {
                 ; 0001 008B     ADE7753_WRITE(1,MODE,0x00,0x00,0x00);
                 ; 0001 008C     ADE7753_WRITE(1,SAGLVL,0X2a,0X00,0X00);
                 ; 0001 008D     ADE7753_WRITE(1,SAGCYC,0XFF,0X00,0X00);
                 ; 0001 008E }
                 ;#include "scan_led.h"
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;unsigned char   Uc_led_count = 1;
                 
                 	.DSEG
                 ;unsigned char   Uc_led_data = 0;
                 ;unsigned int    Uint_data_led1 = 0;
                 ;unsigned int    Uint_data_led2 = 0;
                 ;unsigned int    Uint_data_led3 = 0;
                 ;
                 ;/* Day du lieu quet led qua duong spi_software
                 ;Co thẻ day tu 1 den 3 byte du lieu.
                 ;Du lieu sau khi day ra day du moi tien hanh xuat du lieu
                 ;num_bytes : so byte duoc day ra
                 ;data_first : du lieu dau tien
                 ;data_second: du lieu thu 2
                 ;data_third ; du lieu thu 3
                 ;*/
                 ;void    SEND_DATA_LED(unsigned char num_bytes,unsigned char  byte_first,unsigned char  byte_second,unsigned char  byte_t ...
                 ; 0002 0013 {
                 
                 	.CSEG
                 _SEND_DATA_LED:
                 ; .FSTART _SEND_DATA_LED
                 ; 0002 0014     unsigned char   i;
                 ; 0002 0015     unsigned char   data[4];
                 ; 0002 0016     for(i=0;i<4;i++)    data[i] = 0;
000253 93aa      	ST   -Y,R26
000254 9724      	SBIW R28,4
000255 931a      	ST   -Y,R17
                 ;	num_bytes -> Y+8
                 ;	byte_first -> Y+7
                 ;	byte_second -> Y+6
                 ;	byte_third -> Y+5
                 ;	i -> R17
                 ;	data -> Y+1
000256 e010      	LDI  R17,LOW(0)
                 _0x40005:
000257 3014      	CPI  R17,4
000258 f428      	BRSH _0x40006
000259 d1cf      	RCALL SUBOPT_0x1D
00025a e0e0      	LDI  R30,LOW(0)
00025b 93ec      	ST   X,R30
00025c 5f1f      	SUBI R17,-1
00025d cff9      	RJMP _0x40005
                 _0x40006:
                 ; 0002 0017 data[0] = byte_first;
00025e 81ef      	LDD  R30,Y+7
00025f 83e9      	STD  Y+1,R30
                 ; 0002 0018     data[1] = byte_second;
000260 81ee      	LDD  R30,Y+6
000261 83ea      	STD  Y+2,R30
                 ; 0002 0019     data[2] = byte_third;
000262 81ed      	LDD  R30,Y+5
000263 83eb      	STD  Y+3,R30
                 ; 0002 001A 
                 ; 0002 001B     for(i=0;i<(num_bytes - 1);i++)    SPI_SENDBYTE(data[i],0);
000264 e010      	LDI  R17,LOW(0)
                 _0x40008:
000265 85e8      	LDD  R30,Y+8
000266 e0f0      	LDI  R31,0
000267 9731      	SBIW R30,1
000268 2fa1      	MOV  R26,R17
000269 e0b0      	LDI  R27,0
00026a 17ae      	CP   R26,R30
00026b 07bf      	CPC  R27,R31
00026c f43c      	BRGE _0x40009
00026d d1bb      	RCALL SUBOPT_0x1D
00026e 91ec      	LD   R30,X
00026f 93ea      	ST   -Y,R30
000270 e0a0      	LDI  R26,LOW(0)
000271 d0fa      	RCALL _SPI_SENDBYTE
000272 5f1f      	SUBI R17,-1
000273 cff1      	RJMP _0x40008
                 _0x40009:
                 ; 0002 001C SPI_SENDBYTE(data[i],1);
000274 d1b4      	RCALL SUBOPT_0x1D
000275 91ec      	LD   R30,X
000276 93ea      	ST   -Y,R30
000277 e0a1      	LDI  R26,LOW(1)
000278 d0f3      	RCALL _SPI_SENDBYTE
                 ; 0002 001D }
000279 8118      	LDD  R17,Y+0
00027a 9629      	ADIW R28,9
00027b 9508      	RET
                 ; .FEND
                 ;
                 ;void    SELECT_LED(unsigned char num_led,unsigned char    data)
                 ; 0002 0020 {
                 _SELECT_LED:
                 ; .FSTART _SELECT_LED
                 ; 0002 0021     unsigned char   byte1,byte2,byte3;
                 ; 0002 0022     byte1 = 0;
00027c 93aa      	ST   -Y,R26
00027d d254      	RCALL __SAVELOCR4
                 ;	num_led -> Y+5
                 ;	data -> Y+4
                 ;	byte1 -> R17
                 ;	byte2 -> R16
                 ;	byte3 -> R19
00027e e010      	LDI  R17,LOW(0)
                 ; 0002 0023     byte2 = 0;
00027f e000      	LDI  R16,LOW(0)
                 ; 0002 0024     byte3 = 0;
000280 e030      	LDI  R19,LOW(0)
                 ; 0002 0025     switch(num_led)
000281 81ed      	LDD  R30,Y+5
000282 d18a      	RCALL SUBOPT_0x17
                 ; 0002 0026     {
                 ; 0002 0027         case    1:
000283 f419      	BRNE _0x4000D
                 ; 0002 0028         {
                 ; 0002 0029             byte3 = 0x01;
000284 e031      	LDI  R19,LOW(1)
                 ; 0002 002A             byte2 = 0x01;
000285 e001      	LDI  R16,LOW(1)
                 ; 0002 002B             break;
000286 c04a      	RJMP _0x4000C
                 ; 0002 002C         }
                 ; 0002 002D         case    2:
                 _0x4000D:
000287 d18a      	RCALL SUBOPT_0x18
000288 f419      	BRNE _0x4000E
                 ; 0002 002E         {
                 ; 0002 002F             byte3 = 0x02;
000289 e032      	LDI  R19,LOW(2)
                 ; 0002 0030             byte2 = 0x02;
00028a e002      	LDI  R16,LOW(2)
                 ; 0002 0031             //byte1 = 0x04;
                 ; 0002 0032             break;
00028b c045      	RJMP _0x4000C
                 ; 0002 0033         }
                 ; 0002 0034         case    3:
                 _0x4000E:
00028c d189      	RCALL SUBOPT_0x19
00028d f421      	BRNE _0x4000F
                 ; 0002 0035         {
                 ; 0002 0036             byte3 = 0x04;
00028e e034      	LDI  R19,LOW(4)
                 ; 0002 0037             byte2 = 0x04;
00028f e004      	LDI  R16,LOW(4)
                 ; 0002 0038             byte1 = 0x40;
000290 e410      	LDI  R17,LOW(64)
                 ; 0002 0039             break;
000291 c03f      	RJMP _0x4000C
                 ; 0002 003A         }
                 ; 0002 003B         case    4:
                 _0x4000F:
000292 30e4      	CPI  R30,LOW(0x4)
000293 e0a0      	LDI  R26,HIGH(0x4)
000294 07fa      	CPC  R31,R26
000295 f419      	BRNE _0x40010
                 ; 0002 003C         {
                 ; 0002 003D             byte3 = 0x08;
000296 e038      	LDI  R19,LOW(8)
                 ; 0002 003E             byte2 = 0x08;
000297 e008      	LDI  R16,LOW(8)
                 ; 0002 003F             break;
000298 c038      	RJMP _0x4000C
                 ; 0002 0040         }
                 ; 0002 0041         case    5:
                 _0x40010:
000299 30e5      	CPI  R30,LOW(0x5)
00029a e0a0      	LDI  R26,HIGH(0x5)
00029b 07fa      	CPC  R31,R26
00029c f411      	BRNE _0x40011
                 ; 0002 0042         {
                 ; 0002 0043             byte3 = 0x40;
00029d e430      	LDI  R19,LOW(64)
                 ; 0002 0044             byte2 = 0x80;
00029e c031      	RJMP _0x4003E
                 ; 0002 0045             break;
                 ; 0002 0046         }
                 ; 0002 0047         case    6:
                 _0x40011:
00029f 30e6      	CPI  R30,LOW(0x6)
0002a0 e0a0      	LDI  R26,HIGH(0x6)
0002a1 07fa      	CPC  R31,R26
0002a2 f421      	BRNE _0x40012
                 ; 0002 0048         {
                 ; 0002 0049             byte3 = 0x20;
0002a3 e230      	LDI  R19,LOW(32)
                 ; 0002 004A             byte2 = 0x40;
0002a4 e400      	LDI  R16,LOW(64)
                 ; 0002 004B             byte1 = 0x40;
0002a5 e410      	LDI  R17,LOW(64)
                 ; 0002 004C             break;
0002a6 c02a      	RJMP _0x4000C
                 ; 0002 004D         }
                 ; 0002 004E         case    7:
                 _0x40012:
0002a7 30e7      	CPI  R30,LOW(0x7)
0002a8 e0a0      	LDI  R26,HIGH(0x7)
0002a9 07fa      	CPC  R31,R26
0002aa f419      	BRNE _0x40013
                 ; 0002 004F         {
                 ; 0002 0050             byte3 = 0x10;
0002ab e130      	LDI  R19,LOW(16)
                 ; 0002 0051             byte2 = 0x20;
0002ac e200      	LDI  R16,LOW(32)
                 ; 0002 0052             break;
0002ad c023      	RJMP _0x4000C
                 ; 0002 0053         }
                 ; 0002 0054         case    8:
                 _0x40013:
0002ae 30e8      	CPI  R30,LOW(0x8)
0002af e0a0      	LDI  R26,HIGH(0x8)
0002b0 07fa      	CPC  R31,R26
0002b1 f419      	BRNE _0x40014
                 ; 0002 0055         {
                 ; 0002 0056             byte3 = 0x80;
0002b2 e830      	LDI  R19,LOW(128)
                 ; 0002 0057             byte2 = 0x10;
0002b3 e100      	LDI  R16,LOW(16)
                 ; 0002 0058             break;
0002b4 c01c      	RJMP _0x4000C
                 ; 0002 0059         }
                 ; 0002 005A         case    9:
                 _0x40014:
0002b5 30e9      	CPI  R30,LOW(0x9)
0002b6 e0a0      	LDI  R26,HIGH(0x9)
0002b7 07fa      	CPC  R31,R26
0002b8 f419      	BRNE _0x40015
                 ; 0002 005B         {
                 ; 0002 005C             byte3 = 0x00;
0002b9 e030      	LDI  R19,LOW(0)
                 ; 0002 005D             byte2 = 0x40;
0002ba e400      	LDI  R16,LOW(64)
                 ; 0002 005E             break;
0002bb c015      	RJMP _0x4000C
                 ; 0002 005F         }
                 ; 0002 0060         case    10:
                 _0x40015:
0002bc 30ea      	CPI  R30,LOW(0xA)
0002bd e0a0      	LDI  R26,HIGH(0xA)
0002be 07fa      	CPC  R31,R26
0002bf f421      	BRNE _0x40016
                 ; 0002 0061         {
                 ; 0002 0062             byte3 = 0x00;
0002c0 e030      	LDI  R19,LOW(0)
                 ; 0002 0063             byte2 = 0x20;
0002c1 e200      	LDI  R16,LOW(32)
                 ; 0002 0064             byte1 = 0x04;
0002c2 e014      	LDI  R17,LOW(4)
                 ; 0002 0065             break;
0002c3 c00d      	RJMP _0x4000C
                 ; 0002 0066         }
                 ; 0002 0067         case    11:
                 _0x40016:
0002c4 30eb      	CPI  R30,LOW(0xB)
0002c5 e0a0      	LDI  R26,HIGH(0xB)
0002c6 07fa      	CPC  R31,R26
0002c7 f419      	BRNE _0x40017
                 ; 0002 0068         {
                 ; 0002 0069             byte3 = 0x00;
0002c8 e030      	LDI  R19,LOW(0)
                 ; 0002 006A             byte2 = 0x10;
0002c9 e100      	LDI  R16,LOW(16)
                 ; 0002 006B             break;
0002ca c006      	RJMP _0x4000C
                 ; 0002 006C         }
                 ; 0002 006D         case    12:
                 _0x40017:
0002cb 30ec      	CPI  R30,LOW(0xC)
0002cc e0a0      	LDI  R26,HIGH(0xC)
0002cd 07fa      	CPC  R31,R26
0002ce f411      	BRNE _0x4000C
                 ; 0002 006E         {
                 ; 0002 006F             byte3 = 0x00;
0002cf e030      	LDI  R19,LOW(0)
                 ; 0002 0070             byte2 = 0x80;
                 _0x4003E:
0002d0 e800      	LDI  R16,LOW(128)
                 ; 0002 0071             break;
                 ; 0002 0072         }
                 ; 0002 0073     }
                 _0x4000C:
                 ; 0002 0074     switch(data)
0002d1 81ec      	LDD  R30,Y+4
0002d2 e0f0      	LDI  R31,0
                 ; 0002 0075     {
                 ; 0002 0076         case    0:
0002d3 9730      	SBIW R30,0
0002d4 f411      	BRNE _0x4001C
                 ; 0002 0077         {
                 ; 0002 0078             byte1 |= 0xB7;
0002d5 6b17      	ORI  R17,LOW(183)
                 ; 0002 0079             break;
0002d6 c031      	RJMP _0x4001B
                 ; 0002 007A         }
                 ; 0002 007B         case    1:
                 _0x4001C:
0002d7 30e1      	CPI  R30,LOW(0x1)
0002d8 e0a0      	LDI  R26,HIGH(0x1)
0002d9 07fa      	CPC  R31,R26
0002da f411      	BRNE _0x4001D
                 ; 0002 007C         {
                 ; 0002 007D             byte1 |= 0x81;
0002db 6811      	ORI  R17,LOW(129)
                 ; 0002 007E             break;
0002dc c02b      	RJMP _0x4001B
                 ; 0002 007F         }
                 ; 0002 0080         case    2:
                 _0x4001D:
0002dd d134      	RCALL SUBOPT_0x18
0002de f411      	BRNE _0x4001E
                 ; 0002 0081         {
                 ; 0002 0082             byte1 |= 0x3D;
0002df 631d      	ORI  R17,LOW(61)
                 ; 0002 0083             break;
0002e0 c027      	RJMP _0x4001B
                 ; 0002 0084         }
                 ; 0002 0085         case    3:
                 _0x4001E:
0002e1 d134      	RCALL SUBOPT_0x19
0002e2 f411      	BRNE _0x4001F
                 ; 0002 0086         {
                 ; 0002 0087             byte1 |= 0xAD;
0002e3 6a1d      	ORI  R17,LOW(173)
                 ; 0002 0088             break;
0002e4 c023      	RJMP _0x4001B
                 ; 0002 0089         }
                 ; 0002 008A         case    4:
                 _0x4001F:
0002e5 30e4      	CPI  R30,LOW(0x4)
0002e6 e0a0      	LDI  R26,HIGH(0x4)
0002e7 07fa      	CPC  R31,R26
0002e8 f411      	BRNE _0x40020
                 ; 0002 008B         {
                 ; 0002 008C             byte1 |= 0x8B;
0002e9 681b      	ORI  R17,LOW(139)
                 ; 0002 008D             break;
0002ea c01d      	RJMP _0x4001B
                 ; 0002 008E         }
                 ; 0002 008F         case    5:
                 _0x40020:
0002eb 30e5      	CPI  R30,LOW(0x5)
0002ec e0a0      	LDI  R26,HIGH(0x5)
0002ed 07fa      	CPC  R31,R26
0002ee f411      	BRNE _0x40021
                 ; 0002 0090         {
                 ; 0002 0091             byte1 |= 0xAE;
0002ef 6a1e      	ORI  R17,LOW(174)
                 ; 0002 0092             break;
0002f0 c017      	RJMP _0x4001B
                 ; 0002 0093         }
                 ; 0002 0094         case    6:
                 _0x40021:
0002f1 30e6      	CPI  R30,LOW(0x6)
0002f2 e0a0      	LDI  R26,HIGH(0x6)
0002f3 07fa      	CPC  R31,R26
0002f4 f411      	BRNE _0x40022
                 ; 0002 0095         {
                 ; 0002 0096             byte1 |= 0xBE;
0002f5 6b1e      	ORI  R17,LOW(190)
                 ; 0002 0097             break;
0002f6 c011      	RJMP _0x4001B
                 ; 0002 0098         }
                 ; 0002 0099         case    7:
                 _0x40022:
0002f7 30e7      	CPI  R30,LOW(0x7)
0002f8 e0a0      	LDI  R26,HIGH(0x7)
0002f9 07fa      	CPC  R31,R26
0002fa f411      	BRNE _0x40023
                 ; 0002 009A         {
                 ; 0002 009B             byte1 |= 0x85;
0002fb 6815      	ORI  R17,LOW(133)
                 ; 0002 009C             break;
0002fc c00b      	RJMP _0x4001B
                 ; 0002 009D         }
                 ; 0002 009E         case    8:
                 _0x40023:
0002fd 30e8      	CPI  R30,LOW(0x8)
0002fe e0a0      	LDI  R26,HIGH(0x8)
0002ff 07fa      	CPC  R31,R26
000300 f411      	BRNE _0x40024
                 ; 0002 009F         {
                 ; 0002 00A0             byte1 |= 0xBF;
000301 6b1f      	ORI  R17,LOW(191)
                 ; 0002 00A1             break;
000302 c005      	RJMP _0x4001B
                 ; 0002 00A2         }
                 ; 0002 00A3         case    9:
                 _0x40024:
000303 30e9      	CPI  R30,LOW(0x9)
000304 e0a0      	LDI  R26,HIGH(0x9)
000305 07fa      	CPC  R31,R26
000306 f409      	BRNE _0x4001B
                 ; 0002 00A4         {
                 ; 0002 00A5             byte1 |= 0xAF;
000307 6a1f      	ORI  R17,LOW(175)
                 ; 0002 00A6             break;
                 ; 0002 00A7         }
                 ; 0002 00A8     }
                 _0x4001B:
                 ; 0002 00A9     SEND_DATA_LED(2,byte1,byte2,byte3);
000308 e0e2      	LDI  R30,LOW(2)
000309 93ea      	ST   -Y,R30
00030a 931a      	ST   -Y,R17
00030b 930a      	ST   -Y,R16
00030c 2fa3      	MOV  R26,R19
00030d df45      	RCALL _SEND_DATA_LED
                 ; 0002 00AA }
00030e d1c8      	RCALL __LOADLOCR4
00030f 9626      	ADIW R28,6
000310 9508      	RET
                 ; .FEND
                 ;
                 ;void SCAN_LED(void)
                 ; 0002 00AD {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0002 00AE     if(Uc_led_count == 1)   Uc_led_data = Uint_data_led1/1000;
000311 d11c      	RCALL SUBOPT_0x1E
000312 30a1      	CPI  R26,LOW(0x1)
000313 f419      	BRNE _0x40026
000314 d11c      	RCALL SUBOPT_0x1F
000315 d120      	RCALL SUBOPT_0x20
000316 c041      	RJMP _0x4003F
                 ; 0002 00AF     else if(Uc_led_count == 2)   Uc_led_data = (Uint_data_led1/100)%10;
                 _0x40026:
000317 d116      	RCALL SUBOPT_0x1E
000318 30a2      	CPI  R26,LOW(0x2)
000319 f419      	BRNE _0x40028
00031a d116      	RCALL SUBOPT_0x1F
00031b d11e      	RCALL SUBOPT_0x21
00031c c038      	RJMP _0x40040
                 ; 0002 00B0     else if(Uc_led_count == 3)   Uc_led_data = (Uint_data_led1/10)%10;
                 _0x40028:
00031d d110      	RCALL SUBOPT_0x1E
00031e 30a3      	CPI  R26,LOW(0x3)
00031f f419      	BRNE _0x4002A
000320 d110      	RCALL SUBOPT_0x1F
000321 d11d      	RCALL SUBOPT_0x22
000322 c032      	RJMP _0x40040
                 ; 0002 00B1     else if(Uc_led_count == 4)   Uc_led_data = (Uint_data_led1%10);
                 _0x4002A:
000323 d10a      	RCALL SUBOPT_0x1E
000324 30a4      	CPI  R26,LOW(0x4)
000325 f411      	BRNE _0x4002C
000326 d10a      	RCALL SUBOPT_0x1F
000327 c02d      	RJMP _0x40040
                 ; 0002 00B2     else if(Uc_led_count == 5)   Uc_led_data = Uint_data_led2/1000;
                 _0x4002C:
000328 d105      	RCALL SUBOPT_0x1E
000329 30a5      	CPI  R26,LOW(0x5)
00032a f419      	BRNE _0x4002E
00032b d118      	RCALL SUBOPT_0x23
00032c d109      	RCALL SUBOPT_0x20
00032d c02a      	RJMP _0x4003F
                 ; 0002 00B3     else if(Uc_led_count == 6)   Uc_led_data = (Uint_data_led2/100)%10;
                 _0x4002E:
00032e d0ff      	RCALL SUBOPT_0x1E
00032f 30a6      	CPI  R26,LOW(0x6)
000330 f419      	BRNE _0x40030
000331 d112      	RCALL SUBOPT_0x23
000332 d107      	RCALL SUBOPT_0x21
000333 c021      	RJMP _0x40040
                 ; 0002 00B4     else if(Uc_led_count == 7)   Uc_led_data = (Uint_data_led2/10)%10;
                 _0x40030:
000334 d0f9      	RCALL SUBOPT_0x1E
000335 30a7      	CPI  R26,LOW(0x7)
000336 f419      	BRNE _0x40032
000337 d10c      	RCALL SUBOPT_0x23
000338 d106      	RCALL SUBOPT_0x22
000339 c01b      	RJMP _0x40040
                 ; 0002 00B5     else if(Uc_led_count == 8)   Uc_led_data = (Uint_data_led2%10);
                 _0x40032:
00033a d0f3      	RCALL SUBOPT_0x1E
00033b 30a8      	CPI  R26,LOW(0x8)
00033c f411      	BRNE _0x40034
00033d d106      	RCALL SUBOPT_0x23
00033e c016      	RJMP _0x40040
                 ; 0002 00B6     else if(Uc_led_count == 9)   Uc_led_data = Uint_data_led3/1000;
                 _0x40034:
00033f d0ee      	RCALL SUBOPT_0x1E
000340 30a9      	CPI  R26,LOW(0x9)
000341 f419      	BRNE _0x40036
000342 d106      	RCALL SUBOPT_0x24
000343 d0f2      	RCALL SUBOPT_0x20
000344 c013      	RJMP _0x4003F
                 ; 0002 00B7     else if(Uc_led_count == 10)   Uc_led_data = (Uint_data_led3/100)%10;
                 _0x40036:
000345 d0e8      	RCALL SUBOPT_0x1E
000346 30aa      	CPI  R26,LOW(0xA)
000347 f419      	BRNE _0x40038
000348 d100      	RCALL SUBOPT_0x24
000349 d0f0      	RCALL SUBOPT_0x21
00034a c00a      	RJMP _0x40040
                 ; 0002 00B8     else if(Uc_led_count == 11)   Uc_led_data = (Uint_data_led3/10)%10;
                 _0x40038:
00034b d0e2      	RCALL SUBOPT_0x1E
00034c 30ab      	CPI  R26,LOW(0xB)
00034d f419      	BRNE _0x4003A
00034e d0fa      	RCALL SUBOPT_0x24
00034f d0ef      	RCALL SUBOPT_0x22
000350 c004      	RJMP _0x40040
                 ; 0002 00B9     else if(Uc_led_count == 12)   Uc_led_data = (Uint_data_led3%10);
                 _0x4003A:
000351 d0dc      	RCALL SUBOPT_0x1E
000352 30ac      	CPI  R26,LOW(0xC)
000353 f431      	BRNE _0x4003C
000354 d0f4      	RCALL SUBOPT_0x24
                 _0x40040:
000355 e0ea      	LDI  R30,LOW(10)
000356 e0f0      	LDI  R31,HIGH(10)
000357 d16e      	RCALL __MODW21U
                 _0x4003F:
000358 93e0 0181 	STS  _Uc_led_data,R30
                 ; 0002 00BA     SELECT_LED(Uc_led_count,Uc_led_data);
                 _0x4003C:
00035a 91e0 0180 	LDS  R30,_Uc_led_count
00035c 93ea      	ST   -Y,R30
00035d 91a0 0181 	LDS  R26,_Uc_led_data
00035f df1c      	RCALL _SELECT_LED
                 ; 0002 00BB     Uc_led_count++;
000360 91e0 0180 	LDS  R30,_Uc_led_count
000362 5fef      	SUBI R30,-LOW(1)
000363 93e0 0180 	STS  _Uc_led_count,R30
                 ; 0002 00BC     if(Uc_led_count > NUM_LED_SCAN*4)    Uc_led_count = 1;
000365 d0c8      	RCALL SUBOPT_0x1E
000366 30a9      	CPI  R26,LOW(0x9)
000367 f018      	BRLO _0x4003D
000368 e0e1      	LDI  R30,LOW(1)
000369 93e0 0180 	STS  _Uc_led_count,R30
                 ; 0002 00BD }
                 _0x4003D:
00036b 9508      	RET
                 ; .FEND
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void    SPI_SENDBYTE(unsigned char  data,unsigned char action)
                 ; 0003 0005 {
                 
                 	.CSEG
                 _SPI_SENDBYTE:
                 ; .FSTART _SPI_SENDBYTE
                 ; 0003 0006     unsigned char   i;
                 ; 0003 0007     for(i=0;i<8;i++)
00036c 93aa      	ST   -Y,R26
00036d 931a      	ST   -Y,R17
                 ;	data -> Y+2
                 ;	action -> Y+1
                 ;	i -> R17
00036e e010      	LDI  R17,LOW(0)
                 _0x60004:
00036f 3018      	CPI  R17,8
000370 f470      	BRSH _0x60005
                 ; 0003 0008     {
                 ; 0003 0009         if((data & 0x80) == 0x80)    DO_SPI_MOSI = 1;
000371 81ea      	LDD  R30,Y+2
000372 78e0      	ANDI R30,LOW(0x80)
000373 38e0      	CPI  R30,LOW(0x80)
000374 f411      	BRNE _0x60006
000375 9a2b      	SBI  0x5,3
                 ; 0003 000A         else    DO_SPI_MOSI = 0;
000376 c001      	RJMP _0x60009
                 _0x60006:
000377 982b      	CBI  0x5,3
                 ; 0003 000B         data <<= 1;
                 _0x60009:
000378 81ea      	LDD  R30,Y+2
000379 0fee      	LSL  R30
00037a 83ea      	STD  Y+2,R30
                 ; 0003 000C         DO_SPI_SCK = 1;
00037b 9a2d      	SBI  0x5,5
                 ; 0003 000D         DO_SPI_SCK = 0;
00037c 982d      	CBI  0x5,5
                 ; 0003 000E     }
00037d 5f1f      	SUBI R17,-1
00037e cff0      	RJMP _0x60004
                 _0x60005:
                 ; 0003 000F     if(action)
00037f 81e9      	LDD  R30,Y+1
000380 30e0      	CPI  R30,0
000381 f011      	BREQ _0x60010
                 ; 0003 0010     {
                 ; 0003 0011         DO_SPI_LATCH = 1;
000382 9a29      	SBI  0x5,1
                 ; 0003 0012         DO_SPI_LATCH = 0;
000383 9829      	CBI  0x5,1
                 ; 0003 0013     }
                 ; 0003 0014 }
                 _0x60010:
000384 8118      	LDD  R17,Y+0
                 _0x2000001:
000385 9623      	ADIW R28,3
000386 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Uc_led_count:
000180           	.BYTE 0x1
                 _Uc_led_data:
000181           	.BYTE 0x1
                 _Uint_data_led1:
000182           	.BYTE 0x2
                 _Uint_data_led2:
000184           	.BYTE 0x2
                 _Uint_data_led3:
000186           	.BYTE 0x2
                 _AI10_Voltage_buff:
000188           	.BYTE 0x14
                 _AI10_Currrent_buff:
00019c           	.BYTE 0x14
                 _AI10_Temp_buff:
0001b0           	.BYTE 0x14
                 _Ulong_tmp:
0001c4           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000387 93e0 0085 	STS  133,R30
000389 e0e0      	LDI  R30,LOW(0)
00038a 93e0 0084 	STS  132,R30
00038c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
00038d e0e1      	LDI  R30,LOW(1)
00038e 93e0 0070 	STS  112,R30
000390 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000391 eca8      	LDI  R26,LOW(200)
000392 e0b0      	LDI  R27,0
000393 c0ba      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
000394 e0e0      	LDI  R30,LOW(0)
000395 93e0 0070 	STS  112,R30
000397 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000398 e0ea      	LDI  R30,LOW(10)
000399 163e      	CP   R3,R30
00039a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
00039b 2de3      	MOV  R30,R3
00039c e8a8      	LDI  R26,LOW(_AI10_Voltage_buff)
00039d e0b1      	LDI  R27,HIGH(_AI10_Voltage_buff)
00039e e0f0      	LDI  R31,0
00039f 0fee      	LSL  R30
0003a0 1fff      	ROL  R31
0003a1 0fae      	ADD  R26,R30
0003a2 1fbf      	ADC  R27,R31
0003a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0003a4 e0e0      	LDI  R30,LOW(0)
0003a5 e0f0      	LDI  R31,HIGH(0)
0003a6 93ed      	ST   X+,R30
0003a7 93fc      	ST   X,R31
0003a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
0003a9 2de3      	MOV  R30,R3
0003aa e9ac      	LDI  R26,LOW(_AI10_Currrent_buff)
0003ab e0b1      	LDI  R27,HIGH(_AI10_Currrent_buff)
0003ac e0f0      	LDI  R31,0
0003ad 0fee      	LSL  R30
0003ae 1fff      	ROL  R31
0003af 0fae      	ADD  R26,R30
0003b0 1fbf      	ADC  R27,R31
0003b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x8:
0003b2 e0f0      	LDI  R31,0
0003b3 0fee      	LSL  R30
0003b4 1fff      	ROL  R31
0003b5 0fea      	ADD  R30,R26
0003b6 1ffb      	ADC  R31,R27
0003b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0003b8 93ed      	ST   X+,R30
0003b9 93fc      	ST   X,R31
0003ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xA:
0003bb 2de3      	MOV  R30,R3
0003bc eba0      	LDI  R26,LOW(_AI10_Temp_buff)
0003bd e0b1      	LDI  R27,HIGH(_AI10_Temp_buff)
0003be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xB:
0003bf e0f0      	LDI  R31,0
0003c0 0fee      	LSL  R30
0003c1 1fff      	ROL  R31
0003c2 0fae      	ADD  R26,R30
0003c3 1fbf      	ADC  R27,R31
0003c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
0003c5 2de6      	MOV  R30,R6
0003c6 eba0      	LDI  R26,LOW(_AI10_Temp_buff)
0003c7 e0b1      	LDI  R27,HIGH(_AI10_Temp_buff)
0003c8 cff6      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
0003c9 2766      	CLR  R22
0003ca 2777      	CLR  R23
0003cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:40 WORDS
                 SUBOPT_0xE:
0003cc 93e0 01c4 	STS  _Ulong_tmp,R30
0003ce 93f0 01c5 	STS  _Ulong_tmp+1,R31
0003d0 9360 01c6 	STS  _Ulong_tmp+2,R22
0003d2 9370 01c7 	STS  _Ulong_tmp+3,R23
0003d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xF:
0003d5 e0e0      	LDI  R30,LOW(0)
0003d6 93e0 01c4 	STS  _Ulong_tmp,R30
0003d8 93e0 01c5 	STS  _Ulong_tmp+1,R30
0003da 93e0 01c6 	STS  _Ulong_tmp+2,R30
0003dc 93e0 01c7 	STS  _Ulong_tmp+3,R30
0003de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x10:
0003df d0e9      	RCALL __GETW1P
0003e0 91a0 01c4 	LDS  R26,_Ulong_tmp
0003e2 91b0 01c5 	LDS  R27,_Ulong_tmp+1
0003e4 9180 01c6 	LDS  R24,_Ulong_tmp+2
0003e6 9190 01c7 	LDS  R25,_Ulong_tmp+3
0003e8 dfe0      	RCALL SUBOPT_0xD
0003e9 d06e      	RCALL __ADDD12
0003ea cfe1      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x11:
0003eb 91a0 01c4 	LDS  R26,_Ulong_tmp
0003ed 91b0 01c5 	LDS  R27,_Ulong_tmp+1
0003ef 9180 01c6 	LDS  R24,_Ulong_tmp+2
0003f1 9190 01c7 	LDS  R25,_Ulong_tmp+3
0003f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
0003f4 d0ac      	RCALL __DIVD21U
0003f5 dfd6      	RCALL SUBOPT_0xE
0003f6 91e0 01c4 	LDS  R30,_Ulong_tmp
0003f8 91f0 01c5 	LDS  R31,_Ulong_tmp+1
0003fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
0003fb 9a44      	SBI  0x8,4
                +
0003fc e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0003fd 958a     +DEC R24
0003fe f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0003ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000400 9844      	CBI  0x8,4
                +
000401 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000402 958a     +DEC R24
000403 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000404 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x15:
000405 2fe1      	MOV  R30,R17
000406 e0f0      	LDI  R31,0
000407 01de      	MOVW R26,R28
000408 9615      	ADIW R26,5
000409 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
00040a 0fae      	ADD  R26,R30
00040b 1fbf      	ADC  R27,R31
00040c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
00040d e0f0      	LDI  R31,0
00040e 30e1      	CPI  R30,LOW(0x1)
00040f e0a0      	LDI  R26,HIGH(0x1)
000410 07fa      	CPC  R31,R26
000411 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x18:
000412 30e2      	CPI  R30,LOW(0x2)
000413 e0a0      	LDI  R26,HIGH(0x2)
000414 07fa      	CPC  R31,R26
000415 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x19:
000416 30e3      	CPI  R30,LOW(0x3)
000417 e0a0      	LDI  R26,HIGH(0x3)
000418 07fa      	CPC  R31,R26
000419 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1A:
                +
00041a ec88     +LDI R24 , LOW ( 200 )
00041b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00041c 9701     +SBIW R24 , 1
00041d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00041e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1B:
                +
00041f 81a9     +LDD R26 , Y + 1
000420 81ba     +LDD R27 , Y + 1 + 1
000421 818b     +LDD R24 , Y + 1 + 2
000422 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
000423 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
                +
000424 83e9     +STD Y + 1 , R30
000425 83fa     +STD Y + 1 + 1 , R31
000426 836b     +STD Y + 1 + 2 , R22
000427 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
000428 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1D:
000429 2fe1      	MOV  R30,R17
00042a e0f0      	LDI  R31,0
00042b 01de      	MOVW R26,R28
00042c 9611      	ADIW R26,1
00042d cfdc      	RJMP SUBOPT_0x16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1E:
00042e 91a0 0180 	LDS  R26,_Uc_led_count
000430 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1F:
000431 91a0 0182 	LDS  R26,_Uint_data_led1
000433 91b0 0183 	LDS  R27,_Uint_data_led1+1
000435 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x20:
000436 eee8      	LDI  R30,LOW(1000)
000437 e0f3      	LDI  R31,HIGH(1000)
000438 d055      	RCALL __DIVW21U
000439 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x21:
00043a e6e4      	LDI  R30,LOW(100)
00043b e0f0      	LDI  R31,HIGH(100)
00043c d051      	RCALL __DIVW21U
00043d 01df      	MOVW R26,R30
00043e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x22:
00043f e0ea      	LDI  R30,LOW(10)
000440 e0f0      	LDI  R31,HIGH(10)
000441 d04c      	RCALL __DIVW21U
000442 01df      	MOVW R26,R30
000443 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x23:
000444 91a0 0184 	LDS  R26,_Uint_data_led2
000446 91b0 0185 	LDS  R27,_Uint_data_led2+1
000448 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x24:
000449 91a0 0186 	LDS  R26,_Uint_data_led3
00044b 91b0 0187 	LDS  R27,_Uint_data_led3+1
00044d 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00044e 9610      	adiw r26,0
00044f f039      	breq __delay_ms1
                 __delay_ms0:
                +
000450 ed80     +LDI R24 , LOW ( 0x7D0 )
000451 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000452 9701     +SBIW R24 , 1
000453 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000454 95a8      	wdr
000455 9711      	sbiw r26,1
000456 f7c9      	brne __delay_ms0
                 __delay_ms1:
000457 9508      	ret
                 
                 __ADDD12:
000458 0fea      	ADD  R30,R26
000459 1ffb      	ADC  R31,R27
00045a 1f68      	ADC  R22,R24
00045b 1f79      	ADC  R23,R25
00045c 9508      	RET
                 
                 __LSLD12:
00045d 23ee      	TST  R30
00045e 2e0e      	MOV  R0,R30
00045f 01fd      	MOVW R30,R26
000460 01bc      	MOVW R22,R24
000461 f031      	BREQ __LSLD12R
                 __LSLD12L:
000462 0fee      	LSL  R30
000463 1fff      	ROL  R31
000464 1f66      	ROL  R22
000465 1f77      	ROL  R23
000466 940a      	DEC  R0
000467 f7d1      	BRNE __LSLD12L
                 __LSLD12R:
000468 9508      	RET
                 
                 __CWD1:
000469 2f6f      	MOV  R22,R31
00046a 0f66      	ADD  R22,R22
00046b 0b66      	SBC  R22,R22
00046c 2f76      	MOV  R23,R22
00046d 9508      	RET
                 
                 __MULD12U:
00046e 9f7a      	MUL  R23,R26
00046f 2d70      	MOV  R23,R0
000470 9f6b      	MUL  R22,R27
000471 0d70      	ADD  R23,R0
000472 9ff8      	MUL  R31,R24
000473 0d70      	ADD  R23,R0
000474 9fe9      	MUL  R30,R25
000475 0d70      	ADD  R23,R0
000476 9f6a      	MUL  R22,R26
000477 2d60      	MOV  R22,R0
000478 0d71      	ADD  R23,R1
000479 9ffb      	MUL  R31,R27
00047a 0d60      	ADD  R22,R0
00047b 1d71      	ADC  R23,R1
00047c 9fe8      	MUL  R30,R24
00047d 0d60      	ADD  R22,R0
00047e 1d71      	ADC  R23,R1
00047f 2788      	CLR  R24
000480 9ffa      	MUL  R31,R26
000481 2df0      	MOV  R31,R0
000482 0d61      	ADD  R22,R1
000483 1f78      	ADC  R23,R24
000484 9feb      	MUL  R30,R27
000485 0df0      	ADD  R31,R0
000486 1d61      	ADC  R22,R1
000487 1f78      	ADC  R23,R24
000488 9fea      	MUL  R30,R26
000489 2de0      	MOV  R30,R0
00048a 0df1      	ADD  R31,R1
00048b 1f68      	ADC  R22,R24
00048c 1f78      	ADC  R23,R24
00048d 9508      	RET
                 
                 __DIVW21U:
00048e 2400      	CLR  R0
00048f 2411      	CLR  R1
000490 e190      	LDI  R25,16
                 __DIVW21U1:
000491 0faa      	LSL  R26
000492 1fbb      	ROL  R27
000493 1c00      	ROL  R0
000494 1c11      	ROL  R1
000495 1a0e      	SUB  R0,R30
000496 0a1f      	SBC  R1,R31
000497 f418      	BRCC __DIVW21U2
000498 0e0e      	ADD  R0,R30
000499 1e1f      	ADC  R1,R31
00049a c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00049b 60a1      	SBR  R26,1
                 __DIVW21U3:
00049c 959a      	DEC  R25
00049d f799      	BRNE __DIVW21U1
00049e 01fd      	MOVW R30,R26
00049f 01d0      	MOVW R26,R0
0004a0 9508      	RET
                 
                 __DIVD21U:
0004a1 933f      	PUSH R19
0004a2 934f      	PUSH R20
0004a3 935f      	PUSH R21
0004a4 2400      	CLR  R0
0004a5 2411      	CLR  R1
0004a6 2744      	CLR  R20
0004a7 2755      	CLR  R21
0004a8 e230      	LDI  R19,32
                 __DIVD21U1:
0004a9 0faa      	LSL  R26
0004aa 1fbb      	ROL  R27
0004ab 1f88      	ROL  R24
0004ac 1f99      	ROL  R25
0004ad 1c00      	ROL  R0
0004ae 1c11      	ROL  R1
0004af 1f44      	ROL  R20
0004b0 1f55      	ROL  R21
0004b1 1a0e      	SUB  R0,R30
0004b2 0a1f      	SBC  R1,R31
0004b3 0b46      	SBC  R20,R22
0004b4 0b57      	SBC  R21,R23
0004b5 f428      	BRCC __DIVD21U2
0004b6 0e0e      	ADD  R0,R30
0004b7 1e1f      	ADC  R1,R31
0004b8 1f46      	ADC  R20,R22
0004b9 1f57      	ADC  R21,R23
0004ba c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0004bb 60a1      	SBR  R26,1
                 __DIVD21U3:
0004bc 953a      	DEC  R19
0004bd f759      	BRNE __DIVD21U1
0004be 01fd      	MOVW R30,R26
0004bf 01bc      	MOVW R22,R24
0004c0 01d0      	MOVW R26,R0
0004c1 01ca      	MOVW R24,R20
0004c2 915f      	POP  R21
0004c3 914f      	POP  R20
0004c4 913f      	POP  R19
0004c5 9508      	RET
                 
                 __MODW21U:
0004c6 dfc7      	RCALL __DIVW21U
0004c7 01fd      	MOVW R30,R26
0004c8 9508      	RET
                 
                 __GETW1P:
0004c9 91ed      	LD   R30,X+
0004ca 91fc      	LD   R31,X
0004cb 9711      	SBIW R26,1
0004cc 9508      	RET
                 
                 __CPD21:
0004cd 17ae      	CP   R26,R30
0004ce 07bf      	CPC  R27,R31
0004cf 0786      	CPC  R24,R22
0004d0 0797      	CPC  R25,R23
0004d1 9508      	RET
                 
                 __SAVELOCR4:
0004d2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004d3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004d4 931a      	ST   -Y,R17
0004d5 930a      	ST   -Y,R16
0004d6 9508      	RET
                 
                 __LOADLOCR4:
0004d7 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004d8 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004d9 8119      	LDD  R17,Y+1
0004da 8108      	LD   R16,Y
0004db 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega48 register use summary:
r0 :  34 r1 :  19 r2 :   0 r3 :  16 r4 :   5 r5 :   0 r6 :   5 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  23 r17:  50 r18:   2 r19:  20 r20:   7 r21:   6 r22:  36 r23:  29 
r24:  38 r25:  17 r26: 137 r27:  46 r28:  10 r29:   1 r30: 277 r31:  86 
x  :  17 y  :  96 z  :   9 
Registers used: 25 out of 35 (71.4%)

ATmega48 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  21 add   :  20 
adiw  :   8 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   5 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  53 brpl  :   0 brsh  :  16 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  10 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  17 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   9 
cpc   :  24 cpi   :  42 cpse  :   0 dec   :   7 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   7 ld    :  24 ldd   :  30 ldi   : 199 lds   :  33 lpm   :   7 
lsl   :  10 lsr   :   0 mov   :  22 movw  :  22 mul   :  10 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :  12 out   :  19 
pop   :   9 push  :   9 rcall : 160 ret   :  52 reti  :   4 rjmp  :  93 
rol   :  17 ror   :   0 sbc   :   5 sbci  :   3 sbi   :  16 sbic  :   2 
sbis  :   1 sbiw  :  11 sbr   :   2 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  46 std   :  15 
sts   :  52 sub   :   2 subi  :  11 swap  :   0 tst   :   1 wdr   :   1 

Instructions used: 52 out of 114 (45.6%)

ATmega48 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009b8   2470     18   2488    4096  60.7%
[.dseg] 0x000100 0x0001c8      0     72     72     512  14.1%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 5 warnings
