
AVRASM ver. 2.1.30  D:\My Data\TanPhat\1-phase-fix-power-supply\Debug\List\1-phase-fix-power-supply.asm Mon Nov 19 23:56:35 2018

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8L
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8L
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c017      	RJMP __RESET
000001 c042      	RJMP _ext_int0_isr
000002 c042      	RJMP _ext_int1_isr
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c03d      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _0x60003:
D:\My Data\TanPhat\1-phase-fix-power-supply\Debug\List\1-phase-fix-power-supply.asm(1113): warning: .cseg .db misalignment - padding zero byte
000013 0001      	.DB  0x1
                 
                 __GLOBAL_INI_TBL:
000014 0001      	.DW  0x01
000015 0160      	.DW  _Uc_led_count
000016 0026      	.DW  _0x60003*2
                 
                 _0xFFFFFFFF:
000017 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000018 94f8      	CLI
000019 27ee      	CLR  R30
00001a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00001b e0f1      	LDI  R31,1
00001c bffb      	OUT  GICR,R31
00001d bfeb      	OUT  GICR,R30
00001e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00001f e08d      	LDI  R24,(14-2)+1
000020 e0a2      	LDI  R26,2
000021 27bb      	CLR  R27
                 __CLEAR_REG:
000022 93ed      	ST   X+,R30
000023 958a      	DEC  R24
000024 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000025 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000026 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000027 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000028 93ed      	ST   X+,R30
000029 9701      	SBIW R24,1
00002a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00002b e2e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00002c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00002d 9185      	LPM  R24,Z+
00002e 9195      	LPM  R25,Z+
00002f 9700      	SBIW R24,0
000030 f061      	BREQ __GLOBAL_INI_END
000031 91a5      	LPM  R26,Z+
000032 91b5      	LPM  R27,Z+
000033 9005      	LPM  R0,Z+
000034 9015      	LPM  R1,Z+
000035 01bf      	MOVW R22,R30
000036 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000037 9005      	LPM  R0,Z+
000038 920d      	ST   X+,R0
000039 9701      	SBIW R24,1
00003a f7e1      	BRNE __GLOBAL_INI_LOOP
00003b 01fb      	MOVW R30,R22
00003c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00003d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00003e bfed      	OUT  SPL,R30
00003f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000040 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000041 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000042 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000043 c01f      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 1 Phase fix power supply
                 ;Version : 1.0
                 ;Date    : 11/19/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega8L
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include "ADE7753.h"
                 ;#include "scan_led.h"
                 ;#include <delay.h>
                 ;
                 ;#define BUZZER  PORTD.5
                 ;#define BUZZER_ON   BUZZER = 1
                 ;#define BUZZER_OFF  BUZZER = 0
                 ;
                 ;// Declare your global variables here
                 ;
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0026 {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
                 ; 0000 0027 // Place your code here
                 ; 0000 0028 
                 ; 0000 0029 }
000044 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 002D {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
                 ; 0000 002E // Place your code here
                 ; 0000 002F 
                 ; 0000 0030 }
000045 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0034 {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000046 920a      	ST   -Y,R0
000047 921a      	ST   -Y,R1
000048 92fa      	ST   -Y,R15
000049 936a      	ST   -Y,R22
00004a 937a      	ST   -Y,R23
00004b 938a      	ST   -Y,R24
00004c 939a      	ST   -Y,R25
00004d 93aa      	ST   -Y,R26
00004e 93ba      	ST   -Y,R27
00004f 93ea      	ST   -Y,R30
000050 93fa      	ST   -Y,R31
000051 b7ef      	IN   R30,SREG
000052 93ea      	ST   -Y,R30
                 ; 0000 0035     // Reinitialize Timer1 value
                 ; 0000 0036     TCNT1H=0x8300 >> 8;
000053 d21e      	RCALL SUBOPT_0x0
                 ; 0000 0037     TCNT1L=0x8300 & 0xff;
                 ; 0000 0038     // Place your code here
                 ; 0000 0039     SCAN_LED();
000054 d1c2      	RCALL _SCAN_LED
                 ; 0000 003A }
000055 91e9      	LD   R30,Y+
000056 bfef      	OUT  SREG,R30
000057 91f9      	LD   R31,Y+
000058 91e9      	LD   R30,Y+
000059 91b9      	LD   R27,Y+
00005a 91a9      	LD   R26,Y+
00005b 9199      	LD   R25,Y+
00005c 9189      	LD   R24,Y+
00005d 9179      	LD   R23,Y+
00005e 9169      	LD   R22,Y+
00005f 90f9      	LD   R15,Y+
000060 9019      	LD   R1,Y+
000061 9009      	LD   R0,Y+
000062 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0043 {
                 ; 0000 0044     ADMUX=adc_input | ADC_VREF_TYPE;
                 ;	adc_input -> Y+0
                 ; 0000 0045     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0046     delay_us(10);
                 ; 0000 0047     // Start the AD conversion
                 ; 0000 0048     ADCSRA|=(1<<ADSC);
                 ; 0000 0049     // Wait for the AD conversion to complete
                 ; 0000 004A     while ((ADCSRA & (1<<ADIF))==0);
                 ; 0000 004B     ADCSRA|=(1<<ADIF);
                 ; 0000 004C     return ADCW;
                 ; 0000 004D }
                 ;
                 ;void main(void)
                 ; 0000 0050 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0051 // Declare your local variables here
                 ; 0000 0052 
                 ; 0000 0053 // Input/Output Ports initialization
                 ; 0000 0054 // Port B initialization
                 ; 0000 0055 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=Out Bit0=In
                 ; 0000 0056 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
000063 e2ea      	LDI  R30,LOW(42)
000064 bbe7      	OUT  0x17,R30
                 ; 0000 0057 // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=0 Bit0=T
                 ; 0000 0058 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000065 e0e0      	LDI  R30,LOW(0)
000066 bbe8      	OUT  0x18,R30
                 ; 0000 0059 
                 ; 0000 005A // Port C initialization
                 ; 0000 005B // Function: Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=Out Bit1=In Bit0=In
                 ; 0000 005C DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (0<<DDC3) | (1<<DDC2) | (0<<DDC1) | (0<<DDC0);
000067 e3e4      	LDI  R30,LOW(52)
000068 bbe4      	OUT  0x14,R30
                 ; 0000 005D // State: Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=0 Bit1=T Bit0=T
                 ; 0000 005E PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000069 e0e0      	LDI  R30,LOW(0)
00006a bbe5      	OUT  0x15,R30
                 ; 0000 005F 
                 ; 0000 0060 // Port D initialization
                 ; 0000 0061 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0062 DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00006b e2e0      	LDI  R30,LOW(32)
00006c bbe1      	OUT  0x11,R30
                 ; 0000 0063 // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0064 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00006d e0e0      	LDI  R30,LOW(0)
00006e bbe2      	OUT  0x12,R30
                 ; 0000 0065 
                 ; 0000 0066 // Timer/Counter 0 initialization
                 ; 0000 0067 // Clock source: System Clock
                 ; 0000 0068 // Clock value: Timer 0 Stopped
                 ; 0000 0069 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
00006f bfe3      	OUT  0x33,R30
                 ; 0000 006A TCNT0=0x00;
000070 bfe2      	OUT  0x32,R30
                 ; 0000 006B 
                 ; 0000 006C // Timer/Counter 1 initialization
                 ; 0000 006D // Clock source: System Clock
                 ; 0000 006E // Clock value: 8000.000 kHz
                 ; 0000 006F // Mode: Normal top=0xFFFF
                 ; 0000 0070 // OC1A output: Disconnected
                 ; 0000 0071 // OC1B output: Disconnected
                 ; 0000 0072 // Noise Canceler: Off
                 ; 0000 0073 // Input Capture on Falling Edge
                 ; 0000 0074 // Timer Period: 4 ms
                 ; 0000 0075 // Timer1 Overflow Interrupt: On
                 ; 0000 0076 // Input Capture Interrupt: Off
                 ; 0000 0077 // Compare A Match Interrupt: Off
                 ; 0000 0078 // Compare B Match Interrupt: Off
                 ; 0000 0079 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000071 bdef      	OUT  0x2F,R30
                 ; 0000 007A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
000072 e0e1      	LDI  R30,LOW(1)
000073 bdee      	OUT  0x2E,R30
                 ; 0000 007B TCNT1H=0x83;
000074 d1fd      	RCALL SUBOPT_0x0
                 ; 0000 007C TCNT1L=0x00;
                 ; 0000 007D ICR1H=0x00;
000075 e0e0      	LDI  R30,LOW(0)
000076 bde7      	OUT  0x27,R30
                 ; 0000 007E ICR1L=0x00;
000077 bde6      	OUT  0x26,R30
                 ; 0000 007F OCR1AH=0x00;
000078 bdeb      	OUT  0x2B,R30
                 ; 0000 0080 OCR1AL=0x00;
000079 bdea      	OUT  0x2A,R30
                 ; 0000 0081 OCR1BH=0x00;
00007a bde9      	OUT  0x29,R30
                 ; 0000 0082 OCR1BL=0x00;
00007b bde8      	OUT  0x28,R30
                 ; 0000 0083 
                 ; 0000 0084 // Timer/Counter 2 initialization
                 ; 0000 0085 // Clock source: System Clock
                 ; 0000 0086 // Clock value: Timer2 Stopped
                 ; 0000 0087 // Mode: Normal top=0xFF
                 ; 0000 0088 // OC2 output: Disconnected
                 ; 0000 0089 ASSR=0<<AS2;
00007c bde2      	OUT  0x22,R30
                 ; 0000 008A TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00007d bde5      	OUT  0x25,R30
                 ; 0000 008B TCNT2=0x00;
00007e bde4      	OUT  0x24,R30
                 ; 0000 008C OCR2=0x00;
00007f bde3      	OUT  0x23,R30
                 ; 0000 008D 
                 ; 0000 008E // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 008F TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
000080 e0e4      	LDI  R30,LOW(4)
000081 bfe9      	OUT  0x39,R30
                 ; 0000 0090 
                 ; 0000 0091 // External Interrupt(s) initialization
                 ; 0000 0092 // INT0: On
                 ; 0000 0093 // INT0 Mode: Falling Edge
                 ; 0000 0094 // INT1: On
                 ; 0000 0095 // INT1 Mode: Falling Edge
                 ; 0000 0096 GICR|=(1<<INT1) | (1<<INT0);
000082 b7eb      	IN   R30,0x3B
000083 6ce0      	ORI  R30,LOW(0xC0)
000084 bfeb      	OUT  0x3B,R30
                 ; 0000 0097 MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
000085 e0ea      	LDI  R30,LOW(10)
000086 bfe5      	OUT  0x35,R30
                 ; 0000 0098 GIFR=(1<<INTF1) | (1<<INTF0);
000087 ece0      	LDI  R30,LOW(192)
000088 bfea      	OUT  0x3A,R30
                 ; 0000 0099 
                 ; 0000 009A // USART initialization
                 ; 0000 009B // USART disabled
                 ; 0000 009C UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000089 e0e0      	LDI  R30,LOW(0)
00008a b9ea      	OUT  0xA,R30
                 ; 0000 009D 
                 ; 0000 009E // Analog Comparator initialization
                 ; 0000 009F // Analog Comparator: Off
                 ; 0000 00A0 // The Analog Comparator's positive input is
                 ; 0000 00A1 // connected to the AIN0 pin
                 ; 0000 00A2 // The Analog Comparator's negative input is
                 ; 0000 00A3 // connected to the AIN1 pin
                 ; 0000 00A4 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00008b e8e0      	LDI  R30,LOW(128)
00008c b9e8      	OUT  0x8,R30
                 ; 0000 00A5 
                 ; 0000 00A6 // ADC initialization
                 ; 0000 00A7 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 00A8 // ADC Voltage Reference: AREF pin
                 ; 0000 00A9 ADMUX=ADC_VREF_TYPE;
00008d e0e0      	LDI  R30,LOW(0)
00008e b9e7      	OUT  0x7,R30
                 ; 0000 00AA ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
00008f e8e3      	LDI  R30,LOW(131)
000090 b9e6      	OUT  0x6,R30
                 ; 0000 00AB SFIOR=(0<<ACME);
000091 e0e0      	LDI  R30,LOW(0)
000092 bfe0      	OUT  0x30,R30
                 ; 0000 00AC 
                 ; 0000 00AD // SPI initialization
                 ; 0000 00AE // SPI disabled
                 ; 0000 00AF SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000093 b9ed      	OUT  0xD,R30
                 ; 0000 00B0 
                 ; 0000 00B1 // TWI initialization
                 ; 0000 00B2 // TWI disabled
                 ; 0000 00B3 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000094 bfe6      	OUT  0x36,R30
                 ; 0000 00B4 
                 ; 0000 00B5 // Global enable interrupts
                 ; 0000 00B6 #asm("sei")
000095 9478      	sei
                 ; 0000 00B7 BUZZER_ON;
000096 9a95      	SBI  0x12,5
                 ; 0000 00B8 delay_ms(100);
000097 e6a4      	LDI  R26,LOW(100)
000098 e0b0      	LDI  R27,0
000099 d231      	RCALL _delay_ms
                 ; 0000 00B9 BUZZER_OFF;
00009a 9895      	CBI  0x12,5
                 ; 0000 00BA     while (1)
                 _0xA:
                 ; 0000 00BB     {
                 ; 0000 00BC     // Place your code here
                 ; 0000 00BD         Uint_data_led1 = ADE7753_READ(1,VRMS);
00009b e0e1      	LDI  R30,LOW(1)
00009c 93ea      	ST   -Y,R30
00009d e1e7      	LDI  R30,LOW(23)
00009e 93ea      	ST   -Y,R30
00009f e0a3      	LDI  R26,LOW(3)
0000a0 d02e      	RCALL _ADE7753_READ
0000a1 93e0 0162 	STS  _Uint_data_led1,R30
0000a3 93f0 0163 	STS  _Uint_data_led1+1,R31
                 ; 0000 00BE         Uint_data_led2 = ADE7753_READ(1,IRMS);
0000a5 e0e1      	LDI  R30,LOW(1)
0000a6 93ea      	ST   -Y,R30
0000a7 e1e6      	LDI  R30,LOW(22)
0000a8 93ea      	ST   -Y,R30
0000a9 e0a3      	LDI  R26,LOW(3)
0000aa d024      	RCALL _ADE7753_READ
0000ab 93e0 0164 	STS  _Uint_data_led2,R30
0000ad 93f0 0165 	STS  _Uint_data_led2+1,R31
                 ; 0000 00BF     }
0000af cfeb      	RJMP _0xA
                 ; 0000 00C0 }
                 _0xD:
0000b0 cfff      	RJMP _0xD
                 ; .FEND
                 ;#include "ADE7753.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "delay.h"
                 ;
                 ;
                 ;void    SPI_7753_SEND(unsigned char data)
                 ; 0001 0006 {
                 
                 	.CSEG
                 _SPI_7753_SEND:
                 ; .FSTART _SPI_7753_SEND
                 ; 0001 0007     unsigned char   cnt;
                 ; 0001 0008     unsigned char   tmp = data;
                 ; 0001 0009 
                 ; 0001 000A     for(cnt = 0;cnt < 8; cnt++)
0000b1 93aa      	ST   -Y,R26
0000b2 d275      	RCALL __SAVELOCR2
                 ;	data -> Y+2
                 ;	cnt -> R17
                 ;	tmp -> R16
0000b3 810a      	LDD  R16,Y+2
0000b4 e010      	LDI  R17,LOW(0)
                 _0x20004:
0000b5 3018      	CPI  R17,8
0000b6 f438      	BRSH _0x20005
                 ; 0001 000B     {
                 ; 0001 000C         if((tmp & 0x80) == 0x80)   SPI_MOSI_HIGHT;
0000b7 2fe0      	MOV  R30,R16
0000b8 78e0      	ANDI R30,LOW(0x80)
                 ; 0001 000D         else SPI_MOSI_LOW;
                 _0x20062:
0000b9 9aaa      	SBI  0x15,2
                 ; 0001 000E 
                 ; 0001 000F         SPI_SCK_HIGHT;
0000ba d1bc      	RCALL SUBOPT_0x1
                 ; 0001 0010         delay_us(50);
                 ; 0001 0011         SPI_SCK_LOW;
                 ; 0001 0012         delay_us(50);
0000bb d1c1      	RCALL SUBOPT_0x2
                 ; 0001 0013         tmp <<= 1;
                 ; 0001 0014     }
0000bc 5f1f      	SUBI R17,-1
0000bd cff7      	RJMP _0x20004
                 _0x20005:
                 ; 0001 0015 }
0000be d26e      	RCALL __LOADLOCR2
0000bf c097      	RJMP _0x2000001
                 ; .FEND
                 ;
                 ;unsigned char    SPI_7753_RECEIVE(void)
                 ; 0001 0018 {
                 _SPI_7753_RECEIVE:
                 ; .FSTART _SPI_7753_RECEIVE
                 ; 0001 0019     unsigned char cnt;
                 ; 0001 001A     unsigned char data;
                 ; 0001 001B     data = 0;
0000c0 d267      	RCALL __SAVELOCR2
                 ;	cnt -> R17
                 ;	data -> R16
0000c1 e000      	LDI  R16,LOW(0)
                 ; 0001 001C     for(cnt = 0;cnt < 8; cnt++)
0000c2 e010      	LDI  R17,LOW(0)
                 _0x20011:
0000c3 3018      	CPI  R17,8
0000c4 f430      	BRSH _0x20012
                 ; 0001 001D     {
                 ; 0001 001E         SPI_SCK_HIGHT;
0000c5 d1b1      	RCALL SUBOPT_0x1
                 ; 0001 001F         delay_us(50);
                 ; 0001 0020         SPI_SCK_LOW;
                 ; 0001 0021         if(SPI_MISO_HIGHT)   data += 1;
0000c6 999b      	SBIC 0x13,3
0000c7 5f0f      	SUBI R16,-LOW(1)
                 ; 0001 0022         delay_us(50);
0000c8 d1b4      	RCALL SUBOPT_0x2
                 ; 0001 0023         data <<= 1;
                 ; 0001 0024 
                 ; 0001 0025     }
0000c9 5f1f      	SUBI R17,-1
0000ca cff8      	RJMP _0x20011
                 _0x20012:
                 ; 0001 0026     return data;
0000cb 2fe0      	MOV  R30,R16
0000cc 9109      	LD   R16,Y+
0000cd 9119      	LD   R17,Y+
0000ce 9508      	RET
                 ; 0001 0027 }
                 ; .FEND
                 ;
                 ;void    ADE7753_WRITE(unsigned char IC_CS,unsigned char addr,unsigned char num_data,unsigned char data_1,unsigned char d ...
                 ; 0001 002A {
                 ; 0001 002B     unsigned char data[4];
                 ; 0001 002C     unsigned char   i;
                 ; 0001 002D     data[0] = data_1;
                 ;	IC_CS -> Y+10
                 ;	addr -> Y+9
                 ;	num_data -> Y+8
                 ;	data_1 -> Y+7
                 ;	data_2 -> Y+6
                 ;	data_3 -> Y+5
                 ;	data -> Y+1
                 ;	i -> R17
                 ; 0001 002E     data[1] = data_2;
                 ; 0001 002F     data[2] = data_3;
                 ; 0001 0030 
                 ; 0001 0031     switch (IC_CS)
                 ; 0001 0032     {
                 ; 0001 0033         case 1:
                 ; 0001 0034         {
                 ; 0001 0035             PHASE_1_ON;
                 ; 0001 0036             PHASE_2_OFF;
                 ; 0001 0037             PHASE_3_OFF;
                 ; 0001 0038             break;
                 ; 0001 0039         }
                 ; 0001 003A         case 2:
                 ; 0001 003B         {
                 ; 0001 003C             PHASE_1_OFF;
                 ; 0001 003D             PHASE_2_ON;
                 ; 0001 003E             PHASE_3_OFF;
                 ; 0001 003F             break;
                 ; 0001 0040         }
                 ; 0001 0041         case 3:
                 ; 0001 0042         {
                 ; 0001 0043             PHASE_1_OFF;
                 ; 0001 0044             PHASE_2_OFF;
                 ; 0001 0045             PHASE_3_ON;
                 ; 0001 0046             break;
                 ; 0001 0047         }
                 ; 0001 0048     }
                 ; 0001 0049     addr &= 0x3F;
                 ; 0001 004A     addr |= 0x80;
                 ; 0001 004B     delay_us(100);
                 ; 0001 004C     SPI_7753_SEND(addr);
                 ; 0001 004D     delay_us(100);
                 ; 0001 004E     for(i=0;i<num_data;i++)    SPI_7753_SEND(data[i]);
                 ; 0001 004F delay_us(100);
                 ; 0001 0050     PHASE_1_OFF;
                 ; 0001 0051     PHASE_2_OFF;
                 ; 0001 0052     PHASE_3_OFF;
                 ; 0001 0053 }
                 ;unsigned int    ADE7753_READ(unsigned char IC_CS,unsigned char addr,unsigned char num_data)
                 ; 0001 0055 {
                 _ADE7753_READ:
                 ; .FSTART _ADE7753_READ
                 ; 0001 0056     unsigned char   i;
                 ; 0001 0057     unsigned char   data[4];
                 ; 0001 0058     unsigned long int res;
                 ; 0001 0059     for(i=0;i<4;i++)    data[i] = 0;
0000cf 93aa      	ST   -Y,R26
0000d0 9728      	SBIW R28,8
0000d1 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+11
                 ;	addr -> Y+10
                 ;	num_data -> Y+9
                 ;	i -> R17
                 ;	data -> Y+5
                 ;	res -> Y+1
0000d2 e010      	LDI  R17,LOW(0)
                 _0x2003A:
0000d3 3014      	CPI  R17,4
0000d4 f430      	BRSH _0x2003B
0000d5 d1ac      	RCALL SUBOPT_0x3
0000d6 d1b0      	RCALL SUBOPT_0x4
0000d7 e0e0      	LDI  R30,LOW(0)
0000d8 93ec      	ST   X,R30
0000d9 5f1f      	SUBI R17,-1
0000da cff8      	RJMP _0x2003A
                 _0x2003B:
                 ; 0001 005A switch (IC_CS)
0000db 85eb      	LDD  R30,Y+11
0000dc d1ad      	RCALL SUBOPT_0x5
                 ; 0001 005B     {
                 ; 0001 005C         case 1:
0000dd f421      	BRNE _0x2003F
                 ; 0001 005D         {
                 ; 0001 005E             PHASE_1_ON;
0000de 98ad      	CBI  0x15,5
                 ; 0001 005F             PHASE_2_OFF;
0000df 9ac0      	SBI  0x18,0
                 ; 0001 0060             PHASE_3_OFF;
0000e0 9ac0      	SBI  0x18,0
                 ; 0001 0061             break;
0000e1 c00b      	RJMP _0x2003E
                 ; 0001 0062         }
                 ; 0001 0063         case 2:
                 _0x2003F:
0000e2 d1ac      	RCALL SUBOPT_0x6
0000e3 f421      	BRNE _0x20046
                 ; 0001 0064         {
                 ; 0001 0065             PHASE_1_OFF;
0000e4 9aad      	SBI  0x15,5
                 ; 0001 0066             PHASE_2_ON;
0000e5 98c0      	CBI  0x18,0
                 ; 0001 0067             PHASE_3_OFF;
0000e6 9ac0      	SBI  0x18,0
                 ; 0001 0068             break;
0000e7 c005      	RJMP _0x2003E
                 ; 0001 0069         }
                 ; 0001 006A         case 3:
                 _0x20046:
0000e8 d1aa      	RCALL SUBOPT_0x7
0000e9 f419      	BRNE _0x2003E
                 ; 0001 006B         {
                 ; 0001 006C             PHASE_1_OFF;
0000ea 9aad      	SBI  0x15,5
                 ; 0001 006D             PHASE_2_OFF;
0000eb 9ac0      	SBI  0x18,0
                 ; 0001 006E             PHASE_3_ON;
0000ec 98c0      	CBI  0x18,0
                 ; 0001 006F             break;
                 ; 0001 0070         }
                 ; 0001 0071     }
                 _0x2003E:
                 ; 0001 0072     delay_us(100);
0000ed d1a9      	RCALL SUBOPT_0x8
                 ; 0001 0073     addr &= 0x3F;
0000ee 85ea      	LDD  R30,Y+10
0000ef 73ef      	ANDI R30,LOW(0x3F)
0000f0 87ea      	STD  Y+10,R30
                 ; 0001 0074     SPI_7753_SEND(addr);
0000f1 85aa      	LDD  R26,Y+10
0000f2 dfbe      	RCALL _SPI_7753_SEND
                 ; 0001 0075     delay_us(100);
0000f3 d1a3      	RCALL SUBOPT_0x8
                 ; 0001 0076     for(i=0;i<num_data;i++) data[i] = SPI_7753_RECEIVE();
0000f4 e010      	LDI  R17,LOW(0)
                 _0x20055:
0000f5 85e9      	LDD  R30,Y+9
0000f6 171e      	CP   R17,R30
0000f7 f458      	BRSH _0x20056
0000f8 d189      	RCALL SUBOPT_0x3
0000f9 0fea      	ADD  R30,R26
0000fa 1ffb      	ADC  R31,R27
0000fb 93ff      	PUSH R31
0000fc 93ef      	PUSH R30
0000fd dfc2      	RCALL _SPI_7753_RECEIVE
0000fe 91af      	POP  R26
0000ff 91bf      	POP  R27
000100 93ec      	ST   X,R30
000101 5f1f      	SUBI R17,-1
000102 cff2      	RJMP _0x20055
                 _0x20056:
                 ; 0001 0077 delay_us(100);
000103 d193      	RCALL SUBOPT_0x8
                 ; 0001 0078     PHASE_1_OFF;
000104 9aad      	SBI  0x15,5
                 ; 0001 0079     PHASE_2_OFF;
000105 9ac0      	SBI  0x18,0
                 ; 0001 007A     PHASE_3_OFF;
000106 9ac0      	SBI  0x18,0
                 ; 0001 007B     res = 0;
000107 e0e0      	LDI  R30,LOW(0)
                +
000108 83e9     +STD Y + 1 , R30
000109 83ea     +STD Y + 1 + 1 , R30
00010a 83eb     +STD Y + 1 + 2 , R30
00010b 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
                 ; 0001 007C     for(i=0;i<num_data;i++)
00010c e010      	LDI  R17,LOW(0)
                 _0x2005E:
00010d 85e9      	LDD  R30,Y+9
00010e 171e      	CP   R17,R30
00010f f470      	BRSH _0x2005F
                 ; 0001 007D     {
                 ; 0001 007E         res <<= 8;
000110 d18b      	RCALL SUBOPT_0x9
000111 e0e8      	LDI  R30,LOW(8)
000112 d1c7      	RCALL __LSLD12
000113 d18d      	RCALL SUBOPT_0xA
                 ; 0001 007F         res += data[i];
000114 d16d      	RCALL SUBOPT_0x3
000115 d171      	RCALL SUBOPT_0x4
000116 91ec      	LD   R30,X
000117 e0f0      	LDI  R31,0
000118 d183      	RCALL SUBOPT_0x9
000119 d1cc      	RCALL __CWD1
00011a d1ba      	RCALL __ADDD12
00011b d185      	RCALL SUBOPT_0xA
                 ; 0001 0080     }
00011c 5f1f      	SUBI R17,-1
00011d cfef      	RJMP _0x2005E
                 _0x2005F:
                 ; 0001 0081     if(addr == 0x16)    return (res/3600);
00011e 85aa      	LDD  R26,Y+10
00011f 31a6      	CPI  R26,LOW(0x16)
000120 f439      	BRNE _0x20060
000121 d17a      	RCALL SUBOPT_0x9
                +
000122 e1e0     +LDI R30 , LOW ( 0xE10 )
000123 e0fe     +LDI R31 , HIGH ( 0xE10 )
000124 e060     +LDI R22 , BYTE3 ( 0xE10 )
000125 e070     +LDI R23 , BYTE4 ( 0xE10 )
                 	__GETD1N 0xE10
000126 d1d7      	RCALL __DIVD21U
000127 c013      	RJMP _0x2000002
                 ; 0001 0082     if(addr == 0x17)    return  (res/500);
                 _0x20060:
000128 85aa      	LDD  R26,Y+10
000129 31a7      	CPI  R26,LOW(0x17)
00012a f439      	BRNE _0x20061
00012b d170      	RCALL SUBOPT_0x9
                +
00012c efe4     +LDI R30 , LOW ( 0x1F4 )
00012d e0f1     +LDI R31 , HIGH ( 0x1F4 )
00012e e060     +LDI R22 , BYTE3 ( 0x1F4 )
00012f e070     +LDI R23 , BYTE4 ( 0x1F4 )
                 	__GETD1N 0x1F4
000130 d1cd      	RCALL __DIVD21U
000131 c009      	RJMP _0x2000002
                 ; 0001 0083     return data[0]+data[1] + data[2];
                 _0x20061:
000132 81ad      	LDD  R26,Y+5
000133 27bb      	CLR  R27
000134 81ee      	LDD  R30,Y+6
000135 e0f0      	LDI  R31,0
000136 d150      	RCALL SUBOPT_0x4
000137 81ef      	LDD  R30,Y+7
000138 e0f0      	LDI  R31,0
000139 0fea      	ADD  R30,R26
00013a 1ffb      	ADC  R31,R27
                 _0x2000002:
00013b 8118      	LDD  R17,Y+0
00013c 962c      	ADIW R28,12
00013d 9508      	RET
                 ; 0001 0084 }
                 ; .FEND
                 ;
                 ;void    ADE7753_INIT(void)
                 ; 0001 0087 {
                 ; 0001 0088     ADE7753_WRITE(1,MODE,0x00,0x00,0x00);
                 ; 0001 0089     //ADE7753_WRITE(1,SAGLVL,0X2a,0X00,0X00);
                 ; 0001 008A     //ADE7753_WRITE(1,SAGCYC,0XFF,0X00,0X00);
                 ; 0001 008B }
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void    SPI_SENDBYTE(unsigned char  data,unsigned char action)
                 ; 0002 0005 {
                 
                 	.CSEG
                 _SPI_SENDBYTE:
                 ; .FSTART _SPI_SENDBYTE
                 ; 0002 0006     unsigned char   i;
                 ; 0002 0007     for(i=0;i<8;i++)
00013e 93aa      	ST   -Y,R26
00013f 931a      	ST   -Y,R17
                 ;	data -> Y+2
                 ;	action -> Y+1
                 ;	i -> R17
000140 e010      	LDI  R17,LOW(0)
                 _0x40004:
000141 3018      	CPI  R17,8
000142 f470      	BRSH _0x40005
                 ; 0002 0008     {
                 ; 0002 0009         if((data & 0x80) == 0x80)    DO_SPI_MOSI = 1;
000143 81ea      	LDD  R30,Y+2
000144 78e0      	ANDI R30,LOW(0x80)
000145 38e0      	CPI  R30,LOW(0x80)
000146 f411      	BRNE _0x40006
000147 9ac3      	SBI  0x18,3
                 ; 0002 000A         else    DO_SPI_MOSI = 0;
000148 c001      	RJMP _0x40009
                 _0x40006:
000149 98c3      	CBI  0x18,3
                 ; 0002 000B         data <<= 1;
                 _0x40009:
00014a 81ea      	LDD  R30,Y+2
00014b 0fee      	LSL  R30
00014c 83ea      	STD  Y+2,R30
                 ; 0002 000C         DO_SPI_SCK = 1;
00014d 9ac5      	SBI  0x18,5
                 ; 0002 000D         DO_SPI_SCK = 0;
00014e 98c5      	CBI  0x18,5
                 ; 0002 000E     }
00014f 5f1f      	SUBI R17,-1
000150 cff0      	RJMP _0x40004
                 _0x40005:
                 ; 0002 000F     if(action)
000151 81e9      	LDD  R30,Y+1
000152 30e0      	CPI  R30,0
000153 f011      	BREQ _0x40010
                 ; 0002 0010     {
                 ; 0002 0011         DO_SPI_LATCH = 1;
000154 9ac1      	SBI  0x18,1
                 ; 0002 0012         DO_SPI_LATCH = 0;
000155 98c1      	CBI  0x18,1
                 ; 0002 0013     }
                 ; 0002 0014 }
                 _0x40010:
000156 8118      	LDD  R17,Y+0
                 _0x2000001:
000157 9623      	ADIW R28,3
000158 9508      	RET
                 ; .FEND
                 ;#include "scan_led.h"
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;unsigned char Uc_led_count = 1;
                 
                 	.DSEG
                 ;unsigned char   Uc_led_data = 0;
                 ;unsigned int    Uint_data_led1 = 0;
                 ;unsigned int    Uint_data_led2 = 0;
                 ;unsigned int    Uint_data_led3 = 0;
                 ;
                 ;/* Day du lieu quet led qua duong spi_software
                 ;Co thẻ day tu 1 den 3 byte du lieu.
                 ;Du lieu sau khi day ra day du moi tien hanh xuat du lieu
                 ;num_bytes : so byte duoc day ra
                 ;data_first : du lieu dau tien
                 ;data_second: du lieu thu 2
                 ;data_third ; du lieu thu 3
                 ;*/
                 ;void    SEND_DATA_LED(unsigned char num_bytes,unsigned char  byte_first,unsigned char  byte_second,unsigned char  byte_t ...
                 ; 0003 0013 {
                 
                 	.CSEG
                 _SEND_DATA_LED:
                 ; .FSTART _SEND_DATA_LED
                 ; 0003 0014     unsigned char   i;
                 ; 0003 0015     unsigned char   data[4];
                 ; 0003 0016     for(i=0;i<4;i++)    data[i] = 0;
000159 93aa      	ST   -Y,R26
00015a 9724      	SBIW R28,4
00015b 931a      	ST   -Y,R17
                 ;	num_bytes -> Y+8
                 ;	byte_first -> Y+7
                 ;	byte_second -> Y+6
                 ;	byte_third -> Y+5
                 ;	i -> R17
                 ;	data -> Y+1
00015c e010      	LDI  R17,LOW(0)
                 _0x60005:
00015d 3014      	CPI  R17,4
00015e f428      	BRSH _0x60006
00015f d146      	RCALL SUBOPT_0xB
000160 e0e0      	LDI  R30,LOW(0)
000161 93ec      	ST   X,R30
000162 5f1f      	SUBI R17,-1
000163 cff9      	RJMP _0x60005
                 _0x60006:
                 ; 0003 0017 data[0] = byte_first;
000164 81ef      	LDD  R30,Y+7
000165 83e9      	STD  Y+1,R30
                 ; 0003 0018     data[1] = byte_second;
000166 81ee      	LDD  R30,Y+6
000167 83ea      	STD  Y+2,R30
                 ; 0003 0019     data[2] = byte_third;
000168 81ed      	LDD  R30,Y+5
000169 83eb      	STD  Y+3,R30
                 ; 0003 001A 
                 ; 0003 001B     for(i=0;i<(num_bytes - 1);i++)    SPI_SENDBYTE(data[i],0);
00016a e010      	LDI  R17,LOW(0)
                 _0x60008:
00016b 85e8      	LDD  R30,Y+8
00016c e0f0      	LDI  R31,0
00016d 9731      	SBIW R30,1
00016e 2fa1      	MOV  R26,R17
00016f e0b0      	LDI  R27,0
000170 17ae      	CP   R26,R30
000171 07bf      	CPC  R27,R31
000172 f43c      	BRGE _0x60009
000173 d132      	RCALL SUBOPT_0xB
000174 91ec      	LD   R30,X
000175 93ea      	ST   -Y,R30
000176 e0a0      	LDI  R26,LOW(0)
000177 dfc6      	RCALL _SPI_SENDBYTE
000178 5f1f      	SUBI R17,-1
000179 cff1      	RJMP _0x60008
                 _0x60009:
                 ; 0003 001C SPI_SENDBYTE(data[i],1);
00017a d12b      	RCALL SUBOPT_0xB
00017b 91ec      	LD   R30,X
00017c 93ea      	ST   -Y,R30
00017d e0a1      	LDI  R26,LOW(1)
00017e dfbf      	RCALL _SPI_SENDBYTE
                 ; 0003 001D }
00017f 8118      	LDD  R17,Y+0
000180 9629      	ADIW R28,9
000181 9508      	RET
                 ; .FEND
                 ;
                 ;void    SELECT_LED(unsigned char num_led,unsigned char    data)
                 ; 0003 0020 {
                 _SELECT_LED:
                 ; .FSTART _SELECT_LED
                 ; 0003 0021     unsigned char   byte1,byte2,byte3;
                 ; 0003 0022     byte1 = 0;
000182 93aa      	ST   -Y,R26
000183 d1a2      	RCALL __SAVELOCR4
                 ;	num_led -> Y+5
                 ;	data -> Y+4
                 ;	byte1 -> R17
                 ;	byte2 -> R16
                 ;	byte3 -> R19
000184 e010      	LDI  R17,LOW(0)
                 ; 0003 0023     byte2 = 0;
000185 e000      	LDI  R16,LOW(0)
                 ; 0003 0024     byte3 = 0;
000186 e030      	LDI  R19,LOW(0)
                 ; 0003 0025     switch(num_led)
000187 81ed      	LDD  R30,Y+5
000188 d101      	RCALL SUBOPT_0x5
                 ; 0003 0026     {
                 ; 0003 0027         case    1:
000189 f419      	BRNE _0x6000D
                 ; 0003 0028         {
                 ; 0003 0029             byte3 = 0x01;
00018a e031      	LDI  R19,LOW(1)
                 ; 0003 002A             byte2 = 0x01;
00018b e001      	LDI  R16,LOW(1)
                 ; 0003 002B             break;
00018c c04a      	RJMP _0x6000C
                 ; 0003 002C         }
                 ; 0003 002D         case    2:
                 _0x6000D:
00018d d101      	RCALL SUBOPT_0x6
00018e f419      	BRNE _0x6000E
                 ; 0003 002E         {
                 ; 0003 002F             byte3 = 0x02;
00018f e032      	LDI  R19,LOW(2)
                 ; 0003 0030             byte2 = 0x02;
000190 e002      	LDI  R16,LOW(2)
                 ; 0003 0031             //byte1 = 0x04;
                 ; 0003 0032             break;
000191 c045      	RJMP _0x6000C
                 ; 0003 0033         }
                 ; 0003 0034         case    3:
                 _0x6000E:
000192 d100      	RCALL SUBOPT_0x7
000193 f421      	BRNE _0x6000F
                 ; 0003 0035         {
                 ; 0003 0036             byte3 = 0x04;
000194 e034      	LDI  R19,LOW(4)
                 ; 0003 0037             byte2 = 0x04;
000195 e004      	LDI  R16,LOW(4)
                 ; 0003 0038             byte1 = 0x40;
000196 e410      	LDI  R17,LOW(64)
                 ; 0003 0039             break;
000197 c03f      	RJMP _0x6000C
                 ; 0003 003A         }
                 ; 0003 003B         case    4:
                 _0x6000F:
000198 30e4      	CPI  R30,LOW(0x4)
000199 e0a0      	LDI  R26,HIGH(0x4)
00019a 07fa      	CPC  R31,R26
00019b f419      	BRNE _0x60010
                 ; 0003 003C         {
                 ; 0003 003D             byte3 = 0x08;
00019c e038      	LDI  R19,LOW(8)
                 ; 0003 003E             byte2 = 0x08;
00019d e008      	LDI  R16,LOW(8)
                 ; 0003 003F             break;
00019e c038      	RJMP _0x6000C
                 ; 0003 0040         }
                 ; 0003 0041         case    5:
                 _0x60010:
00019f 30e5      	CPI  R30,LOW(0x5)
0001a0 e0a0      	LDI  R26,HIGH(0x5)
0001a1 07fa      	CPC  R31,R26
0001a2 f411      	BRNE _0x60011
                 ; 0003 0042         {
                 ; 0003 0043             byte3 = 0x40;
0001a3 e430      	LDI  R19,LOW(64)
                 ; 0003 0044             byte2 = 0x80;
0001a4 c031      	RJMP _0x6003E
                 ; 0003 0045             break;
                 ; 0003 0046         }
                 ; 0003 0047         case    6:
                 _0x60011:
0001a5 30e6      	CPI  R30,LOW(0x6)
0001a6 e0a0      	LDI  R26,HIGH(0x6)
0001a7 07fa      	CPC  R31,R26
0001a8 f421      	BRNE _0x60012
                 ; 0003 0048         {
                 ; 0003 0049             byte3 = 0x20;
0001a9 e230      	LDI  R19,LOW(32)
                 ; 0003 004A             byte2 = 0x40;
0001aa e400      	LDI  R16,LOW(64)
                 ; 0003 004B             byte1 = 0x40;
0001ab e410      	LDI  R17,LOW(64)
                 ; 0003 004C             break;
0001ac c02a      	RJMP _0x6000C
                 ; 0003 004D         }
                 ; 0003 004E         case    7:
                 _0x60012:
0001ad 30e7      	CPI  R30,LOW(0x7)
0001ae e0a0      	LDI  R26,HIGH(0x7)
0001af 07fa      	CPC  R31,R26
0001b0 f419      	BRNE _0x60013
                 ; 0003 004F         {
                 ; 0003 0050             byte3 = 0x10;
0001b1 e130      	LDI  R19,LOW(16)
                 ; 0003 0051             byte2 = 0x20;
0001b2 e200      	LDI  R16,LOW(32)
                 ; 0003 0052             break;
0001b3 c023      	RJMP _0x6000C
                 ; 0003 0053         }
                 ; 0003 0054         case    8:
                 _0x60013:
0001b4 30e8      	CPI  R30,LOW(0x8)
0001b5 e0a0      	LDI  R26,HIGH(0x8)
0001b6 07fa      	CPC  R31,R26
0001b7 f419      	BRNE _0x60014
                 ; 0003 0055         {
                 ; 0003 0056             byte3 = 0x80;
0001b8 e830      	LDI  R19,LOW(128)
                 ; 0003 0057             byte2 = 0x10;
0001b9 e100      	LDI  R16,LOW(16)
                 ; 0003 0058             break;
0001ba c01c      	RJMP _0x6000C
                 ; 0003 0059         }
                 ; 0003 005A         case    9:
                 _0x60014:
0001bb 30e9      	CPI  R30,LOW(0x9)
0001bc e0a0      	LDI  R26,HIGH(0x9)
0001bd 07fa      	CPC  R31,R26
0001be f419      	BRNE _0x60015
                 ; 0003 005B         {
                 ; 0003 005C             byte3 = 0x00;
0001bf e030      	LDI  R19,LOW(0)
                 ; 0003 005D             byte2 = 0x40;
0001c0 e400      	LDI  R16,LOW(64)
                 ; 0003 005E             break;
0001c1 c015      	RJMP _0x6000C
                 ; 0003 005F         }
                 ; 0003 0060         case    10:
                 _0x60015:
0001c2 30ea      	CPI  R30,LOW(0xA)
0001c3 e0a0      	LDI  R26,HIGH(0xA)
0001c4 07fa      	CPC  R31,R26
0001c5 f421      	BRNE _0x60016
                 ; 0003 0061         {
                 ; 0003 0062             byte3 = 0x00;
0001c6 e030      	LDI  R19,LOW(0)
                 ; 0003 0063             byte2 = 0x20;
0001c7 e200      	LDI  R16,LOW(32)
                 ; 0003 0064             byte1 = 0x04;
0001c8 e014      	LDI  R17,LOW(4)
                 ; 0003 0065             break;
0001c9 c00d      	RJMP _0x6000C
                 ; 0003 0066         }
                 ; 0003 0067         case    11:
                 _0x60016:
0001ca 30eb      	CPI  R30,LOW(0xB)
0001cb e0a0      	LDI  R26,HIGH(0xB)
0001cc 07fa      	CPC  R31,R26
0001cd f419      	BRNE _0x60017
                 ; 0003 0068         {
                 ; 0003 0069             byte3 = 0x00;
0001ce e030      	LDI  R19,LOW(0)
                 ; 0003 006A             byte2 = 0x10;
0001cf e100      	LDI  R16,LOW(16)
                 ; 0003 006B             break;
0001d0 c006      	RJMP _0x6000C
                 ; 0003 006C         }
                 ; 0003 006D         case    12:
                 _0x60017:
0001d1 30ec      	CPI  R30,LOW(0xC)
0001d2 e0a0      	LDI  R26,HIGH(0xC)
0001d3 07fa      	CPC  R31,R26
0001d4 f411      	BRNE _0x6000C
                 ; 0003 006E         {
                 ; 0003 006F             byte3 = 0x00;
0001d5 e030      	LDI  R19,LOW(0)
                 ; 0003 0070             byte2 = 0x80;
                 _0x6003E:
0001d6 e800      	LDI  R16,LOW(128)
                 ; 0003 0071             break;
                 ; 0003 0072         }
                 ; 0003 0073     }
                 _0x6000C:
                 ; 0003 0074     switch(data)
0001d7 81ec      	LDD  R30,Y+4
0001d8 e0f0      	LDI  R31,0
                 ; 0003 0075     {
                 ; 0003 0076         case    0:
0001d9 9730      	SBIW R30,0
0001da f411      	BRNE _0x6001C
                 ; 0003 0077         {
                 ; 0003 0078             byte1 |= 0xB7;
0001db 6b17      	ORI  R17,LOW(183)
                 ; 0003 0079             break;
0001dc c031      	RJMP _0x6001B
                 ; 0003 007A         }
                 ; 0003 007B         case    1:
                 _0x6001C:
0001dd 30e1      	CPI  R30,LOW(0x1)
0001de e0a0      	LDI  R26,HIGH(0x1)
0001df 07fa      	CPC  R31,R26
0001e0 f411      	BRNE _0x6001D
                 ; 0003 007C         {
                 ; 0003 007D             byte1 |= 0x81;
0001e1 6811      	ORI  R17,LOW(129)
                 ; 0003 007E             break;
0001e2 c02b      	RJMP _0x6001B
                 ; 0003 007F         }
                 ; 0003 0080         case    2:
                 _0x6001D:
0001e3 d0ab      	RCALL SUBOPT_0x6
0001e4 f411      	BRNE _0x6001E
                 ; 0003 0081         {
                 ; 0003 0082             byte1 |= 0x3D;
0001e5 631d      	ORI  R17,LOW(61)
                 ; 0003 0083             break;
0001e6 c027      	RJMP _0x6001B
                 ; 0003 0084         }
                 ; 0003 0085         case    3:
                 _0x6001E:
0001e7 d0ab      	RCALL SUBOPT_0x7
0001e8 f411      	BRNE _0x6001F
                 ; 0003 0086         {
                 ; 0003 0087             byte1 |= 0xAD;
0001e9 6a1d      	ORI  R17,LOW(173)
                 ; 0003 0088             break;
0001ea c023      	RJMP _0x6001B
                 ; 0003 0089         }
                 ; 0003 008A         case    4:
                 _0x6001F:
0001eb 30e4      	CPI  R30,LOW(0x4)
0001ec e0a0      	LDI  R26,HIGH(0x4)
0001ed 07fa      	CPC  R31,R26
0001ee f411      	BRNE _0x60020
                 ; 0003 008B         {
                 ; 0003 008C             byte1 |= 0x8B;
0001ef 681b      	ORI  R17,LOW(139)
                 ; 0003 008D             break;
0001f0 c01d      	RJMP _0x6001B
                 ; 0003 008E         }
                 ; 0003 008F         case    5:
                 _0x60020:
0001f1 30e5      	CPI  R30,LOW(0x5)
0001f2 e0a0      	LDI  R26,HIGH(0x5)
0001f3 07fa      	CPC  R31,R26
0001f4 f411      	BRNE _0x60021
                 ; 0003 0090         {
                 ; 0003 0091             byte1 |= 0xAE;
0001f5 6a1e      	ORI  R17,LOW(174)
                 ; 0003 0092             break;
0001f6 c017      	RJMP _0x6001B
                 ; 0003 0093         }
                 ; 0003 0094         case    6:
                 _0x60021:
0001f7 30e6      	CPI  R30,LOW(0x6)
0001f8 e0a0      	LDI  R26,HIGH(0x6)
0001f9 07fa      	CPC  R31,R26
0001fa f411      	BRNE _0x60022
                 ; 0003 0095         {
                 ; 0003 0096             byte1 |= 0xBE;
0001fb 6b1e      	ORI  R17,LOW(190)
                 ; 0003 0097             break;
0001fc c011      	RJMP _0x6001B
                 ; 0003 0098         }
                 ; 0003 0099         case    7:
                 _0x60022:
0001fd 30e7      	CPI  R30,LOW(0x7)
0001fe e0a0      	LDI  R26,HIGH(0x7)
0001ff 07fa      	CPC  R31,R26
000200 f411      	BRNE _0x60023
                 ; 0003 009A         {
                 ; 0003 009B             byte1 = 0x85;
000201 e815      	LDI  R17,LOW(133)
                 ; 0003 009C             break;
000202 c00b      	RJMP _0x6001B
                 ; 0003 009D         }
                 ; 0003 009E         case    8:
                 _0x60023:
000203 30e8      	CPI  R30,LOW(0x8)
000204 e0a0      	LDI  R26,HIGH(0x8)
000205 07fa      	CPC  R31,R26
000206 f411      	BRNE _0x60024
                 ; 0003 009F         {
                 ; 0003 00A0             byte1 |= 0xBF;
000207 6b1f      	ORI  R17,LOW(191)
                 ; 0003 00A1             break;
000208 c005      	RJMP _0x6001B
                 ; 0003 00A2         }
                 ; 0003 00A3         case    9:
                 _0x60024:
000209 30e9      	CPI  R30,LOW(0x9)
00020a e0a0      	LDI  R26,HIGH(0x9)
00020b 07fa      	CPC  R31,R26
00020c f409      	BRNE _0x6001B
                 ; 0003 00A4         {
                 ; 0003 00A5             byte1 |= 0xAF;
00020d 6a1f      	ORI  R17,LOW(175)
                 ; 0003 00A6             break;
                 ; 0003 00A7         }
                 ; 0003 00A8     }
                 _0x6001B:
                 ; 0003 00A9     SEND_DATA_LED(2,byte1,byte2,byte3);
00020e e0e2      	LDI  R30,LOW(2)
00020f 93ea      	ST   -Y,R30
000210 931a      	ST   -Y,R17
000211 930a      	ST   -Y,R16
000212 2fa3      	MOV  R26,R19
000213 df45      	RCALL _SEND_DATA_LED
                 ; 0003 00AA }
000214 d116      	RCALL __LOADLOCR4
000215 9626      	ADIW R28,6
000216 9508      	RET
                 ; .FEND
                 ;
                 ;void SCAN_LED(void)
                 ; 0003 00AD {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0003 00AE     if(Uc_led_count == 1)   Uc_led_data = Uint_data_led1/1000;
000217 d093      	RCALL SUBOPT_0xC
000218 30a1      	CPI  R26,LOW(0x1)
000219 f419      	BRNE _0x60026
00021a d093      	RCALL SUBOPT_0xD
00021b d097      	RCALL SUBOPT_0xE
00021c c041      	RJMP _0x6003F
                 ; 0003 00AF     else if(Uc_led_count == 2)   Uc_led_data = (Uint_data_led1/100)%10;
                 _0x60026:
00021d d08d      	RCALL SUBOPT_0xC
00021e 30a2      	CPI  R26,LOW(0x2)
00021f f419      	BRNE _0x60028
000220 d08d      	RCALL SUBOPT_0xD
000221 d095      	RCALL SUBOPT_0xF
000222 c038      	RJMP _0x60040
                 ; 0003 00B0     else if(Uc_led_count == 3)   Uc_led_data = (Uint_data_led1/10)%10;
                 _0x60028:
000223 d087      	RCALL SUBOPT_0xC
000224 30a3      	CPI  R26,LOW(0x3)
000225 f419      	BRNE _0x6002A
000226 d087      	RCALL SUBOPT_0xD
000227 d094      	RCALL SUBOPT_0x10
000228 c032      	RJMP _0x60040
                 ; 0003 00B1     else if(Uc_led_count == 4)   Uc_led_data = (Uint_data_led1%10);
                 _0x6002A:
000229 d081      	RCALL SUBOPT_0xC
00022a 30a4      	CPI  R26,LOW(0x4)
00022b f411      	BRNE _0x6002C
00022c d081      	RCALL SUBOPT_0xD
00022d c02d      	RJMP _0x60040
                 ; 0003 00B2     else if(Uc_led_count == 5)   Uc_led_data = Uint_data_led2/1000;
                 _0x6002C:
00022e d07c      	RCALL SUBOPT_0xC
00022f 30a5      	CPI  R26,LOW(0x5)
000230 f419      	BRNE _0x6002E
000231 d08f      	RCALL SUBOPT_0x11
000232 d080      	RCALL SUBOPT_0xE
000233 c02a      	RJMP _0x6003F
                 ; 0003 00B3     else if(Uc_led_count == 6)   Uc_led_data = (Uint_data_led2/100)%10;
                 _0x6002E:
000234 d076      	RCALL SUBOPT_0xC
000235 30a6      	CPI  R26,LOW(0x6)
000236 f419      	BRNE _0x60030
000237 d089      	RCALL SUBOPT_0x11
000238 d07e      	RCALL SUBOPT_0xF
000239 c021      	RJMP _0x60040
                 ; 0003 00B4     else if(Uc_led_count == 7)   Uc_led_data = (Uint_data_led2/10)%10;
                 _0x60030:
00023a d070      	RCALL SUBOPT_0xC
00023b 30a7      	CPI  R26,LOW(0x7)
00023c f419      	BRNE _0x60032
00023d d083      	RCALL SUBOPT_0x11
00023e d07d      	RCALL SUBOPT_0x10
00023f c01b      	RJMP _0x60040
                 ; 0003 00B5     else if(Uc_led_count == 8)   Uc_led_data = (Uint_data_led2%10);
                 _0x60032:
000240 d06a      	RCALL SUBOPT_0xC
000241 30a8      	CPI  R26,LOW(0x8)
000242 f411      	BRNE _0x60034
000243 d07d      	RCALL SUBOPT_0x11
000244 c016      	RJMP _0x60040
                 ; 0003 00B6     else if(Uc_led_count == 9)   Uc_led_data = Uint_data_led3/1000;
                 _0x60034:
000245 d065      	RCALL SUBOPT_0xC
000246 30a9      	CPI  R26,LOW(0x9)
000247 f419      	BRNE _0x60036
000248 d07d      	RCALL SUBOPT_0x12
000249 d069      	RCALL SUBOPT_0xE
00024a c013      	RJMP _0x6003F
                 ; 0003 00B7     else if(Uc_led_count == 10)   Uc_led_data = (Uint_data_led3/100)%10;
                 _0x60036:
00024b d05f      	RCALL SUBOPT_0xC
00024c 30aa      	CPI  R26,LOW(0xA)
00024d f419      	BRNE _0x60038
00024e d077      	RCALL SUBOPT_0x12
00024f d067      	RCALL SUBOPT_0xF
000250 c00a      	RJMP _0x60040
                 ; 0003 00B8     else if(Uc_led_count == 11)   Uc_led_data = (Uint_data_led3/10)%10;
                 _0x60038:
000251 d059      	RCALL SUBOPT_0xC
000252 30ab      	CPI  R26,LOW(0xB)
000253 f419      	BRNE _0x6003A
000254 d071      	RCALL SUBOPT_0x12
000255 d066      	RCALL SUBOPT_0x10
000256 c004      	RJMP _0x60040
                 ; 0003 00B9     else if(Uc_led_count == 12)   Uc_led_data = (Uint_data_led3%10);
                 _0x6003A:
000257 d053      	RCALL SUBOPT_0xC
000258 30ac      	CPI  R26,LOW(0xC)
000259 f431      	BRNE _0x6003C
00025a d06b      	RCALL SUBOPT_0x12
                 _0x60040:
00025b e0ea      	LDI  R30,LOW(10)
00025c e0f0      	LDI  R31,HIGH(10)
00025d d0c5      	RCALL __MODW21U
                 _0x6003F:
00025e 93e0 0161 	STS  _Uc_led_data,R30
                 ; 0003 00BA     SELECT_LED(Uc_led_count,Uc_led_data);
                 _0x6003C:
000260 91e0 0160 	LDS  R30,_Uc_led_count
000262 93ea      	ST   -Y,R30
000263 91a0 0161 	LDS  R26,_Uc_led_data
000265 df1c      	RCALL _SELECT_LED
                 ; 0003 00BB     Uc_led_count++;
000266 91e0 0160 	LDS  R30,_Uc_led_count
000268 5fef      	SUBI R30,-LOW(1)
000269 93e0 0160 	STS  _Uc_led_count,R30
                 ; 0003 00BC     if(Uc_led_count > NUM_LED_SCAN*4)    Uc_led_count = 1;
00026b d03f      	RCALL SUBOPT_0xC
00026c 30a9      	CPI  R26,LOW(0x9)
00026d f018      	BRLO _0x6003D
00026e e0e1      	LDI  R30,LOW(1)
00026f 93e0 0160 	STS  _Uc_led_count,R30
                 ; 0003 00BD }
                 _0x6003D:
000271 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Uc_led_count:
000160           	.BYTE 0x1
                 _Uc_led_data:
000161           	.BYTE 0x1
                 _Uint_data_led1:
000162           	.BYTE 0x2
                 _Uint_data_led2:
000164           	.BYTE 0x2
                 _Uint_data_led3:
000166           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000272 e8e3      	LDI  R30,LOW(131)
000273 bded      	OUT  0x2D,R30
000274 e0e0      	LDI  R30,LOW(0)
000275 bdec      	OUT  0x2C,R30
000276 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000277 9aac      	SBI  0x15,4
                +
000278 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000279 958a     +DEC R24
00027a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00027b 98ac      	CBI  0x15,4
00027c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
                +
00027d e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00027e 958a     +DEC R24
00027f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000280 0f00      	LSL  R16
000281 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
000282 2fe1      	MOV  R30,R17
000283 e0f0      	LDI  R31,0
000284 01de      	MOVW R26,R28
000285 9615      	ADIW R26,5
000286 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000287 0fae      	ADD  R26,R30
000288 1fbf      	ADC  R27,R31
000289 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00028a e0f0      	LDI  R31,0
00028b 30e1      	CPI  R30,LOW(0x1)
00028c e0a0      	LDI  R26,HIGH(0x1)
00028d 07fa      	CPC  R31,R26
00028e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
00028f 30e2      	CPI  R30,LOW(0x2)
000290 e0a0      	LDI  R26,HIGH(0x2)
000291 07fa      	CPC  R31,R26
000292 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
000293 30e3      	CPI  R30,LOW(0x3)
000294 e0a0      	LDI  R26,HIGH(0x3)
000295 07fa      	CPC  R31,R26
000296 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
                +
000297 ec88     +LDI R24 , LOW ( 200 )
000298 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000299 9701     +SBIW R24 , 1
00029a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00029b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
                +
00029c 81a9     +LDD R26 , Y + 1
00029d 81ba     +LDD R27 , Y + 1 + 1
00029e 818b     +LDD R24 , Y + 1 + 2
00029f 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0002a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
                +
0002a1 83e9     +STD Y + 1 , R30
0002a2 83fa     +STD Y + 1 + 1 , R31
0002a3 836b     +STD Y + 1 + 2 , R22
0002a4 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0002a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xB:
0002a6 2fe1      	MOV  R30,R17
0002a7 e0f0      	LDI  R31,0
0002a8 01de      	MOVW R26,R28
0002a9 9611      	ADIW R26,1
0002aa cfdc      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xC:
0002ab 91a0 0160 	LDS  R26,_Uc_led_count
0002ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xD:
0002ae 91a0 0162 	LDS  R26,_Uint_data_led1
0002b0 91b0 0163 	LDS  R27,_Uint_data_led1+1
0002b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
0002b3 eee8      	LDI  R30,LOW(1000)
0002b4 e0f3      	LDI  R31,HIGH(1000)
0002b5 d035      	RCALL __DIVW21U
0002b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xF:
0002b7 e6e4      	LDI  R30,LOW(100)
0002b8 e0f0      	LDI  R31,HIGH(100)
0002b9 d031      	RCALL __DIVW21U
0002ba 01df      	MOVW R26,R30
0002bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x10:
0002bc e0ea      	LDI  R30,LOW(10)
0002bd e0f0      	LDI  R31,HIGH(10)
0002be d02c      	RCALL __DIVW21U
0002bf 01df      	MOVW R26,R30
0002c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x11:
0002c1 91a0 0164 	LDS  R26,_Uint_data_led2
0002c3 91b0 0165 	LDS  R27,_Uint_data_led2+1
0002c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x12:
0002c6 91a0 0166 	LDS  R26,_Uint_data_led3
0002c8 91b0 0167 	LDS  R27,_Uint_data_led3+1
0002ca 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002cb 9610      	adiw r26,0
0002cc f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002cd ed80     +LDI R24 , LOW ( 0x7D0 )
0002ce e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002cf 9701     +SBIW R24 , 1
0002d0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002d1 95a8      	wdr
0002d2 9711      	sbiw r26,1
0002d3 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002d4 9508      	ret
                 
                 __ADDD12:
0002d5 0fea      	ADD  R30,R26
0002d6 1ffb      	ADC  R31,R27
0002d7 1f68      	ADC  R22,R24
0002d8 1f79      	ADC  R23,R25
0002d9 9508      	RET
                 
                 __LSLD12:
0002da 23ee      	TST  R30
0002db 2e0e      	MOV  R0,R30
0002dc 01fd      	MOVW R30,R26
0002dd 01bc      	MOVW R22,R24
0002de f031      	BREQ __LSLD12R
                 __LSLD12L:
0002df 0fee      	LSL  R30
0002e0 1fff      	ROL  R31
0002e1 1f66      	ROL  R22
0002e2 1f77      	ROL  R23
0002e3 940a      	DEC  R0
0002e4 f7d1      	BRNE __LSLD12L
                 __LSLD12R:
0002e5 9508      	RET
                 
                 __CWD1:
0002e6 2f6f      	MOV  R22,R31
0002e7 0f66      	ADD  R22,R22
0002e8 0b66      	SBC  R22,R22
0002e9 2f76      	MOV  R23,R22
0002ea 9508      	RET
                 
                 __DIVW21U:
0002eb 2400      	CLR  R0
0002ec 2411      	CLR  R1
0002ed e190      	LDI  R25,16
                 __DIVW21U1:
0002ee 0faa      	LSL  R26
0002ef 1fbb      	ROL  R27
0002f0 1c00      	ROL  R0
0002f1 1c11      	ROL  R1
0002f2 1a0e      	SUB  R0,R30
0002f3 0a1f      	SBC  R1,R31
0002f4 f418      	BRCC __DIVW21U2
0002f5 0e0e      	ADD  R0,R30
0002f6 1e1f      	ADC  R1,R31
0002f7 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002f8 60a1      	SBR  R26,1
                 __DIVW21U3:
0002f9 959a      	DEC  R25
0002fa f799      	BRNE __DIVW21U1
0002fb 01fd      	MOVW R30,R26
0002fc 01d0      	MOVW R26,R0
0002fd 9508      	RET
                 
                 __DIVD21U:
0002fe 933f      	PUSH R19
0002ff 934f      	PUSH R20
000300 935f      	PUSH R21
000301 2400      	CLR  R0
000302 2411      	CLR  R1
000303 2744      	CLR  R20
000304 2755      	CLR  R21
000305 e230      	LDI  R19,32
                 __DIVD21U1:
000306 0faa      	LSL  R26
000307 1fbb      	ROL  R27
000308 1f88      	ROL  R24
000309 1f99      	ROL  R25
00030a 1c00      	ROL  R0
00030b 1c11      	ROL  R1
00030c 1f44      	ROL  R20
00030d 1f55      	ROL  R21
00030e 1a0e      	SUB  R0,R30
00030f 0a1f      	SBC  R1,R31
000310 0b46      	SBC  R20,R22
000311 0b57      	SBC  R21,R23
000312 f428      	BRCC __DIVD21U2
000313 0e0e      	ADD  R0,R30
000314 1e1f      	ADC  R1,R31
000315 1f46      	ADC  R20,R22
000316 1f57      	ADC  R21,R23
000317 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000318 60a1      	SBR  R26,1
                 __DIVD21U3:
000319 953a      	DEC  R19
00031a f759      	BRNE __DIVD21U1
00031b 01fd      	MOVW R30,R26
00031c 01bc      	MOVW R22,R24
00031d 01d0      	MOVW R26,R0
00031e 01ca      	MOVW R24,R20
00031f 915f      	POP  R21
000320 914f      	POP  R20
000321 913f      	POP  R19
000322 9508      	RET
                 
                 __MODW21U:
000323 dfc7      	RCALL __DIVW21U
000324 01fd      	MOVW R30,R26
000325 9508      	RET
                 
                 __SAVELOCR4:
000326 933a      	ST   -Y,R19
                 __SAVELOCR3:
000327 932a      	ST   -Y,R18
                 __SAVELOCR2:
000328 931a      	ST   -Y,R17
000329 930a      	ST   -Y,R16
00032a 9508      	RET
                 
                 __LOADLOCR4:
00032b 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00032c 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00032d 8119      	LDD  R17,Y+1
00032e 8108      	LD   R16,Y
00032f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8L register use summary:
r0 :  18 r1 :  11 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  22 r17:  50 r18:   2 r19:  20 r20:   7 r21:   6 r22:  19 r23:  10 
r24:  23 r25:  11 r26: 104 r27:  19 r28:   9 r29:   1 r30: 188 r31:  53 
x  :   9 y  :  92 z  :   7 
Registers used: 22 out of 35 (62.9%)

ATmega8L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  10 add   :   7 
adiw  :   7 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   4 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  51 brpl  :   0 brsh  :   7 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   8 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   9 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   3 
cpc   :  20 cpi   :  41 cpse  :   0 dec   :   6 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 
inc   :   0 ld    :  18 ldd   :  30 ldi   : 137 lds   :  10 lpm   :   7 
lsl   :   5 lsr   :   0 mov   :   9 movw  :  16 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :  10 out   :  40 
pop   :   5 push  :   5 rcall :  91 ret   :  33 reti  :   3 rjmp  :  71 
rol   :  13 ror   :   0 sbc   :   5 sbci  :   0 sbi   :  15 sbic  :   1 
sbis  :   0 sbiw  :  10 sbr   :   2 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  40 std   :  13 
sts   :   7 sub   :   2 subi  :  10 swap  :   0 tst   :   1 wdr   :   1 

Instructions used: 48 out of 114 (42.1%)

ATmega8L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000660   1622     10   1632    8192  19.9%
[.dseg] 0x000060 0x000168      0      8      8    1024   0.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 1 warnings
